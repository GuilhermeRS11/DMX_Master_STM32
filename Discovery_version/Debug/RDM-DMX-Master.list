
RDM-DMX-Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d8c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08003e4c  08003e4c  00013e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e98  08003e98  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08003e98  08003e98  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e98  08003e98  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e98  08003e98  00013e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e9c  08003e9c  00013e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08003ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  20000064  08003f04  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  08003f04  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d907  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002094  00000000  00000000  0002d9d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  0002fa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e8  00000000  00000000  00030708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000219b  00000000  00000000  000310f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f957  00000000  00000000  0003328b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000718a4  00000000  00000000  00042be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003070  00000000  00000000  000b4488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000b74f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000064 	.word	0x20000064
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003e34 	.word	0x08003e34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000068 	.word	0x20000068
 8000104:	08003e34 	.word	0x08003e34

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_UART_RxCpltCallback>:
void stopTiming(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    if (currentFrame.data == NULL) {
 8000228:	4b39      	ldr	r3, [pc, #228]	; (8000310 <HAL_UART_RxCpltCallback+0xf0>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d142      	bne.n	80002b6 <HAL_UART_RxCpltCallback+0x96>
    	// Cabeçalho e tamanho dos dados detectados, continua a leitura dos dados
		if ((uartBuffer[0] == header_sequence[0]) &&
 8000230:	4b38      	ldr	r3, [pc, #224]	; (8000314 <HAL_UART_RxCpltCallback+0xf4>)
 8000232:	781a      	ldrb	r2, [r3, #0]
 8000234:	4b38      	ldr	r3, [pc, #224]	; (8000318 <HAL_UART_RxCpltCallback+0xf8>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	429a      	cmp	r2, r3
 800023a:	d165      	bne.n	8000308 <HAL_UART_RxCpltCallback+0xe8>
			(uartBuffer[1] == header_sequence[1]) &&
 800023c:	4b35      	ldr	r3, [pc, #212]	; (8000314 <HAL_UART_RxCpltCallback+0xf4>)
 800023e:	785a      	ldrb	r2, [r3, #1]
 8000240:	4b35      	ldr	r3, [pc, #212]	; (8000318 <HAL_UART_RxCpltCallback+0xf8>)
 8000242:	785b      	ldrb	r3, [r3, #1]
		if ((uartBuffer[0] == header_sequence[0]) &&
 8000244:	429a      	cmp	r2, r3
 8000246:	d15f      	bne.n	8000308 <HAL_UART_RxCpltCallback+0xe8>
			(uartBuffer[2] == header_sequence[2])) {
 8000248:	4b32      	ldr	r3, [pc, #200]	; (8000314 <HAL_UART_RxCpltCallback+0xf4>)
 800024a:	789a      	ldrb	r2, [r3, #2]
 800024c:	4b32      	ldr	r3, [pc, #200]	; (8000318 <HAL_UART_RxCpltCallback+0xf8>)
 800024e:	789b      	ldrb	r3, [r3, #2]
			(uartBuffer[1] == header_sequence[1]) &&
 8000250:	429a      	cmp	r2, r3
 8000252:	d159      	bne.n	8000308 <HAL_UART_RxCpltCallback+0xe8>

			// Cabeçalho detectado, continua a leitura do tamanho dos dados
			currentFrame.capacity = (uint16_t)((uartBuffer[3] << 8) | uartBuffer[4]);
 8000254:	4b2f      	ldr	r3, [pc, #188]	; (8000314 <HAL_UART_RxCpltCallback+0xf4>)
 8000256:	78db      	ldrb	r3, [r3, #3]
 8000258:	021b      	lsls	r3, r3, #8
 800025a:	b21a      	sxth	r2, r3
 800025c:	4b2d      	ldr	r3, [pc, #180]	; (8000314 <HAL_UART_RxCpltCallback+0xf4>)
 800025e:	791b      	ldrb	r3, [r3, #4]
 8000260:	b21b      	sxth	r3, r3
 8000262:	4313      	orrs	r3, r2
 8000264:	b21b      	sxth	r3, r3
 8000266:	b29a      	uxth	r2, r3
 8000268:	4b29      	ldr	r3, [pc, #164]	; (8000310 <HAL_UART_RxCpltCallback+0xf0>)
 800026a:	809a      	strh	r2, [r3, #4]
			currentFrame.data = (uint8_t *)malloc(currentFrame.capacity);
 800026c:	4b28      	ldr	r3, [pc, #160]	; (8000310 <HAL_UART_RxCpltCallback+0xf0>)
 800026e:	889b      	ldrh	r3, [r3, #4]
 8000270:	0018      	movs	r0, r3
 8000272:	f003 fc7d 	bl	8003b70 <malloc>
 8000276:	0003      	movs	r3, r0
 8000278:	001a      	movs	r2, r3
 800027a:	4b25      	ldr	r3, [pc, #148]	; (8000310 <HAL_UART_RxCpltCallback+0xf0>)
 800027c:	601a      	str	r2, [r3, #0]
			if (currentFrame.data != NULL) {
 800027e:	4b24      	ldr	r3, [pc, #144]	; (8000310 <HAL_UART_RxCpltCallback+0xf0>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d008      	beq.n	8000298 <HAL_UART_RxCpltCallback+0x78>
				// Continua a recepção dos dados e rodapé
				HAL_UART_Receive_DMA(huart, currentFrame.data, currentFrame.capacity);
 8000286:	4b22      	ldr	r3, [pc, #136]	; (8000310 <HAL_UART_RxCpltCallback+0xf0>)
 8000288:	6819      	ldr	r1, [r3, #0]
 800028a:	4b21      	ldr	r3, [pc, #132]	; (8000310 <HAL_UART_RxCpltCallback+0xf0>)
 800028c:	889a      	ldrh	r2, [r3, #4]
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	0018      	movs	r0, r3
 8000292:	f002 fe01 	bl	8002e98 <HAL_UART_Receive_DMA>
    	} else {
    		// Se tiver errado, ignora os dados recebidos
    	}

    }
}
 8000296:	e037      	b.n	8000308 <HAL_UART_RxCpltCallback+0xe8>
				free(currentFrame.data);
 8000298:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <HAL_UART_RxCpltCallback+0xf0>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	0018      	movs	r0, r3
 800029e:	f003 fc71 	bl	8003b84 <free>
				currentFrame.data = NULL;
 80002a2:	4b1b      	ldr	r3, [pc, #108]	; (8000310 <HAL_UART_RxCpltCallback+0xf0>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
				HAL_UART_Receive_DMA(&huart1, uartBuffer, HEADER_BUFFER_SIZE);
 80002a8:	491a      	ldr	r1, [pc, #104]	; (8000314 <HAL_UART_RxCpltCallback+0xf4>)
 80002aa:	4b1c      	ldr	r3, [pc, #112]	; (800031c <HAL_UART_RxCpltCallback+0xfc>)
 80002ac:	2205      	movs	r2, #5
 80002ae:	0018      	movs	r0, r3
 80002b0:	f002 fdf2 	bl	8002e98 <HAL_UART_Receive_DMA>
}
 80002b4:	e028      	b.n	8000308 <HAL_UART_RxCpltCallback+0xe8>
    	uint16_t DataSize = currentFrame.capacity;
 80002b6:	210e      	movs	r1, #14
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	4a15      	ldr	r2, [pc, #84]	; (8000310 <HAL_UART_RxCpltCallback+0xf0>)
 80002bc:	8892      	ldrh	r2, [r2, #4]
 80002be:	801a      	strh	r2, [r3, #0]
    	if ((currentFrame.data[DataSize-3] == tail_sequence[0]) &&
 80002c0:	4b13      	ldr	r3, [pc, #76]	; (8000310 <HAL_UART_RxCpltCallback+0xf0>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	881b      	ldrh	r3, [r3, #0]
 80002c8:	3b03      	subs	r3, #3
 80002ca:	18d3      	adds	r3, r2, r3
 80002cc:	781a      	ldrb	r2, [r3, #0]
 80002ce:	4b14      	ldr	r3, [pc, #80]	; (8000320 <HAL_UART_RxCpltCallback+0x100>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	429a      	cmp	r2, r3
 80002d4:	d118      	bne.n	8000308 <HAL_UART_RxCpltCallback+0xe8>
    		(currentFrame.data[DataSize-2] == tail_sequence[1]) &&
 80002d6:	4b0e      	ldr	r3, [pc, #56]	; (8000310 <HAL_UART_RxCpltCallback+0xf0>)
 80002d8:	681a      	ldr	r2, [r3, #0]
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	881b      	ldrh	r3, [r3, #0]
 80002de:	3b02      	subs	r3, #2
 80002e0:	18d3      	adds	r3, r2, r3
 80002e2:	781a      	ldrb	r2, [r3, #0]
 80002e4:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <HAL_UART_RxCpltCallback+0x100>)
 80002e6:	785b      	ldrb	r3, [r3, #1]
    	if ((currentFrame.data[DataSize-3] == tail_sequence[0]) &&
 80002e8:	429a      	cmp	r2, r3
 80002ea:	d10d      	bne.n	8000308 <HAL_UART_RxCpltCallback+0xe8>
			(currentFrame.data[DataSize-1] == tail_sequence[2])) {
 80002ec:	4b08      	ldr	r3, [pc, #32]	; (8000310 <HAL_UART_RxCpltCallback+0xf0>)
 80002ee:	681a      	ldr	r2, [r3, #0]
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	881b      	ldrh	r3, [r3, #0]
 80002f4:	3b01      	subs	r3, #1
 80002f6:	18d3      	adds	r3, r2, r3
 80002f8:	781a      	ldrb	r2, [r3, #0]
 80002fa:	4b09      	ldr	r3, [pc, #36]	; (8000320 <HAL_UART_RxCpltCallback+0x100>)
 80002fc:	789b      	ldrb	r3, [r3, #2]
    		(currentFrame.data[DataSize-2] == tail_sequence[1]) &&
 80002fe:	429a      	cmp	r2, r3
 8000300:	d102      	bne.n	8000308 <HAL_UART_RxCpltCallback+0xe8>
			process_frame = 1; //Processa o frame
 8000302:	4b08      	ldr	r3, [pc, #32]	; (8000324 <HAL_UART_RxCpltCallback+0x104>)
 8000304:	2201      	movs	r2, #1
 8000306:	701a      	strb	r2, [r3, #0]
}
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b004      	add	sp, #16
 800030e:	bd80      	pop	{r7, pc}
 8000310:	200002f0 	.word	0x200002f0
 8000314:	200002f8 	.word	0x200002f8
 8000318:	20000000 	.word	0x20000000
 800031c:	20000110 	.word	0x20000110
 8000320:	20000004 	.word	0x20000004
 8000324:	20000306 	.word	0x20000306

08000328 <HAL_UART_TxCpltCallback>:

// Função para lidar com a transmissão concluída
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
    // Este callback será chamado quando a transmissão for concluída
	DMX_Set_DE_LOW();  // Desabilitar o barramento DMX para escrita (Necessidade do RS485)
 8000330:	2390      	movs	r3, #144	; 0x90
 8000332:	05db      	lsls	r3, r3, #23
 8000334:	2200      	movs	r2, #0
 8000336:	2102      	movs	r1, #2
 8000338:	0018      	movs	r0, r3
 800033a:	f001 fb05 	bl	8001948 <HAL_GPIO_WritePin>
	dmx_state = STATE_IDLE;  // Transição para o estado de IDLE
 800033e:	4b09      	ldr	r3, [pc, #36]	; (8000364 <HAL_UART_TxCpltCallback+0x3c>)
 8000340:	2200      	movs	r2, #0
 8000342:	701a      	strb	r2, [r3, #0]

	// libera o buffer de recebimento de dados
	DMX_buffer_toSend_Size = 0;
 8000344:	4b08      	ldr	r3, [pc, #32]	; (8000368 <HAL_UART_TxCpltCallback+0x40>)
 8000346:	2200      	movs	r2, #0
 8000348:	801a      	strh	r2, [r3, #0]
	free(DMX_buffer_toSend);
 800034a:	4b08      	ldr	r3, [pc, #32]	; (800036c <HAL_UART_TxCpltCallback+0x44>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	0018      	movs	r0, r3
 8000350:	f003 fc18 	bl	8003b84 <free>
	DMX_buffer_toSend = NULL;
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <HAL_UART_TxCpltCallback+0x44>)
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]

}
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	46bd      	mov	sp, r7
 800035e:	b002      	add	sp, #8
 8000360:	bd80      	pop	{r7, pc}
 8000362:	46c0      	nop			; (mov r8, r8)
 8000364:	200002ec 	.word	0x200002ec
 8000368:	20000304 	.word	0x20000304
 800036c:	20000300 	.word	0x20000300

08000370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b086      	sub	sp, #24
 8000374:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000376:	f000 fd83 	bl	8000e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800037a:	f000 f877 	bl	800046c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800037e:	f000 f9df 	bl	8000740 <MX_GPIO_Init>
  MX_DMA_Init();
 8000382:	f000 f9b7 	bl	80006f4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000386:	f000 f94f 	bl	8000628 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800038a:	f000 f97f 	bl	800068c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800038e:	f000 f8cf 	bl	8000530 <MX_TIM2_Init>
  MX_TIM17_Init();
 8000392:	f000 f921 	bl	80005d8 <MX_TIM17_Init>
	#define GUI_addr &huart1
	#define LIGHTING_addr &huart2

	uint8_t dataReceived;

	uint8_t GUI_receiveFinished = 0;
 8000396:	2317      	movs	r3, #23
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	2200      	movs	r2, #0
 800039c:	701a      	strb	r2, [r3, #0]
	uint8_t GUI_receive = 1;
 800039e:	2316      	movs	r3, #22
 80003a0:	18fb      	adds	r3, r7, r3
 80003a2:	2201      	movs	r2, #1
 80003a4:	701a      	strb	r2, [r3, #0]
	uint32_t currentTime;

	unsigned char viewDMX[20];

	DMX_UART_Init();
 80003a6:	f000 f971 	bl	800068c <MX_USART2_UART_Init>
	HAL_TIM_Base_Start(&htim17);
 80003aa:	4b27      	ldr	r3, [pc, #156]	; (8000448 <main+0xd8>)
 80003ac:	0018      	movs	r0, r3
 80003ae:	f002 f875 	bl	800249c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2);
 80003b2:	4b26      	ldr	r3, [pc, #152]	; (800044c <main+0xdc>)
 80003b4:	0018      	movs	r0, r3
 80003b6:	f002 f871 	bl	800249c <HAL_TIM_Base_Start>

	// Inicializa a DMA para a recepção UART
	HAL_UART_Receive_DMA(&huart1, uartBuffer, HEADER_BUFFER_SIZE);
 80003ba:	4925      	ldr	r1, [pc, #148]	; (8000450 <main+0xe0>)
 80003bc:	4b25      	ldr	r3, [pc, #148]	; (8000454 <main+0xe4>)
 80003be:	2205      	movs	r2, #5
 80003c0:	0018      	movs	r0, r3
 80003c2:	f002 fd69 	bl	8002e98 <HAL_UART_Receive_DMA>

//	if(process_frame == 0 && &huart1.Lock == HAL_UNLOCKED){
//		HAL_UART_Receive_DMA(&huart1, uartBuffer, HEADER_BUFFER_SIZE);
//	}

	if(process_frame){
 80003c6:	4b24      	ldr	r3, [pc, #144]	; (8000458 <main+0xe8>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d0fb      	beq.n	80003c6 <main+0x56>
		// Libera a memória anteriormente alocada se necessário
		if (DMX_buffer_toSend != NULL)
 80003ce:	4b23      	ldr	r3, [pc, #140]	; (800045c <main+0xec>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d004      	beq.n	80003e0 <main+0x70>
			free(DMX_buffer_toSend);
 80003d6:	4b21      	ldr	r3, [pc, #132]	; (800045c <main+0xec>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	0018      	movs	r0, r3
 80003dc:	f003 fbd2 	bl	8003b84 <free>

		DMX_buffer_toSend_Size = currentFrame.capacity - 3;
 80003e0:	4b1f      	ldr	r3, [pc, #124]	; (8000460 <main+0xf0>)
 80003e2:	889b      	ldrh	r3, [r3, #4]
 80003e4:	3b03      	subs	r3, #3
 80003e6:	b29a      	uxth	r2, r3
 80003e8:	4b1e      	ldr	r3, [pc, #120]	; (8000464 <main+0xf4>)
 80003ea:	801a      	strh	r2, [r3, #0]
		DMX_buffer_toSend = (uint8_t *)malloc(DMX_buffer_toSend_Size);
 80003ec:	4b1d      	ldr	r3, [pc, #116]	; (8000464 <main+0xf4>)
 80003ee:	881b      	ldrh	r3, [r3, #0]
 80003f0:	0018      	movs	r0, r3
 80003f2:	f003 fbbd 	bl	8003b70 <malloc>
 80003f6:	0003      	movs	r3, r0
 80003f8:	001a      	movs	r2, r3
 80003fa:	4b18      	ldr	r3, [pc, #96]	; (800045c <main+0xec>)
 80003fc:	601a      	str	r2, [r3, #0]

		// Verifica se a alocação de memória foi bem-sucedida antes de copiar os dados
		if (DMX_buffer_toSend != NULL) {
 80003fe:	4b17      	ldr	r3, [pc, #92]	; (800045c <main+0xec>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d00d      	beq.n	8000422 <main+0xb2>
			memcpy(DMX_buffer_toSend, currentFrame.data, DMX_buffer_toSend_Size);
 8000406:	4b15      	ldr	r3, [pc, #84]	; (800045c <main+0xec>)
 8000408:	6818      	ldr	r0, [r3, #0]
 800040a:	4b15      	ldr	r3, [pc, #84]	; (8000460 <main+0xf0>)
 800040c:	6819      	ldr	r1, [r3, #0]
 800040e:	4b15      	ldr	r3, [pc, #84]	; (8000464 <main+0xf4>)
 8000410:	881b      	ldrh	r3, [r3, #0]
 8000412:	001a      	movs	r2, r3
 8000414:	f003 fcba 	bl	8003d8c <memcpy>
			dmx_state = STATE_PREPARE;
 8000418:	4b13      	ldr	r3, [pc, #76]	; (8000468 <main+0xf8>)
 800041a:	2201      	movs	r2, #1
 800041c:	701a      	strb	r2, [r3, #0]
			DMX_SendHandler();
 800041e:	f000 fa33 	bl	8000888 <DMX_SendHandler>
		} else {
			// Lida com a falha na alocação de memória, se necessário
		}

		process_frame = 0;
 8000422:	4b0d      	ldr	r3, [pc, #52]	; (8000458 <main+0xe8>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]

    	// Prepara nova recepção
    	free(currentFrame.data);
 8000428:	4b0d      	ldr	r3, [pc, #52]	; (8000460 <main+0xf0>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	0018      	movs	r0, r3
 800042e:	f003 fba9 	bl	8003b84 <free>
    	currentFrame.data = NULL;
 8000432:	4b0b      	ldr	r3, [pc, #44]	; (8000460 <main+0xf0>)
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
    	HAL_UART_Receive_DMA(&huart1, uartBuffer, HEADER_BUFFER_SIZE);
 8000438:	4905      	ldr	r1, [pc, #20]	; (8000450 <main+0xe0>)
 800043a:	4b06      	ldr	r3, [pc, #24]	; (8000454 <main+0xe4>)
 800043c:	2205      	movs	r2, #5
 800043e:	0018      	movs	r0, r3
 8000440:	f002 fd2a 	bl	8002e98 <HAL_UART_Receive_DMA>
	if(process_frame){
 8000444:	e7bf      	b.n	80003c6 <main+0x56>
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	200000c8 	.word	0x200000c8
 800044c:	20000080 	.word	0x20000080
 8000450:	200002f8 	.word	0x200002f8
 8000454:	20000110 	.word	0x20000110
 8000458:	20000306 	.word	0x20000306
 800045c:	20000300 	.word	0x20000300
 8000460:	200002f0 	.word	0x200002f0
 8000464:	20000304 	.word	0x20000304
 8000468:	200002ec 	.word	0x200002ec

0800046c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800046c:	b590      	push	{r4, r7, lr}
 800046e:	b097      	sub	sp, #92	; 0x5c
 8000470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000472:	2428      	movs	r4, #40	; 0x28
 8000474:	193b      	adds	r3, r7, r4
 8000476:	0018      	movs	r0, r3
 8000478:	2330      	movs	r3, #48	; 0x30
 800047a:	001a      	movs	r2, r3
 800047c:	2100      	movs	r1, #0
 800047e:	f003 fc3f 	bl	8003d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000482:	2318      	movs	r3, #24
 8000484:	18fb      	adds	r3, r7, r3
 8000486:	0018      	movs	r0, r3
 8000488:	2310      	movs	r3, #16
 800048a:	001a      	movs	r2, r3
 800048c:	2100      	movs	r1, #0
 800048e:	f003 fc37 	bl	8003d00 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	0018      	movs	r0, r3
 8000496:	2314      	movs	r3, #20
 8000498:	001a      	movs	r2, r3
 800049a:	2100      	movs	r1, #0
 800049c:	f003 fc30 	bl	8003d00 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004a0:	0021      	movs	r1, r4
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	2202      	movs	r2, #2
 80004a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	2201      	movs	r2, #1
 80004ac:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	2210      	movs	r2, #16
 80004b2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	2202      	movs	r2, #2
 80004b8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2200      	movs	r2, #0
 80004be:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	22a0      	movs	r2, #160	; 0xa0
 80004c4:	0392      	lsls	r2, r2, #14
 80004c6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004c8:	187b      	adds	r3, r7, r1
 80004ca:	2200      	movs	r2, #0
 80004cc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	0018      	movs	r0, r3
 80004d2:	f001 fa57 	bl	8001984 <HAL_RCC_OscConfig>
 80004d6:	1e03      	subs	r3, r0, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0x72>
  {
    Error_Handler();
 80004da:	f000 fa59 	bl	8000990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004de:	2118      	movs	r1, #24
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	2207      	movs	r2, #7
 80004e4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	2202      	movs	r2, #2
 80004ea:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	2200      	movs	r2, #0
 80004f6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2101      	movs	r1, #1
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 fd5b 	bl	8001fb8 <HAL_RCC_ClockConfig>
 8000502:	1e03      	subs	r3, r0, #0
 8000504:	d001      	beq.n	800050a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000506:	f000 fa43 	bl	8000990 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2201      	movs	r2, #1
 800050e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	0018      	movs	r0, r3
 800051a:	f001 fe91 	bl	8002240 <HAL_RCCEx_PeriphCLKConfig>
 800051e:	1e03      	subs	r3, r0, #0
 8000520:	d001      	beq.n	8000526 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000522:	f000 fa35 	bl	8000990 <Error_Handler>
  }
}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	46bd      	mov	sp, r7
 800052a:	b017      	add	sp, #92	; 0x5c
 800052c:	bd90      	pop	{r4, r7, pc}
	...

08000530 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000536:	2308      	movs	r3, #8
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	0018      	movs	r0, r3
 800053c:	2310      	movs	r3, #16
 800053e:	001a      	movs	r2, r3
 8000540:	2100      	movs	r1, #0
 8000542:	f003 fbdd 	bl	8003d00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000546:	003b      	movs	r3, r7
 8000548:	0018      	movs	r0, r3
 800054a:	2308      	movs	r3, #8
 800054c:	001a      	movs	r2, r3
 800054e:	2100      	movs	r1, #0
 8000550:	f003 fbd6 	bl	8003d00 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000554:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <MX_TIM2_Init+0xa0>)
 8000556:	2280      	movs	r2, #128	; 0x80
 8000558:	05d2      	lsls	r2, r2, #23
 800055a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 800055c:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <MX_TIM2_Init+0xa0>)
 800055e:	222f      	movs	r2, #47	; 0x2f
 8000560:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000562:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <MX_TIM2_Init+0xa0>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000568:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <MX_TIM2_Init+0xa0>)
 800056a:	4a1a      	ldr	r2, [pc, #104]	; (80005d4 <MX_TIM2_Init+0xa4>)
 800056c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800056e:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <MX_TIM2_Init+0xa0>)
 8000570:	2200      	movs	r2, #0
 8000572:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000574:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <MX_TIM2_Init+0xa0>)
 8000576:	2200      	movs	r2, #0
 8000578:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800057a:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <MX_TIM2_Init+0xa0>)
 800057c:	0018      	movs	r0, r3
 800057e:	f001 ff3d 	bl	80023fc <HAL_TIM_Base_Init>
 8000582:	1e03      	subs	r3, r0, #0
 8000584:	d001      	beq.n	800058a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000586:	f000 fa03 	bl	8000990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800058a:	2108      	movs	r1, #8
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	0152      	lsls	r2, r2, #5
 8000592:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000594:	187a      	adds	r2, r7, r1
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <MX_TIM2_Init+0xa0>)
 8000598:	0011      	movs	r1, r2
 800059a:	0018      	movs	r0, r3
 800059c:	f002 f8de 	bl	800275c <HAL_TIM_ConfigClockSource>
 80005a0:	1e03      	subs	r3, r0, #0
 80005a2:	d001      	beq.n	80005a8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80005a4:	f000 f9f4 	bl	8000990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005a8:	003b      	movs	r3, r7
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ae:	003b      	movs	r3, r7
 80005b0:	2200      	movs	r2, #0
 80005b2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005b4:	003a      	movs	r2, r7
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <MX_TIM2_Init+0xa0>)
 80005b8:	0011      	movs	r1, r2
 80005ba:	0018      	movs	r0, r3
 80005bc:	f002 fadc 	bl	8002b78 <HAL_TIMEx_MasterConfigSynchronization>
 80005c0:	1e03      	subs	r3, r0, #0
 80005c2:	d001      	beq.n	80005c8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80005c4:	f000 f9e4 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005c8:	46c0      	nop			; (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b006      	add	sp, #24
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000080 	.word	0x20000080
 80005d4:	00002710 	.word	0x00002710

080005d8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <MX_TIM17_Init+0x44>)
 80005de:	4a10      	ldr	r2, [pc, #64]	; (8000620 <MX_TIM17_Init+0x48>)
 80005e0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48-1;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <MX_TIM17_Init+0x44>)
 80005e4:	222f      	movs	r2, #47	; 0x2f
 80005e6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <MX_TIM17_Init+0x44>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 0xffff;
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <MX_TIM17_Init+0x44>)
 80005f0:	4a0c      	ldr	r2, [pc, #48]	; (8000624 <MX_TIM17_Init+0x4c>)
 80005f2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <MX_TIM17_Init+0x44>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <MX_TIM17_Init+0x44>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <MX_TIM17_Init+0x44>)
 8000602:	2280      	movs	r2, #128	; 0x80
 8000604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000606:	4b05      	ldr	r3, [pc, #20]	; (800061c <MX_TIM17_Init+0x44>)
 8000608:	0018      	movs	r0, r3
 800060a:	f001 fef7 	bl	80023fc <HAL_TIM_Base_Init>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d001      	beq.n	8000616 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8000612:	f000 f9bd 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	200000c8 	.word	0x200000c8
 8000620:	40014800 	.word	0x40014800
 8000624:	0000ffff 	.word	0x0000ffff

08000628 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800062c:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_USART1_UART_Init+0x58>)
 800062e:	4a15      	ldr	r2, [pc, #84]	; (8000684 <MX_USART1_UART_Init+0x5c>)
 8000630:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <MX_USART1_UART_Init+0x58>)
 8000634:	4a14      	ldr	r2, [pc, #80]	; (8000688 <MX_USART1_UART_Init+0x60>)
 8000636:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_USART1_UART_Init+0x58>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <MX_USART1_UART_Init+0x58>)
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	0192      	lsls	r2, r2, #6
 8000644:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_USART1_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_USART1_UART_Init+0x58>)
 800064e:	220c      	movs	r2, #12
 8000650:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_USART1_UART_Init+0x58>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_USART1_UART_Init+0x58>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_USART1_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_USART1_UART_Init+0x58>)
 8000666:	2200      	movs	r2, #0
 8000668:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800066a:	4b05      	ldr	r3, [pc, #20]	; (8000680 <MX_USART1_UART_Init+0x58>)
 800066c:	0018      	movs	r0, r3
 800066e:	f002 faf1 	bl	8002c54 <HAL_UART_Init>
 8000672:	1e03      	subs	r3, r0, #0
 8000674:	d001      	beq.n	800067a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000676:	f000 f98b 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000110 	.word	0x20000110
 8000684:	40013800 	.word	0x40013800
 8000688:	0003d090 	.word	0x0003d090

0800068c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <MX_USART2_UART_Init+0x5c>)
 8000692:	4a16      	ldr	r2, [pc, #88]	; (80006ec <MX_USART2_UART_Init+0x60>)
 8000694:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 250000;
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_USART2_UART_Init+0x5c>)
 8000698:	4a15      	ldr	r2, [pc, #84]	; (80006f0 <MX_USART2_UART_Init+0x64>)
 800069a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_USART2_UART_Init+0x5c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_USART2_UART_Init+0x5c>)
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	0192      	lsls	r2, r2, #6
 80006a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_USART2_UART_Init+0x5c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <MX_USART2_UART_Init+0x5c>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_USART2_UART_Init+0x5c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <MX_USART2_UART_Init+0x5c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_USART2_UART_Init+0x5c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <MX_USART2_UART_Init+0x5c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80006ce:	4806      	ldr	r0, [pc, #24]	; (80006e8 <MX_USART2_UART_Init+0x5c>)
 80006d0:	2300      	movs	r3, #0
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	f003 f9db 	bl	8003a90 <HAL_RS485Ex_Init>
 80006da:	1e03      	subs	r3, r0, #0
 80006dc:	d001      	beq.n	80006e2 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 80006de:	f000 f957 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000198 	.word	0x20000198
 80006ec:	40004400 	.word	0x40004400
 80006f0:	0003d090 	.word	0x0003d090

080006f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_DMA_Init+0x48>)
 80006fc:	695a      	ldr	r2, [r3, #20]
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_DMA_Init+0x48>)
 8000700:	2101      	movs	r1, #1
 8000702:	430a      	orrs	r2, r1
 8000704:	615a      	str	r2, [r3, #20]
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <MX_DMA_Init+0x48>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	2201      	movs	r2, #1
 800070c:	4013      	ands	r3, r2
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	200a      	movs	r0, #10
 8000718:	f000 fcc2 	bl	80010a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800071c:	200a      	movs	r0, #10
 800071e:	f000 fcd4 	bl	80010ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2100      	movs	r1, #0
 8000726:	200b      	movs	r0, #11
 8000728:	f000 fcba 	bl	80010a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800072c:	200b      	movs	r0, #11
 800072e:	f000 fccc 	bl	80010ca <HAL_NVIC_EnableIRQ>

}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b002      	add	sp, #8
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	40021000 	.word	0x40021000

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b089      	sub	sp, #36	; 0x24
 8000744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	240c      	movs	r4, #12
 8000748:	193b      	adds	r3, r7, r4
 800074a:	0018      	movs	r0, r3
 800074c:	2314      	movs	r3, #20
 800074e:	001a      	movs	r2, r3
 8000750:	2100      	movs	r1, #0
 8000752:	f003 fad5 	bl	8003d00 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	4b2e      	ldr	r3, [pc, #184]	; (8000810 <MX_GPIO_Init+0xd0>)
 8000758:	695a      	ldr	r2, [r3, #20]
 800075a:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <MX_GPIO_Init+0xd0>)
 800075c:	2180      	movs	r1, #128	; 0x80
 800075e:	0309      	lsls	r1, r1, #12
 8000760:	430a      	orrs	r2, r1
 8000762:	615a      	str	r2, [r3, #20]
 8000764:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <MX_GPIO_Init+0xd0>)
 8000766:	695a      	ldr	r2, [r3, #20]
 8000768:	2380      	movs	r3, #128	; 0x80
 800076a:	031b      	lsls	r3, r3, #12
 800076c:	4013      	ands	r3, r2
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	4b27      	ldr	r3, [pc, #156]	; (8000810 <MX_GPIO_Init+0xd0>)
 8000774:	695a      	ldr	r2, [r3, #20]
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <MX_GPIO_Init+0xd0>)
 8000778:	2180      	movs	r1, #128	; 0x80
 800077a:	0289      	lsls	r1, r1, #10
 800077c:	430a      	orrs	r2, r1
 800077e:	615a      	str	r2, [r3, #20]
 8000780:	4b23      	ldr	r3, [pc, #140]	; (8000810 <MX_GPIO_Init+0xd0>)
 8000782:	695a      	ldr	r2, [r3, #20]
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	029b      	lsls	r3, r3, #10
 8000788:	4013      	ands	r3, r2
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Timing_test_Pin|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800078e:	4921      	ldr	r1, [pc, #132]	; (8000814 <MX_GPIO_Init+0xd4>)
 8000790:	4b21      	ldr	r3, [pc, #132]	; (8000818 <MX_GPIO_Init+0xd8>)
 8000792:	2200      	movs	r2, #0
 8000794:	0018      	movs	r0, r3
 8000796:	f001 f8d7 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Timing_test_Pin */
  GPIO_InitStruct.Pin = Timing_test_Pin;
 800079a:	193b      	adds	r3, r7, r4
 800079c:	2201      	movs	r2, #1
 800079e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	2201      	movs	r2, #1
 80007a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	2203      	movs	r2, #3
 80007b0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Timing_test_GPIO_Port, &GPIO_InitStruct);
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	4a18      	ldr	r2, [pc, #96]	; (8000818 <MX_GPIO_Init+0xd8>)
 80007b6:	0019      	movs	r1, r3
 80007b8:	0010      	movs	r0, r2
 80007ba:	f000 fe85 	bl	80014c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007be:	193b      	adds	r3, r7, r4
 80007c0:	2201      	movs	r2, #1
 80007c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007c4:	193b      	adds	r3, r7, r4
 80007c6:	2290      	movs	r2, #144	; 0x90
 80007c8:	0352      	lsls	r2, r2, #13
 80007ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d2:	193a      	adds	r2, r7, r4
 80007d4:	2390      	movs	r3, #144	; 0x90
 80007d6:	05db      	lsls	r3, r3, #23
 80007d8:	0011      	movs	r1, r2
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 fe74 	bl	80014c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80007e0:	0021      	movs	r1, r4
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	22c0      	movs	r2, #192	; 0xc0
 80007e6:	0092      	lsls	r2, r2, #2
 80007e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2201      	movs	r2, #1
 80007ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	4a06      	ldr	r2, [pc, #24]	; (8000818 <MX_GPIO_Init+0xd8>)
 8000800:	0019      	movs	r1, r3
 8000802:	0010      	movs	r0, r2
 8000804:	f000 fe60 	bl	80014c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	b009      	add	sp, #36	; 0x24
 800080e:	bd90      	pop	{r4, r7, pc}
 8000810:	40021000 	.word	0x40021000
 8000814:	00000301 	.word	0x00000301
 8000818:	48000800 	.word	0x48000800

0800081c <DMX_GPIO_Init>:
/*
 * Função que envia o comando DMX seguindo os tempos de MBB, break e MAB exigidos pela norma
 *
 * */

static void DMX_GPIO_Init(void){
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b08d      	sub	sp, #52	; 0x34
 8000820:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	2418      	movs	r4, #24
 8000824:	193b      	adds	r3, r7, r4
 8000826:	0018      	movs	r0, r3
 8000828:	2314      	movs	r3, #20
 800082a:	001a      	movs	r2, r3
 800082c:	2100      	movs	r1, #0
 800082e:	f003 fa67 	bl	8003d00 <memset>
	uint16_t receivedIndex = 0;
 8000832:	232e      	movs	r3, #46	; 0x2e
 8000834:	18fb      	adds	r3, r7, r3
 8000836:	2200      	movs	r2, #0
 8000838:	801a      	strh	r2, [r3, #0]
	uint8_t GUI_receiveFinished = 0;
 800083a:	232d      	movs	r3, #45	; 0x2d
 800083c:	18fb      	adds	r3, r7, r3
 800083e:	2200      	movs	r2, #0
 8000840:	701a      	strb	r2, [r3, #0]
	uint8_t GUI_receive = 1;
 8000842:	232c      	movs	r3, #44	; 0x2c
 8000844:	18fb      	adds	r3, r7, r3
 8000846:	2201      	movs	r2, #1
 8000848:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800084a:	2390      	movs	r3, #144	; 0x90
 800084c:	05db      	lsls	r3, r3, #23
 800084e:	2201      	movs	r2, #1
 8000850:	2104      	movs	r1, #4
 8000852:	0018      	movs	r0, r3
 8000854:	f001 f878 	bl	8001948 <HAL_GPIO_WritePin>
	uint32_t currentTime;

	// Configure GPIO pin as output
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000858:	0021      	movs	r1, r4
 800085a:	187b      	adds	r3, r7, r1
 800085c:	2204      	movs	r2, #4
 800085e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2201      	movs	r2, #1
 8000864:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	187a      	adds	r2, r7, r1
 8000874:	2390      	movs	r3, #144	; 0x90
 8000876:	05db      	lsls	r3, r3, #23
 8000878:	0011      	movs	r1, r2
 800087a:	0018      	movs	r0, r3
 800087c:	f000 fe24 	bl	80014c8 <HAL_GPIO_Init>
	unsigned char viewDMX[20];

}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	b00d      	add	sp, #52	; 0x34
 8000886:	bd90      	pop	{r4, r7, pc}

08000888 <DMX_SendHandler>:

void DMX_SendHandler(void) {
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
    switch (dmx_state) {
 800088c:	4b35      	ldr	r3, [pc, #212]	; (8000964 <DMX_SendHandler+0xdc>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b04      	cmp	r3, #4
 8000892:	d864      	bhi.n	800095e <DMX_SendHandler+0xd6>
 8000894:	009a      	lsls	r2, r3, #2
 8000896:	4b34      	ldr	r3, [pc, #208]	; (8000968 <DMX_SendHandler+0xe0>)
 8000898:	18d3      	adds	r3, r2, r3
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	469f      	mov	pc, r3
        case STATE_IDLE:
            break;

        case STATE_PREPARE:
        	DMX_UART_DeInit;
 800089e:	4b33      	ldr	r3, [pc, #204]	; (800096c <DMX_SendHandler+0xe4>)
 80008a0:	0018      	movs	r0, r3
 80008a2:	f002 fa2b 	bl	8002cfc <HAL_UART_DeInit>
			DMX_GPIO_Init();   // Inicia DMX modo GPIO
 80008a6:	f7ff ffb9 	bl	800081c <DMX_GPIO_Init>
        	//DMX_Set_LOW();
        	DMX_Set_DE_HIGH(); // Habilita o barramento DMX para escrita (Necessidade do RS485)
 80008aa:	2390      	movs	r3, #144	; 0x90
 80008ac:	05db      	lsls	r3, r3, #23
 80008ae:	2201      	movs	r2, #1
 80008b0:	2102      	movs	r1, #2
 80008b2:	0018      	movs	r0, r3
 80008b4:	f001 f848 	bl	8001948 <HAL_GPIO_WritePin>

        	__HAL_TIM_ENABLE_IT(&htim17, TIM_IT_UPDATE);
 80008b8:	4b2d      	ldr	r3, [pc, #180]	; (8000970 <DMX_SendHandler+0xe8>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	68da      	ldr	r2, [r3, #12]
 80008be:	4b2c      	ldr	r3, [pc, #176]	; (8000970 <DMX_SendHandler+0xe8>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2101      	movs	r1, #1
 80008c4:	430a      	orrs	r2, r1
 80008c6:	60da      	str	r2, [r3, #12]
			//TIM17->CNT = 0;
			//TIM17->ARR = 10;
			dmx_state = STATE_MBB;
 80008c8:	4b26      	ldr	r3, [pc, #152]	; (8000964 <DMX_SendHandler+0xdc>)
 80008ca:	2203      	movs	r2, #3
 80008cc:	701a      	strb	r2, [r3, #0]
			break;
 80008ce:	e046      	b.n	800095e <DMX_SendHandler+0xd6>

        case STATE_MBB:
			DMX_Set_HIGH(); // Setar o MBB
 80008d0:	2390      	movs	r3, #144	; 0x90
 80008d2:	05db      	lsls	r3, r3, #23
 80008d4:	2201      	movs	r2, #1
 80008d6:	2104      	movs	r1, #4
 80008d8:	0018      	movs	r0, r3
 80008da:	f001 f835 	bl	8001948 <HAL_GPIO_WritePin>

			__HAL_TIM_ENABLE_IT(&htim17, TIM_IT_UPDATE);
 80008de:	4b24      	ldr	r3, [pc, #144]	; (8000970 <DMX_SendHandler+0xe8>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	68da      	ldr	r2, [r3, #12]
 80008e4:	4b22      	ldr	r3, [pc, #136]	; (8000970 <DMX_SendHandler+0xe8>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2101      	movs	r1, #1
 80008ea:	430a      	orrs	r2, r1
 80008ec:	60da      	str	r2, [r3, #12]
			TIM17->CNT = 0;
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <DMX_SendHandler+0xec>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	625a      	str	r2, [r3, #36]	; 0x24
			TIM17->ARR = TIME_BEFORE_BREAK;
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <DMX_SendHandler+0xec>)
 80008f6:	2205      	movs	r2, #5
 80008f8:	62da      	str	r2, [r3, #44]	; 0x2c
			dmx_state = STATE_BREAK;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <DMX_SendHandler+0xdc>)
 80008fc:	2202      	movs	r2, #2
 80008fe:	701a      	strb	r2, [r3, #0]
			break;
 8000900:	e02d      	b.n	800095e <DMX_SendHandler+0xd6>

        case STATE_BREAK:
            DMX_Set_LOW();  // Setar o Break
 8000902:	2390      	movs	r3, #144	; 0x90
 8000904:	05db      	lsls	r3, r3, #23
 8000906:	2200      	movs	r2, #0
 8000908:	2104      	movs	r1, #4
 800090a:	0018      	movs	r0, r3
 800090c:	f001 f81c 	bl	8001948 <HAL_GPIO_WritePin>

            __HAL_TIM_ENABLE_IT(&htim17, TIM_IT_UPDATE);
 8000910:	4b17      	ldr	r3, [pc, #92]	; (8000970 <DMX_SendHandler+0xe8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	68da      	ldr	r2, [r3, #12]
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <DMX_SendHandler+0xe8>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2101      	movs	r1, #1
 800091c:	430a      	orrs	r2, r1
 800091e:	60da      	str	r2, [r3, #12]
            TIM17->CNT = 0;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <DMX_SendHandler+0xec>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
            TIM17->ARR = TIME_BREAK;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <DMX_SendHandler+0xec>)
 8000928:	22fa      	movs	r2, #250	; 0xfa
 800092a:	62da      	str	r2, [r3, #44]	; 0x2c
            dmx_state = STATE_DATA;
 800092c:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <DMX_SendHandler+0xdc>)
 800092e:	2204      	movs	r2, #4
 8000930:	701a      	strb	r2, [r3, #0]
            break;
 8000932:	e014      	b.n	800095e <DMX_SendHandler+0xd6>


        case STATE_DATA:
        	DMX_GPIO_DeInit(); 	// Desativa o modo GPIO
 8000934:	2390      	movs	r3, #144	; 0x90
 8000936:	05db      	lsls	r3, r3, #23
 8000938:	2104      	movs	r1, #4
 800093a:	0018      	movs	r0, r3
 800093c:	f000 ff34 	bl	80017a8 <HAL_GPIO_DeInit>
			DMX_UART_Init();		// Inicia novamente o modo USART
 8000940:	f7ff fea4 	bl	800068c <MX_USART2_UART_Init>

			HAL_UART_Transmit_DMA(LIGHTING_addr, DMX_buffer_toSend, DMX_buffer_toSend_Size);
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <DMX_SendHandler+0xf0>)
 8000946:	6819      	ldr	r1, [r3, #0]
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <DMX_SendHandler+0xf4>)
 800094a:	881a      	ldrh	r2, [r3, #0]
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <DMX_SendHandler+0xe4>)
 800094e:	0018      	movs	r0, r3
 8000950:	f002 fa12 	bl	8002d78 <HAL_UART_Transmit_DMA>
			dmx_state = STATE_IDLE;
 8000954:	4b03      	ldr	r3, [pc, #12]	; (8000964 <DMX_SendHandler+0xdc>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
//			// libera o buffer de recebimento de dados
//			DMX_buffer_toSend_Size = 0;
//			free(DMX_buffer_toSend);
//			DMX_buffer_toSend = NULL;
			// Final da transmissão é feita no callback de transmissão DMA
            break;
 800095a:	e000      	b.n	800095e <DMX_SendHandler+0xd6>
            break;
 800095c:	46c0      	nop			; (mov r8, r8)


    }
}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200002ec 	.word	0x200002ec
 8000968:	08003e4c 	.word	0x08003e4c
 800096c:	20000198 	.word	0x20000198
 8000970:	200000c8 	.word	0x200000c8
 8000974:	40014800 	.word	0x40014800
 8000978:	20000300 	.word	0x20000300
 800097c:	20000304 	.word	0x20000304

08000980 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
//		free(currentFrame.data);
//		currentFrame.data = NULL;
//		HAL_UART_Receive_DMA(&huart1, uartBuffer, HEADER_BUFFER_SIZE);
//		HAL_NVIC_DisableIRQ(TIM2_IRQn);
//    }
}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b002      	add	sp, #8
 800098e:	bd80      	pop	{r7, pc}

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	e7fe      	b.n	8000998 <Error_Handler+0x8>
	...

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <HAL_MspInit+0x44>)
 80009a4:	699a      	ldr	r2, [r3, #24]
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <HAL_MspInit+0x44>)
 80009a8:	2101      	movs	r1, #1
 80009aa:	430a      	orrs	r2, r1
 80009ac:	619a      	str	r2, [r3, #24]
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <HAL_MspInit+0x44>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	2201      	movs	r2, #1
 80009b4:	4013      	ands	r3, r2
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <HAL_MspInit+0x44>)
 80009bc:	69da      	ldr	r2, [r3, #28]
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <HAL_MspInit+0x44>)
 80009c0:	2180      	movs	r1, #128	; 0x80
 80009c2:	0549      	lsls	r1, r1, #21
 80009c4:	430a      	orrs	r2, r1
 80009c6:	61da      	str	r2, [r3, #28]
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <HAL_MspInit+0x44>)
 80009ca:	69da      	ldr	r2, [r3, #28]
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	055b      	lsls	r3, r3, #21
 80009d0:	4013      	ands	r3, r2
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b002      	add	sp, #8
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	40021000 	.word	0x40021000

080009e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	05db      	lsls	r3, r3, #23
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d114      	bne.n	8000a22 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009f8:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <HAL_TIM_Base_MspInit+0x7c>)
 80009fa:	69da      	ldr	r2, [r3, #28]
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <HAL_TIM_Base_MspInit+0x7c>)
 80009fe:	2101      	movs	r1, #1
 8000a00:	430a      	orrs	r2, r1
 8000a02:	61da      	str	r2, [r3, #28]
 8000a04:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <HAL_TIM_Base_MspInit+0x7c>)
 8000a06:	69db      	ldr	r3, [r3, #28]
 8000a08:	2201      	movs	r2, #1
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2100      	movs	r1, #0
 8000a14:	200f      	movs	r0, #15
 8000a16:	f000 fb43 	bl	80010a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a1a:	200f      	movs	r0, #15
 8000a1c:	f000 fb55 	bl	80010ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000a20:	e01a      	b.n	8000a58 <HAL_TIM_Base_MspInit+0x74>
  else if(htim_base->Instance==TIM17)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a0f      	ldr	r2, [pc, #60]	; (8000a64 <HAL_TIM_Base_MspInit+0x80>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d115      	bne.n	8000a58 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <HAL_TIM_Base_MspInit+0x7c>)
 8000a2e:	699a      	ldr	r2, [r3, #24]
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <HAL_TIM_Base_MspInit+0x7c>)
 8000a32:	2180      	movs	r1, #128	; 0x80
 8000a34:	02c9      	lsls	r1, r1, #11
 8000a36:	430a      	orrs	r2, r1
 8000a38:	619a      	str	r2, [r3, #24]
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <HAL_TIM_Base_MspInit+0x7c>)
 8000a3c:	699a      	ldr	r2, [r3, #24]
 8000a3e:	2380      	movs	r3, #128	; 0x80
 8000a40:	02db      	lsls	r3, r3, #11
 8000a42:	4013      	ands	r3, r2
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2016      	movs	r0, #22
 8000a4e:	f000 fb27 	bl	80010a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000a52:	2016      	movs	r0, #22
 8000a54:	f000 fb39 	bl	80010ca <HAL_NVIC_EnableIRQ>
}
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	b004      	add	sp, #16
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40014800 	.word	0x40014800

08000a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b08d      	sub	sp, #52	; 0x34
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	241c      	movs	r4, #28
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	0018      	movs	r0, r3
 8000a76:	2314      	movs	r3, #20
 8000a78:	001a      	movs	r2, r3
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	f003 f940 	bl	8003d00 <memset>
  if(huart->Instance==USART1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a73      	ldr	r2, [pc, #460]	; (8000c54 <HAL_UART_MspInit+0x1ec>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d15a      	bne.n	8000b40 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a8a:	4b73      	ldr	r3, [pc, #460]	; (8000c58 <HAL_UART_MspInit+0x1f0>)
 8000a8c:	699a      	ldr	r2, [r3, #24]
 8000a8e:	4b72      	ldr	r3, [pc, #456]	; (8000c58 <HAL_UART_MspInit+0x1f0>)
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	01c9      	lsls	r1, r1, #7
 8000a94:	430a      	orrs	r2, r1
 8000a96:	619a      	str	r2, [r3, #24]
 8000a98:	4b6f      	ldr	r3, [pc, #444]	; (8000c58 <HAL_UART_MspInit+0x1f0>)
 8000a9a:	699a      	ldr	r2, [r3, #24]
 8000a9c:	2380      	movs	r3, #128	; 0x80
 8000a9e:	01db      	lsls	r3, r3, #7
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	61bb      	str	r3, [r7, #24]
 8000aa4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b6c      	ldr	r3, [pc, #432]	; (8000c58 <HAL_UART_MspInit+0x1f0>)
 8000aa8:	695a      	ldr	r2, [r3, #20]
 8000aaa:	4b6b      	ldr	r3, [pc, #428]	; (8000c58 <HAL_UART_MspInit+0x1f0>)
 8000aac:	2180      	movs	r1, #128	; 0x80
 8000aae:	0289      	lsls	r1, r1, #10
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	615a      	str	r2, [r3, #20]
 8000ab4:	4b68      	ldr	r3, [pc, #416]	; (8000c58 <HAL_UART_MspInit+0x1f0>)
 8000ab6:	695a      	ldr	r2, [r3, #20]
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	029b      	lsls	r3, r3, #10
 8000abc:	4013      	ands	r3, r2
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USB_TX_Pin|USB_RX_Pin;
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	22c0      	movs	r2, #192	; 0xc0
 8000ac6:	00d2      	lsls	r2, r2, #3
 8000ac8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	0021      	movs	r1, r4
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2202      	movs	r2, #2
 8000ad0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2203      	movs	r2, #3
 8000adc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	187a      	adds	r2, r7, r1
 8000ae6:	2390      	movs	r3, #144	; 0x90
 8000ae8:	05db      	lsls	r3, r3, #23
 8000aea:	0011      	movs	r1, r2
 8000aec:	0018      	movs	r0, r3
 8000aee:	f000 fceb 	bl	80014c8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000af2:	4b5a      	ldr	r3, [pc, #360]	; (8000c5c <HAL_UART_MspInit+0x1f4>)
 8000af4:	4a5a      	ldr	r2, [pc, #360]	; (8000c60 <HAL_UART_MspInit+0x1f8>)
 8000af6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000af8:	4b58      	ldr	r3, [pc, #352]	; (8000c5c <HAL_UART_MspInit+0x1f4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000afe:	4b57      	ldr	r3, [pc, #348]	; (8000c5c <HAL_UART_MspInit+0x1f4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b04:	4b55      	ldr	r3, [pc, #340]	; (8000c5c <HAL_UART_MspInit+0x1f4>)
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b0a:	4b54      	ldr	r3, [pc, #336]	; (8000c5c <HAL_UART_MspInit+0x1f4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b10:	4b52      	ldr	r3, [pc, #328]	; (8000c5c <HAL_UART_MspInit+0x1f4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000b16:	4b51      	ldr	r3, [pc, #324]	; (8000c5c <HAL_UART_MspInit+0x1f4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b1c:	4b4f      	ldr	r3, [pc, #316]	; (8000c5c <HAL_UART_MspInit+0x1f4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b22:	4b4e      	ldr	r3, [pc, #312]	; (8000c5c <HAL_UART_MspInit+0x1f4>)
 8000b24:	0018      	movs	r0, r3
 8000b26:	f000 faed 	bl	8001104 <HAL_DMA_Init>
 8000b2a:	1e03      	subs	r3, r0, #0
 8000b2c:	d001      	beq.n	8000b32 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000b2e:	f7ff ff2f 	bl	8000990 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a49      	ldr	r2, [pc, #292]	; (8000c5c <HAL_UART_MspInit+0x1f4>)
 8000b36:	675a      	str	r2, [r3, #116]	; 0x74
 8000b38:	4b48      	ldr	r3, [pc, #288]	; (8000c5c <HAL_UART_MspInit+0x1f4>)
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b3e:	e084      	b.n	8000c4a <HAL_UART_MspInit+0x1e2>
  else if(huart->Instance==USART2)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a47      	ldr	r2, [pc, #284]	; (8000c64 <HAL_UART_MspInit+0x1fc>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d000      	beq.n	8000b4c <HAL_UART_MspInit+0xe4>
 8000b4a:	e07e      	b.n	8000c4a <HAL_UART_MspInit+0x1e2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b4c:	4b42      	ldr	r3, [pc, #264]	; (8000c58 <HAL_UART_MspInit+0x1f0>)
 8000b4e:	69da      	ldr	r2, [r3, #28]
 8000b50:	4b41      	ldr	r3, [pc, #260]	; (8000c58 <HAL_UART_MspInit+0x1f0>)
 8000b52:	2180      	movs	r1, #128	; 0x80
 8000b54:	0289      	lsls	r1, r1, #10
 8000b56:	430a      	orrs	r2, r1
 8000b58:	61da      	str	r2, [r3, #28]
 8000b5a:	4b3f      	ldr	r3, [pc, #252]	; (8000c58 <HAL_UART_MspInit+0x1f0>)
 8000b5c:	69da      	ldr	r2, [r3, #28]
 8000b5e:	2380      	movs	r3, #128	; 0x80
 8000b60:	029b      	lsls	r3, r3, #10
 8000b62:	4013      	ands	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	4b3b      	ldr	r3, [pc, #236]	; (8000c58 <HAL_UART_MspInit+0x1f0>)
 8000b6a:	695a      	ldr	r2, [r3, #20]
 8000b6c:	4b3a      	ldr	r3, [pc, #232]	; (8000c58 <HAL_UART_MspInit+0x1f0>)
 8000b6e:	2180      	movs	r1, #128	; 0x80
 8000b70:	0289      	lsls	r1, r1, #10
 8000b72:	430a      	orrs	r2, r1
 8000b74:	615a      	str	r2, [r3, #20]
 8000b76:	4b38      	ldr	r3, [pc, #224]	; (8000c58 <HAL_UART_MspInit+0x1f0>)
 8000b78:	695a      	ldr	r2, [r3, #20]
 8000b7a:	2380      	movs	r3, #128	; 0x80
 8000b7c:	029b      	lsls	r3, r3, #10
 8000b7e:	4013      	ands	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DMX_DE_Pin|DMX_TX_Pin|DMX_RX_Pin;
 8000b84:	211c      	movs	r1, #28
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	220e      	movs	r2, #14
 8000b8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2202      	movs	r2, #2
 8000b90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	187a      	adds	r2, r7, r1
 8000ba6:	2390      	movs	r3, #144	; 0x90
 8000ba8:	05db      	lsls	r3, r3, #23
 8000baa:	0011      	movs	r1, r2
 8000bac:	0018      	movs	r0, r3
 8000bae:	f000 fc8b 	bl	80014c8 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8000bb2:	4b2d      	ldr	r3, [pc, #180]	; (8000c68 <HAL_UART_MspInit+0x200>)
 8000bb4:	4a2d      	ldr	r2, [pc, #180]	; (8000c6c <HAL_UART_MspInit+0x204>)
 8000bb6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bb8:	4b2b      	ldr	r3, [pc, #172]	; (8000c68 <HAL_UART_MspInit+0x200>)
 8000bba:	2210      	movs	r2, #16
 8000bbc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bbe:	4b2a      	ldr	r3, [pc, #168]	; (8000c68 <HAL_UART_MspInit+0x200>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bc4:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <HAL_UART_MspInit+0x200>)
 8000bc6:	2280      	movs	r2, #128	; 0x80
 8000bc8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bca:	4b27      	ldr	r3, [pc, #156]	; (8000c68 <HAL_UART_MspInit+0x200>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bd0:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <HAL_UART_MspInit+0x200>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000bd6:	4b24      	ldr	r3, [pc, #144]	; (8000c68 <HAL_UART_MspInit+0x200>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bdc:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <HAL_UART_MspInit+0x200>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000be2:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <HAL_UART_MspInit+0x200>)
 8000be4:	0018      	movs	r0, r3
 8000be6:	f000 fa8d 	bl	8001104 <HAL_DMA_Init>
 8000bea:	1e03      	subs	r3, r0, #0
 8000bec:	d001      	beq.n	8000bf2 <HAL_UART_MspInit+0x18a>
      Error_Handler();
 8000bee:	f7ff fecf 	bl	8000990 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a1c      	ldr	r2, [pc, #112]	; (8000c68 <HAL_UART_MspInit+0x200>)
 8000bf6:	671a      	str	r2, [r3, #112]	; 0x70
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <HAL_UART_MspInit+0x200>)
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <HAL_UART_MspInit+0x208>)
 8000c00:	4a1c      	ldr	r2, [pc, #112]	; (8000c74 <HAL_UART_MspInit+0x20c>)
 8000c02:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c04:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <HAL_UART_MspInit+0x208>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c0a:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <HAL_UART_MspInit+0x208>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <HAL_UART_MspInit+0x208>)
 8000c12:	2280      	movs	r2, #128	; 0x80
 8000c14:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <HAL_UART_MspInit+0x208>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <HAL_UART_MspInit+0x208>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <HAL_UART_MspInit+0x208>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <HAL_UART_MspInit+0x208>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <HAL_UART_MspInit+0x208>)
 8000c30:	0018      	movs	r0, r3
 8000c32:	f000 fa67 	bl	8001104 <HAL_DMA_Init>
 8000c36:	1e03      	subs	r3, r0, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 8000c3a:	f7ff fea9 	bl	8000990 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <HAL_UART_MspInit+0x208>)
 8000c42:	675a      	str	r2, [r3, #116]	; 0x74
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <HAL_UART_MspInit+0x208>)
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b00d      	add	sp, #52	; 0x34
 8000c50:	bd90      	pop	{r4, r7, pc}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	40013800 	.word	0x40013800
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	20000220 	.word	0x20000220
 8000c60:	40020030 	.word	0x40020030
 8000c64:	40004400 	.word	0x40004400
 8000c68:	20000264 	.word	0x20000264
 8000c6c:	40020044 	.word	0x40020044
 8000c70:	200002a8 	.word	0x200002a8
 8000c74:	40020058 	.word	0x40020058

08000c78 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a1a      	ldr	r2, [pc, #104]	; (8000cf0 <HAL_UART_MspDeInit+0x78>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d113      	bne.n	8000cb2 <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <HAL_UART_MspDeInit+0x7c>)
 8000c8c:	699a      	ldr	r2, [r3, #24]
 8000c8e:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <HAL_UART_MspDeInit+0x7c>)
 8000c90:	4919      	ldr	r1, [pc, #100]	; (8000cf8 <HAL_UART_MspDeInit+0x80>)
 8000c92:	400a      	ands	r2, r1
 8000c94:	619a      	str	r2, [r3, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, USB_TX_Pin|USB_RX_Pin);
 8000c96:	23c0      	movs	r3, #192	; 0xc0
 8000c98:	00da      	lsls	r2, r3, #3
 8000c9a:	2390      	movs	r3, #144	; 0x90
 8000c9c:	05db      	lsls	r3, r3, #23
 8000c9e:	0011      	movs	r1, r2
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f000 fd81 	bl	80017a8 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000caa:	0018      	movs	r0, r3
 8000cac:	f000 fa72 	bl	8001194 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8000cb0:	e01a      	b.n	8000ce8 <HAL_UART_MspDeInit+0x70>
  else if(huart->Instance==USART2)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a11      	ldr	r2, [pc, #68]	; (8000cfc <HAL_UART_MspDeInit+0x84>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d115      	bne.n	8000ce8 <HAL_UART_MspDeInit+0x70>
    __HAL_RCC_USART2_CLK_DISABLE();
 8000cbc:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <HAL_UART_MspDeInit+0x7c>)
 8000cbe:	69da      	ldr	r2, [r3, #28]
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <HAL_UART_MspDeInit+0x7c>)
 8000cc2:	490f      	ldr	r1, [pc, #60]	; (8000d00 <HAL_UART_MspDeInit+0x88>)
 8000cc4:	400a      	ands	r2, r1
 8000cc6:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, DMX_DE_Pin|DMX_TX_Pin|DMX_RX_Pin);
 8000cc8:	2390      	movs	r3, #144	; 0x90
 8000cca:	05db      	lsls	r3, r3, #23
 8000ccc:	210e      	movs	r1, #14
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f000 fd6a 	bl	80017a8 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f000 fa5b 	bl	8001194 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f000 fa56 	bl	8001194 <HAL_DMA_DeInit>
}
 8000ce8:	46c0      	nop			; (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b002      	add	sp, #8
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40013800 	.word	0x40013800
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	ffffbfff 	.word	0xffffbfff
 8000cfc:	40004400 	.word	0x40004400
 8000d00:	fffdffff 	.word	0xfffdffff

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <NMI_Handler+0x4>

08000d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <HardFault_Handler+0x4>

08000d10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d28:	f000 f8f2 	bl	8000f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f000 fad9 	bl	80012f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	20000220 	.word	0x20000220

08000d4c <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <DMA1_Channel4_5_IRQHandler+0x1c>)
 8000d52:	0018      	movs	r0, r3
 8000d54:	f000 facd 	bl	80012f2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <DMA1_Channel4_5_IRQHandler+0x20>)
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f000 fac9 	bl	80012f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	20000264 	.word	0x20000264
 8000d6c:	200002a8 	.word	0x200002a8

08000d70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <TIM2_IRQHandler+0x14>)
 8000d76:	0018      	movs	r0, r3
 8000d78:	f001 fbda 	bl	8002530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d7c:	46c0      	nop			; (mov r8, r8)
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	20000080 	.word	0x20000080

08000d88 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
  // Desabilita temporariamente as interrupções e chama a maquina de estados
  // para enviar a proxima parte do frame DMX
  __HAL_TIM_DISABLE_IT(&htim17, TIM_IT_UPDATE);
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <TIM17_IRQHandler+0x28>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	68da      	ldr	r2, [r3, #12]
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <TIM17_IRQHandler+0x28>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2101      	movs	r1, #1
 8000d98:	438a      	bics	r2, r1
 8000d9a:	60da      	str	r2, [r3, #12]
  DMX_SendHandler();
 8000d9c:	f7ff fd74 	bl	8000888 <DMX_SendHandler>

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <TIM17_IRQHandler+0x28>)
 8000da2:	0018      	movs	r0, r3
 8000da4:	f001 fbc4 	bl	8002530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000da8:	46c0      	nop			; (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	200000c8 	.word	0x200000c8

08000db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dbc:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <_sbrk+0x5c>)
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <_sbrk+0x60>)
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d102      	bne.n	8000dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <_sbrk+0x64>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	; (8000e1c <_sbrk+0x68>)
 8000dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	18d3      	adds	r3, r2, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d207      	bcs.n	8000df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de4:	f002 ffa6 	bl	8003d34 <__errno>
 8000de8:	0003      	movs	r3, r0
 8000dea:	220c      	movs	r2, #12
 8000dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dee:	2301      	movs	r3, #1
 8000df0:	425b      	negs	r3, r3
 8000df2:	e009      	b.n	8000e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfa:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	18d2      	adds	r2, r2, r3
 8000e02:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <_sbrk+0x64>)
 8000e04:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e06:	68fb      	ldr	r3, [r7, #12]
}
 8000e08:	0018      	movs	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b006      	add	sp, #24
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20002000 	.word	0x20002000
 8000e14:	00000400 	.word	0x00000400
 8000e18:	20000308 	.word	0x20000308
 8000e1c:	20000458 	.word	0x20000458

08000e20 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e2c:	480d      	ldr	r0, [pc, #52]	; (8000e64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e2e:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8000e30:	f7ff fff6 	bl	8000e20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e34:	480c      	ldr	r0, [pc, #48]	; (8000e68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e36:	490d      	ldr	r1, [pc, #52]	; (8000e6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e38:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <LoopForever+0xe>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e4c:	4c0a      	ldr	r4, [pc, #40]	; (8000e78 <LoopForever+0x16>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e5a:	f002 ff71 	bl	8003d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e5e:	f7ff fa87 	bl	8000370 <main>

08000e62 <LoopForever>:

LoopForever:
    b LoopForever
 8000e62:	e7fe      	b.n	8000e62 <LoopForever>
  ldr   r0, =_estack
 8000e64:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000e70:	08003ea0 	.word	0x08003ea0
  ldr r2, =_sbss
 8000e74:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000e78:	20000458 	.word	0x20000458

08000e7c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC1_COMP_IRQHandler>
	...

08000e80 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e84:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <HAL_Init+0x24>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_Init+0x24>)
 8000e8a:	2110      	movs	r1, #16
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e90:	2000      	movs	r0, #0
 8000e92:	f000 f809 	bl	8000ea8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e96:	f7ff fd81 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	40022000 	.word	0x40022000

08000ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <HAL_InitTick+0x5c>)
 8000eb2:	681c      	ldr	r4, [r3, #0]
 8000eb4:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <HAL_InitTick+0x60>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	0019      	movs	r1, r3
 8000eba:	23fa      	movs	r3, #250	; 0xfa
 8000ebc:	0098      	lsls	r0, r3, #2
 8000ebe:	f7ff f923 	bl	8000108 <__udivsi3>
 8000ec2:	0003      	movs	r3, r0
 8000ec4:	0019      	movs	r1, r3
 8000ec6:	0020      	movs	r0, r4
 8000ec8:	f7ff f91e 	bl	8000108 <__udivsi3>
 8000ecc:	0003      	movs	r3, r0
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f000 f90b 	bl	80010ea <HAL_SYSTICK_Config>
 8000ed4:	1e03      	subs	r3, r0, #0
 8000ed6:	d001      	beq.n	8000edc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e00f      	b.n	8000efc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d80b      	bhi.n	8000efa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	425b      	negs	r3, r3
 8000ee8:	2200      	movs	r2, #0
 8000eea:	0018      	movs	r0, r3
 8000eec:	f000 f8d8 	bl	80010a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_InitTick+0x64>)
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e000      	b.n	8000efc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	0018      	movs	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b003      	add	sp, #12
 8000f02:	bd90      	pop	{r4, r7, pc}
 8000f04:	20000008 	.word	0x20000008
 8000f08:	20000010 	.word	0x20000010
 8000f0c:	2000000c 	.word	0x2000000c

08000f10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_IncTick+0x1c>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	001a      	movs	r2, r3
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <HAL_IncTick+0x20>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	18d2      	adds	r2, r2, r3
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <HAL_IncTick+0x20>)
 8000f22:	601a      	str	r2, [r3, #0]
}
 8000f24:	46c0      	nop			; (mov r8, r8)
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	20000010 	.word	0x20000010
 8000f30:	2000030c 	.word	0x2000030c

08000f34 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  return uwTick;
 8000f38:	4b02      	ldr	r3, [pc, #8]	; (8000f44 <HAL_GetTick+0x10>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	2000030c 	.word	0x2000030c

08000f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	0002      	movs	r2, r0
 8000f50:	1dfb      	adds	r3, r7, #7
 8000f52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f54:	1dfb      	adds	r3, r7, #7
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b7f      	cmp	r3, #127	; 0x7f
 8000f5a:	d809      	bhi.n	8000f70 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5c:	1dfb      	adds	r3, r7, #7
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	001a      	movs	r2, r3
 8000f62:	231f      	movs	r3, #31
 8000f64:	401a      	ands	r2, r3
 8000f66:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <__NVIC_EnableIRQ+0x30>)
 8000f68:	2101      	movs	r1, #1
 8000f6a:	4091      	lsls	r1, r2
 8000f6c:	000a      	movs	r2, r1
 8000f6e:	601a      	str	r2, [r3, #0]
  }
}
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b002      	add	sp, #8
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	e000e100 	.word	0xe000e100

08000f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	0002      	movs	r2, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	1dfb      	adds	r3, r7, #7
 8000f88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f8a:	1dfb      	adds	r3, r7, #7
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b7f      	cmp	r3, #127	; 0x7f
 8000f90:	d828      	bhi.n	8000fe4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f92:	4a2f      	ldr	r2, [pc, #188]	; (8001050 <__NVIC_SetPriority+0xd4>)
 8000f94:	1dfb      	adds	r3, r7, #7
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	b25b      	sxtb	r3, r3
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	33c0      	adds	r3, #192	; 0xc0
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	589b      	ldr	r3, [r3, r2]
 8000fa2:	1dfa      	adds	r2, r7, #7
 8000fa4:	7812      	ldrb	r2, [r2, #0]
 8000fa6:	0011      	movs	r1, r2
 8000fa8:	2203      	movs	r2, #3
 8000faa:	400a      	ands	r2, r1
 8000fac:	00d2      	lsls	r2, r2, #3
 8000fae:	21ff      	movs	r1, #255	; 0xff
 8000fb0:	4091      	lsls	r1, r2
 8000fb2:	000a      	movs	r2, r1
 8000fb4:	43d2      	mvns	r2, r2
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	019b      	lsls	r3, r3, #6
 8000fbe:	22ff      	movs	r2, #255	; 0xff
 8000fc0:	401a      	ands	r2, r3
 8000fc2:	1dfb      	adds	r3, r7, #7
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	2303      	movs	r3, #3
 8000fca:	4003      	ands	r3, r0
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fd0:	481f      	ldr	r0, [pc, #124]	; (8001050 <__NVIC_SetPriority+0xd4>)
 8000fd2:	1dfb      	adds	r3, r7, #7
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b25b      	sxtb	r3, r3
 8000fd8:	089b      	lsrs	r3, r3, #2
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	33c0      	adds	r3, #192	; 0xc0
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fe2:	e031      	b.n	8001048 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fe4:	4a1b      	ldr	r2, [pc, #108]	; (8001054 <__NVIC_SetPriority+0xd8>)
 8000fe6:	1dfb      	adds	r3, r7, #7
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	0019      	movs	r1, r3
 8000fec:	230f      	movs	r3, #15
 8000fee:	400b      	ands	r3, r1
 8000ff0:	3b08      	subs	r3, #8
 8000ff2:	089b      	lsrs	r3, r3, #2
 8000ff4:	3306      	adds	r3, #6
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	18d3      	adds	r3, r2, r3
 8000ffa:	3304      	adds	r3, #4
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	1dfa      	adds	r2, r7, #7
 8001000:	7812      	ldrb	r2, [r2, #0]
 8001002:	0011      	movs	r1, r2
 8001004:	2203      	movs	r2, #3
 8001006:	400a      	ands	r2, r1
 8001008:	00d2      	lsls	r2, r2, #3
 800100a:	21ff      	movs	r1, #255	; 0xff
 800100c:	4091      	lsls	r1, r2
 800100e:	000a      	movs	r2, r1
 8001010:	43d2      	mvns	r2, r2
 8001012:	401a      	ands	r2, r3
 8001014:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	019b      	lsls	r3, r3, #6
 800101a:	22ff      	movs	r2, #255	; 0xff
 800101c:	401a      	ands	r2, r3
 800101e:	1dfb      	adds	r3, r7, #7
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	0018      	movs	r0, r3
 8001024:	2303      	movs	r3, #3
 8001026:	4003      	ands	r3, r0
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800102c:	4809      	ldr	r0, [pc, #36]	; (8001054 <__NVIC_SetPriority+0xd8>)
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	001c      	movs	r4, r3
 8001034:	230f      	movs	r3, #15
 8001036:	4023      	ands	r3, r4
 8001038:	3b08      	subs	r3, #8
 800103a:	089b      	lsrs	r3, r3, #2
 800103c:	430a      	orrs	r2, r1
 800103e:	3306      	adds	r3, #6
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	18c3      	adds	r3, r0, r3
 8001044:	3304      	adds	r3, #4
 8001046:	601a      	str	r2, [r3, #0]
}
 8001048:	46c0      	nop			; (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	b003      	add	sp, #12
 800104e:	bd90      	pop	{r4, r7, pc}
 8001050:	e000e100 	.word	0xe000e100
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	1e5a      	subs	r2, r3, #1
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	045b      	lsls	r3, r3, #17
 8001068:	429a      	cmp	r2, r3
 800106a:	d301      	bcc.n	8001070 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106c:	2301      	movs	r3, #1
 800106e:	e010      	b.n	8001092 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <SysTick_Config+0x44>)
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	3a01      	subs	r2, #1
 8001076:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001078:	2301      	movs	r3, #1
 800107a:	425b      	negs	r3, r3
 800107c:	2103      	movs	r1, #3
 800107e:	0018      	movs	r0, r3
 8001080:	f7ff ff7c 	bl	8000f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <SysTick_Config+0x44>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <SysTick_Config+0x44>)
 800108c:	2207      	movs	r2, #7
 800108e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001090:	2300      	movs	r3, #0
}
 8001092:	0018      	movs	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	b002      	add	sp, #8
 8001098:	bd80      	pop	{r7, pc}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	e000e010 	.word	0xe000e010

080010a0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
 80010aa:	210f      	movs	r1, #15
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	1c02      	adds	r2, r0, #0
 80010b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	187b      	adds	r3, r7, r1
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	0011      	movs	r1, r2
 80010bc:	0018      	movs	r0, r3
 80010be:	f7ff ff5d 	bl	8000f7c <__NVIC_SetPriority>
}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	46bd      	mov	sp, r7
 80010c6:	b004      	add	sp, #16
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	0002      	movs	r2, r0
 80010d2:	1dfb      	adds	r3, r7, #7
 80010d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	0018      	movs	r0, r3
 80010de:	f7ff ff33 	bl	8000f48 <__NVIC_EnableIRQ>
}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b002      	add	sp, #8
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	0018      	movs	r0, r3
 80010f6:	f7ff ffaf 	bl	8001058 <SysTick_Config>
 80010fa:	0003      	movs	r3, r0
}
 80010fc:	0018      	movs	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	b002      	add	sp, #8
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e036      	b.n	8001188 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2221      	movs	r2, #33	; 0x21
 800111e:	2102      	movs	r1, #2
 8001120:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4a18      	ldr	r2, [pc, #96]	; (8001190 <HAL_DMA_Init+0x8c>)
 800112e:	4013      	ands	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800113a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001146:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001152:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	69db      	ldr	r3, [r3, #28]
 8001158:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	4313      	orrs	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	0018      	movs	r0, r3
 800116c:	f000 f990 	bl	8001490 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2221      	movs	r2, #33	; 0x21
 800117a:	2101      	movs	r1, #1
 800117c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2220      	movs	r2, #32
 8001182:	2100      	movs	r1, #0
 8001184:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001186:	2300      	movs	r3, #0
}
 8001188:	0018      	movs	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	b004      	add	sp, #16
 800118e:	bd80      	pop	{r7, pc}
 8001190:	ffffc00f 	.word	0xffffc00f

08001194 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e03b      	b.n	800121e <HAL_DMA_DeInit+0x8a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2101      	movs	r1, #1
 80011b2:	438a      	bics	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2200      	movs	r2, #0
 80011c4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]

  /* Get DMA Base Address */
  DMA_CalcBaseAndBitshift(hdma);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	0018      	movs	r0, r3
 80011da:	f000 f959 	bl	8001490 <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e6:	2101      	movs	r1, #1
 80011e8:	4091      	lsls	r1, r2
 80011ea:	000a      	movs	r2, r1
 80011ec:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2221      	movs	r2, #33	; 0x21
 8001210:	2100      	movs	r1, #0
 8001212:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2220      	movs	r2, #32
 8001218:	2100      	movs	r1, #0
 800121a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	0018      	movs	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	b002      	add	sp, #8
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
 8001232:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001234:	2317      	movs	r3, #23
 8001236:	18fb      	adds	r3, r7, r3
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2220      	movs	r2, #32
 8001240:	5c9b      	ldrb	r3, [r3, r2]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d101      	bne.n	800124a <HAL_DMA_Start_IT+0x24>
 8001246:	2302      	movs	r3, #2
 8001248:	e04f      	b.n	80012ea <HAL_DMA_Start_IT+0xc4>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2220      	movs	r2, #32
 800124e:	2101      	movs	r1, #1
 8001250:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2221      	movs	r2, #33	; 0x21
 8001256:	5c9b      	ldrb	r3, [r3, r2]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b01      	cmp	r3, #1
 800125c:	d13a      	bne.n	80012d4 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2221      	movs	r2, #33	; 0x21
 8001262:	2102      	movs	r1, #2
 8001264:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2200      	movs	r2, #0
 800126a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2101      	movs	r1, #1
 8001278:	438a      	bics	r2, r1
 800127a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	68b9      	ldr	r1, [r7, #8]
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	f000 f8d7 	bl	8001436 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128c:	2b00      	cmp	r3, #0
 800128e:	d008      	beq.n	80012a2 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	210e      	movs	r1, #14
 800129c:	430a      	orrs	r2, r1
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	e00f      	b.n	80012c2 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	210a      	movs	r1, #10
 80012ae:	430a      	orrs	r2, r1
 80012b0:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2104      	movs	r1, #4
 80012be:	438a      	bics	r2, r1
 80012c0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2101      	movs	r1, #1
 80012ce:	430a      	orrs	r2, r1
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	e007      	b.n	80012e4 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2220      	movs	r2, #32
 80012d8:	2100      	movs	r1, #0
 80012da:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80012dc:	2317      	movs	r3, #23
 80012de:	18fb      	adds	r3, r7, r3
 80012e0:	2202      	movs	r2, #2
 80012e2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80012e4:	2317      	movs	r3, #23
 80012e6:	18fb      	adds	r3, r7, r3
 80012e8:	781b      	ldrb	r3, [r3, #0]
}
 80012ea:	0018      	movs	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b006      	add	sp, #24
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b084      	sub	sp, #16
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	2204      	movs	r2, #4
 8001310:	409a      	lsls	r2, r3
 8001312:	0013      	movs	r3, r2
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	4013      	ands	r3, r2
 8001318:	d024      	beq.n	8001364 <HAL_DMA_IRQHandler+0x72>
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	2204      	movs	r2, #4
 800131e:	4013      	ands	r3, r2
 8001320:	d020      	beq.n	8001364 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2220      	movs	r2, #32
 800132a:	4013      	ands	r3, r2
 800132c:	d107      	bne.n	800133e <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2104      	movs	r1, #4
 800133a:	438a      	bics	r2, r1
 800133c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001346:	2104      	movs	r1, #4
 8001348:	4091      	lsls	r1, r2
 800134a:	000a      	movs	r2, r1
 800134c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001352:	2b00      	cmp	r3, #0
 8001354:	d100      	bne.n	8001358 <HAL_DMA_IRQHandler+0x66>
 8001356:	e06a      	b.n	800142e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	0010      	movs	r0, r2
 8001360:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001362:	e064      	b.n	800142e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	2202      	movs	r2, #2
 800136a:	409a      	lsls	r2, r3
 800136c:	0013      	movs	r3, r2
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	4013      	ands	r3, r2
 8001372:	d02b      	beq.n	80013cc <HAL_DMA_IRQHandler+0xda>
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	2202      	movs	r2, #2
 8001378:	4013      	ands	r3, r2
 800137a:	d027      	beq.n	80013cc <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2220      	movs	r2, #32
 8001384:	4013      	ands	r3, r2
 8001386:	d10b      	bne.n	80013a0 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	210a      	movs	r1, #10
 8001394:	438a      	bics	r2, r1
 8001396:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2221      	movs	r2, #33	; 0x21
 800139c:	2101      	movs	r1, #1
 800139e:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a8:	2102      	movs	r1, #2
 80013aa:	4091      	lsls	r1, r2
 80013ac:	000a      	movs	r2, r1
 80013ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2220      	movs	r2, #32
 80013b4:	2100      	movs	r1, #0
 80013b6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d036      	beq.n	800142e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	0010      	movs	r0, r2
 80013c8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80013ca:	e030      	b.n	800142e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	2208      	movs	r2, #8
 80013d2:	409a      	lsls	r2, r3
 80013d4:	0013      	movs	r3, r2
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	4013      	ands	r3, r2
 80013da:	d028      	beq.n	800142e <HAL_DMA_IRQHandler+0x13c>
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	2208      	movs	r2, #8
 80013e0:	4013      	ands	r3, r2
 80013e2:	d024      	beq.n	800142e <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	210e      	movs	r1, #14
 80013f0:	438a      	bics	r2, r1
 80013f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013fc:	2101      	movs	r1, #1
 80013fe:	4091      	lsls	r1, r2
 8001400:	000a      	movs	r2, r1
 8001402:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2221      	movs	r2, #33	; 0x21
 800140e:	2101      	movs	r1, #1
 8001410:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2220      	movs	r2, #32
 8001416:	2100      	movs	r1, #0
 8001418:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	2b00      	cmp	r3, #0
 8001420:	d005      	beq.n	800142e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	0010      	movs	r0, r2
 800142a:	4798      	blx	r3
    }
  }
}
 800142c:	e7ff      	b.n	800142e <HAL_DMA_IRQHandler+0x13c>
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	b004      	add	sp, #16
 8001434:	bd80      	pop	{r7, pc}

08001436 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b084      	sub	sp, #16
 800143a:	af00      	add	r7, sp, #0
 800143c:	60f8      	str	r0, [r7, #12]
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
 8001442:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800144c:	2101      	movs	r1, #1
 800144e:	4091      	lsls	r1, r2
 8001450:	000a      	movs	r2, r1
 8001452:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b10      	cmp	r3, #16
 8001462:	d108      	bne.n	8001476 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68ba      	ldr	r2, [r7, #8]
 8001472:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001474:	e007      	b.n	8001486 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	60da      	str	r2, [r3, #12]
}
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	46bd      	mov	sp, r7
 800148a:	b004      	add	sp, #16
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a08      	ldr	r2, [pc, #32]	; (80014c0 <DMA_CalcBaseAndBitshift+0x30>)
 800149e:	4694      	mov	ip, r2
 80014a0:	4463      	add	r3, ip
 80014a2:	2114      	movs	r1, #20
 80014a4:	0018      	movs	r0, r3
 80014a6:	f7fe fe2f 	bl	8000108 <__udivsi3>
 80014aa:	0003      	movs	r3, r0
 80014ac:	009a      	lsls	r2, r3, #2
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a03      	ldr	r2, [pc, #12]	; (80014c4 <DMA_CalcBaseAndBitshift+0x34>)
 80014b6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80014b8:	46c0      	nop			; (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b002      	add	sp, #8
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	bffdfff8 	.word	0xbffdfff8
 80014c4:	40020000 	.word	0x40020000

080014c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d6:	e14f      	b.n	8001778 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2101      	movs	r1, #1
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	4091      	lsls	r1, r2
 80014e2:	000a      	movs	r2, r1
 80014e4:	4013      	ands	r3, r2
 80014e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d100      	bne.n	80014f0 <HAL_GPIO_Init+0x28>
 80014ee:	e140      	b.n	8001772 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2203      	movs	r2, #3
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d005      	beq.n	8001508 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2203      	movs	r2, #3
 8001502:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001504:	2b02      	cmp	r3, #2
 8001506:	d130      	bne.n	800156a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	2203      	movs	r2, #3
 8001514:	409a      	lsls	r2, r3
 8001516:	0013      	movs	r3, r2
 8001518:	43da      	mvns	r2, r3
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	68da      	ldr	r2, [r3, #12]
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	409a      	lsls	r2, r3
 800152a:	0013      	movs	r3, r2
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800153e:	2201      	movs	r2, #1
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	409a      	lsls	r2, r3
 8001544:	0013      	movs	r3, r2
 8001546:	43da      	mvns	r2, r3
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	4013      	ands	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	091b      	lsrs	r3, r3, #4
 8001554:	2201      	movs	r2, #1
 8001556:	401a      	ands	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	409a      	lsls	r2, r3
 800155c:	0013      	movs	r3, r2
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4313      	orrs	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2203      	movs	r2, #3
 8001570:	4013      	ands	r3, r2
 8001572:	2b03      	cmp	r3, #3
 8001574:	d017      	beq.n	80015a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	2203      	movs	r2, #3
 8001582:	409a      	lsls	r2, r3
 8001584:	0013      	movs	r3, r2
 8001586:	43da      	mvns	r2, r3
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	409a      	lsls	r2, r3
 8001598:	0013      	movs	r3, r2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2203      	movs	r2, #3
 80015ac:	4013      	ands	r3, r2
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d123      	bne.n	80015fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	08da      	lsrs	r2, r3, #3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3208      	adds	r2, #8
 80015ba:	0092      	lsls	r2, r2, #2
 80015bc:	58d3      	ldr	r3, [r2, r3]
 80015be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	2207      	movs	r2, #7
 80015c4:	4013      	ands	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	220f      	movs	r2, #15
 80015ca:	409a      	lsls	r2, r3
 80015cc:	0013      	movs	r3, r2
 80015ce:	43da      	mvns	r2, r3
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	691a      	ldr	r2, [r3, #16]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	2107      	movs	r1, #7
 80015de:	400b      	ands	r3, r1
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	409a      	lsls	r2, r3
 80015e4:	0013      	movs	r3, r2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	08da      	lsrs	r2, r3, #3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3208      	adds	r2, #8
 80015f4:	0092      	lsls	r2, r2, #2
 80015f6:	6939      	ldr	r1, [r7, #16]
 80015f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	2203      	movs	r2, #3
 8001606:	409a      	lsls	r2, r3
 8001608:	0013      	movs	r3, r2
 800160a:	43da      	mvns	r2, r3
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2203      	movs	r2, #3
 8001618:	401a      	ands	r2, r3
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	409a      	lsls	r2, r3
 8001620:	0013      	movs	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	23c0      	movs	r3, #192	; 0xc0
 8001634:	029b      	lsls	r3, r3, #10
 8001636:	4013      	ands	r3, r2
 8001638:	d100      	bne.n	800163c <HAL_GPIO_Init+0x174>
 800163a:	e09a      	b.n	8001772 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163c:	4b54      	ldr	r3, [pc, #336]	; (8001790 <HAL_GPIO_Init+0x2c8>)
 800163e:	699a      	ldr	r2, [r3, #24]
 8001640:	4b53      	ldr	r3, [pc, #332]	; (8001790 <HAL_GPIO_Init+0x2c8>)
 8001642:	2101      	movs	r1, #1
 8001644:	430a      	orrs	r2, r1
 8001646:	619a      	str	r2, [r3, #24]
 8001648:	4b51      	ldr	r3, [pc, #324]	; (8001790 <HAL_GPIO_Init+0x2c8>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	2201      	movs	r2, #1
 800164e:	4013      	ands	r3, r2
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001654:	4a4f      	ldr	r2, [pc, #316]	; (8001794 <HAL_GPIO_Init+0x2cc>)
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	089b      	lsrs	r3, r3, #2
 800165a:	3302      	adds	r3, #2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	589b      	ldr	r3, [r3, r2]
 8001660:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	2203      	movs	r2, #3
 8001666:	4013      	ands	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	220f      	movs	r2, #15
 800166c:	409a      	lsls	r2, r3
 800166e:	0013      	movs	r3, r2
 8001670:	43da      	mvns	r2, r3
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	2390      	movs	r3, #144	; 0x90
 800167c:	05db      	lsls	r3, r3, #23
 800167e:	429a      	cmp	r2, r3
 8001680:	d013      	beq.n	80016aa <HAL_GPIO_Init+0x1e2>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a44      	ldr	r2, [pc, #272]	; (8001798 <HAL_GPIO_Init+0x2d0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d00d      	beq.n	80016a6 <HAL_GPIO_Init+0x1de>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a43      	ldr	r2, [pc, #268]	; (800179c <HAL_GPIO_Init+0x2d4>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d007      	beq.n	80016a2 <HAL_GPIO_Init+0x1da>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a42      	ldr	r2, [pc, #264]	; (80017a0 <HAL_GPIO_Init+0x2d8>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d101      	bne.n	800169e <HAL_GPIO_Init+0x1d6>
 800169a:	2303      	movs	r3, #3
 800169c:	e006      	b.n	80016ac <HAL_GPIO_Init+0x1e4>
 800169e:	2305      	movs	r3, #5
 80016a0:	e004      	b.n	80016ac <HAL_GPIO_Init+0x1e4>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e002      	b.n	80016ac <HAL_GPIO_Init+0x1e4>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <HAL_GPIO_Init+0x1e4>
 80016aa:	2300      	movs	r3, #0
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	2103      	movs	r1, #3
 80016b0:	400a      	ands	r2, r1
 80016b2:	0092      	lsls	r2, r2, #2
 80016b4:	4093      	lsls	r3, r2
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016bc:	4935      	ldr	r1, [pc, #212]	; (8001794 <HAL_GPIO_Init+0x2cc>)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	089b      	lsrs	r3, r3, #2
 80016c2:	3302      	adds	r3, #2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ca:	4b36      	ldr	r3, [pc, #216]	; (80017a4 <HAL_GPIO_Init+0x2dc>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43da      	mvns	r2, r3
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	035b      	lsls	r3, r3, #13
 80016e2:	4013      	ands	r3, r2
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016ee:	4b2d      	ldr	r3, [pc, #180]	; (80017a4 <HAL_GPIO_Init+0x2dc>)
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80016f4:	4b2b      	ldr	r3, [pc, #172]	; (80017a4 <HAL_GPIO_Init+0x2dc>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	43da      	mvns	r2, r3
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	039b      	lsls	r3, r3, #14
 800170c:	4013      	ands	r3, r2
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001718:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <HAL_GPIO_Init+0x2dc>)
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800171e:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <HAL_GPIO_Init+0x2dc>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	43da      	mvns	r2, r3
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	029b      	lsls	r3, r3, #10
 8001736:	4013      	ands	r3, r2
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4313      	orrs	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <HAL_GPIO_Init+0x2dc>)
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001748:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <HAL_GPIO_Init+0x2dc>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	43da      	mvns	r2, r3
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	025b      	lsls	r3, r3, #9
 8001760:	4013      	ands	r3, r2
 8001762:	d003      	beq.n	800176c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <HAL_GPIO_Init+0x2dc>)
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3301      	adds	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	40da      	lsrs	r2, r3
 8001780:	1e13      	subs	r3, r2, #0
 8001782:	d000      	beq.n	8001786 <HAL_GPIO_Init+0x2be>
 8001784:	e6a8      	b.n	80014d8 <HAL_GPIO_Init+0x10>
  } 
}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	46c0      	nop			; (mov r8, r8)
 800178a:	46bd      	mov	sp, r7
 800178c:	b006      	add	sp, #24
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40021000 	.word	0x40021000
 8001794:	40010000 	.word	0x40010000
 8001798:	48000400 	.word	0x48000400
 800179c:	48000800 	.word	0x48000800
 80017a0:	48000c00 	.word	0x48000c00
 80017a4:	40010400 	.word	0x40010400

080017a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80017b6:	e0b1      	b.n	800191c <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80017b8:	2201      	movs	r2, #1
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	409a      	lsls	r2, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d100      	bne.n	80017cc <HAL_GPIO_DeInit+0x24>
 80017ca:	e0a4      	b.n	8001916 <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80017cc:	4a59      	ldr	r2, [pc, #356]	; (8001934 <HAL_GPIO_DeInit+0x18c>)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	089b      	lsrs	r3, r3, #2
 80017d2:	3302      	adds	r3, #2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	589b      	ldr	r3, [r3, r2]
 80017d8:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2203      	movs	r2, #3
 80017de:	4013      	ands	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	220f      	movs	r2, #15
 80017e4:	409a      	lsls	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4013      	ands	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	2390      	movs	r3, #144	; 0x90
 80017f0:	05db      	lsls	r3, r3, #23
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d013      	beq.n	800181e <HAL_GPIO_DeInit+0x76>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a4f      	ldr	r2, [pc, #316]	; (8001938 <HAL_GPIO_DeInit+0x190>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d00d      	beq.n	800181a <HAL_GPIO_DeInit+0x72>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4e      	ldr	r2, [pc, #312]	; (800193c <HAL_GPIO_DeInit+0x194>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d007      	beq.n	8001816 <HAL_GPIO_DeInit+0x6e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a4d      	ldr	r2, [pc, #308]	; (8001940 <HAL_GPIO_DeInit+0x198>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d101      	bne.n	8001812 <HAL_GPIO_DeInit+0x6a>
 800180e:	2303      	movs	r3, #3
 8001810:	e006      	b.n	8001820 <HAL_GPIO_DeInit+0x78>
 8001812:	2305      	movs	r3, #5
 8001814:	e004      	b.n	8001820 <HAL_GPIO_DeInit+0x78>
 8001816:	2302      	movs	r3, #2
 8001818:	e002      	b.n	8001820 <HAL_GPIO_DeInit+0x78>
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <HAL_GPIO_DeInit+0x78>
 800181e:	2300      	movs	r3, #0
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	2103      	movs	r1, #3
 8001824:	400a      	ands	r2, r1
 8001826:	0092      	lsls	r2, r2, #2
 8001828:	4093      	lsls	r3, r2
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	429a      	cmp	r2, r3
 800182e:	d132      	bne.n	8001896 <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001830:	4b44      	ldr	r3, [pc, #272]	; (8001944 <HAL_GPIO_DeInit+0x19c>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	43d9      	mvns	r1, r3
 8001838:	4b42      	ldr	r3, [pc, #264]	; (8001944 <HAL_GPIO_DeInit+0x19c>)
 800183a:	400a      	ands	r2, r1
 800183c:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800183e:	4b41      	ldr	r3, [pc, #260]	; (8001944 <HAL_GPIO_DeInit+0x19c>)
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	43d9      	mvns	r1, r3
 8001846:	4b3f      	ldr	r3, [pc, #252]	; (8001944 <HAL_GPIO_DeInit+0x19c>)
 8001848:	400a      	ands	r2, r1
 800184a:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800184c:	4b3d      	ldr	r3, [pc, #244]	; (8001944 <HAL_GPIO_DeInit+0x19c>)
 800184e:	68da      	ldr	r2, [r3, #12]
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	43d9      	mvns	r1, r3
 8001854:	4b3b      	ldr	r3, [pc, #236]	; (8001944 <HAL_GPIO_DeInit+0x19c>)
 8001856:	400a      	ands	r2, r1
 8001858:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800185a:	4b3a      	ldr	r3, [pc, #232]	; (8001944 <HAL_GPIO_DeInit+0x19c>)
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	43d9      	mvns	r1, r3
 8001862:	4b38      	ldr	r3, [pc, #224]	; (8001944 <HAL_GPIO_DeInit+0x19c>)
 8001864:	400a      	ands	r2, r1
 8001866:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	2203      	movs	r2, #3
 800186c:	4013      	ands	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	220f      	movs	r2, #15
 8001872:	409a      	lsls	r2, r3
 8001874:	0013      	movs	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001878:	4a2e      	ldr	r2, [pc, #184]	; (8001934 <HAL_GPIO_DeInit+0x18c>)
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	089b      	lsrs	r3, r3, #2
 800187e:	3302      	adds	r3, #2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	589a      	ldr	r2, [r3, r2]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	43d9      	mvns	r1, r3
 8001888:	482a      	ldr	r0, [pc, #168]	; (8001934 <HAL_GPIO_DeInit+0x18c>)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	089b      	lsrs	r3, r3, #2
 800188e:	400a      	ands	r2, r1
 8001890:	3302      	adds	r3, #2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	0052      	lsls	r2, r2, #1
 800189e:	2103      	movs	r1, #3
 80018a0:	4091      	lsls	r1, r2
 80018a2:	000a      	movs	r2, r1
 80018a4:	43d2      	mvns	r2, r2
 80018a6:	401a      	ands	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	08da      	lsrs	r2, r3, #3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3208      	adds	r2, #8
 80018b4:	0092      	lsls	r2, r2, #2
 80018b6:	58d3      	ldr	r3, [r2, r3]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	2107      	movs	r1, #7
 80018bc:	400a      	ands	r2, r1
 80018be:	0092      	lsls	r2, r2, #2
 80018c0:	210f      	movs	r1, #15
 80018c2:	4091      	lsls	r1, r2
 80018c4:	000a      	movs	r2, r1
 80018c6:	43d1      	mvns	r1, r2
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	08d2      	lsrs	r2, r2, #3
 80018cc:	4019      	ands	r1, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3208      	adds	r2, #8
 80018d2:	0092      	lsls	r2, r2, #2
 80018d4:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	0052      	lsls	r2, r2, #1
 80018de:	2103      	movs	r1, #3
 80018e0:	4091      	lsls	r1, r2
 80018e2:	000a      	movs	r2, r1
 80018e4:	43d2      	mvns	r2, r2
 80018e6:	401a      	ands	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2101      	movs	r1, #1
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	4091      	lsls	r1, r2
 80018f6:	000a      	movs	r2, r1
 80018f8:	43d2      	mvns	r2, r2
 80018fa:	401a      	ands	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	0052      	lsls	r2, r2, #1
 8001908:	2103      	movs	r1, #3
 800190a:	4091      	lsls	r1, r2
 800190c:	000a      	movs	r2, r1
 800190e:	43d2      	mvns	r2, r2
 8001910:	401a      	ands	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	609a      	str	r2, [r3, #8]

    }

    position++;
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	40da      	lsrs	r2, r3
 8001922:	1e13      	subs	r3, r2, #0
 8001924:	d000      	beq.n	8001928 <HAL_GPIO_DeInit+0x180>
 8001926:	e747      	b.n	80017b8 <HAL_GPIO_DeInit+0x10>
  }
}
 8001928:	46c0      	nop			; (mov r8, r8)
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	46bd      	mov	sp, r7
 800192e:	b006      	add	sp, #24
 8001930:	bd80      	pop	{r7, pc}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	40010000 	.word	0x40010000
 8001938:	48000400 	.word	0x48000400
 800193c:	48000800 	.word	0x48000800
 8001940:	48000c00 	.word	0x48000c00
 8001944:	40010400 	.word	0x40010400

08001948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	0008      	movs	r0, r1
 8001952:	0011      	movs	r1, r2
 8001954:	1cbb      	adds	r3, r7, #2
 8001956:	1c02      	adds	r2, r0, #0
 8001958:	801a      	strh	r2, [r3, #0]
 800195a:	1c7b      	adds	r3, r7, #1
 800195c:	1c0a      	adds	r2, r1, #0
 800195e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001960:	1c7b      	adds	r3, r7, #1
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d004      	beq.n	8001972 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001968:	1cbb      	adds	r3, r7, #2
 800196a:	881a      	ldrh	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001970:	e003      	b.n	800197a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001972:	1cbb      	adds	r3, r7, #2
 8001974:	881a      	ldrh	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	629a      	str	r2, [r3, #40]	; 0x28
}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	46bd      	mov	sp, r7
 800197e:	b002      	add	sp, #8
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e301      	b.n	8001f9a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2201      	movs	r2, #1
 800199c:	4013      	ands	r3, r2
 800199e:	d100      	bne.n	80019a2 <HAL_RCC_OscConfig+0x1e>
 80019a0:	e08d      	b.n	8001abe <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019a2:	4bc3      	ldr	r3, [pc, #780]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	220c      	movs	r2, #12
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d00e      	beq.n	80019cc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019ae:	4bc0      	ldr	r3, [pc, #768]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	220c      	movs	r2, #12
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d116      	bne.n	80019e8 <HAL_RCC_OscConfig+0x64>
 80019ba:	4bbd      	ldr	r3, [pc, #756]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	025b      	lsls	r3, r3, #9
 80019c2:	401a      	ands	r2, r3
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	025b      	lsls	r3, r3, #9
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d10d      	bne.n	80019e8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019cc:	4bb8      	ldr	r3, [pc, #736]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	029b      	lsls	r3, r3, #10
 80019d4:	4013      	ands	r3, r2
 80019d6:	d100      	bne.n	80019da <HAL_RCC_OscConfig+0x56>
 80019d8:	e070      	b.n	8001abc <HAL_RCC_OscConfig+0x138>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d000      	beq.n	80019e4 <HAL_RCC_OscConfig+0x60>
 80019e2:	e06b      	b.n	8001abc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e2d8      	b.n	8001f9a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d107      	bne.n	8001a00 <HAL_RCC_OscConfig+0x7c>
 80019f0:	4baf      	ldr	r3, [pc, #700]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4bae      	ldr	r3, [pc, #696]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 80019f6:	2180      	movs	r1, #128	; 0x80
 80019f8:	0249      	lsls	r1, r1, #9
 80019fa:	430a      	orrs	r2, r1
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	e02f      	b.n	8001a60 <HAL_RCC_OscConfig+0xdc>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d10c      	bne.n	8001a22 <HAL_RCC_OscConfig+0x9e>
 8001a08:	4ba9      	ldr	r3, [pc, #676]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4ba8      	ldr	r3, [pc, #672]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001a0e:	49a9      	ldr	r1, [pc, #676]	; (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001a10:	400a      	ands	r2, r1
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	4ba6      	ldr	r3, [pc, #664]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4ba5      	ldr	r3, [pc, #660]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001a1a:	49a7      	ldr	r1, [pc, #668]	; (8001cb8 <HAL_RCC_OscConfig+0x334>)
 8001a1c:	400a      	ands	r2, r1
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	e01e      	b.n	8001a60 <HAL_RCC_OscConfig+0xdc>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b05      	cmp	r3, #5
 8001a28:	d10e      	bne.n	8001a48 <HAL_RCC_OscConfig+0xc4>
 8001a2a:	4ba1      	ldr	r3, [pc, #644]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	4ba0      	ldr	r3, [pc, #640]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	02c9      	lsls	r1, r1, #11
 8001a34:	430a      	orrs	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	4b9d      	ldr	r3, [pc, #628]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b9c      	ldr	r3, [pc, #624]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001a3e:	2180      	movs	r1, #128	; 0x80
 8001a40:	0249      	lsls	r1, r1, #9
 8001a42:	430a      	orrs	r2, r1
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	e00b      	b.n	8001a60 <HAL_RCC_OscConfig+0xdc>
 8001a48:	4b99      	ldr	r3, [pc, #612]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b98      	ldr	r3, [pc, #608]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001a4e:	4999      	ldr	r1, [pc, #612]	; (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001a50:	400a      	ands	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	4b96      	ldr	r3, [pc, #600]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b95      	ldr	r3, [pc, #596]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001a5a:	4997      	ldr	r1, [pc, #604]	; (8001cb8 <HAL_RCC_OscConfig+0x334>)
 8001a5c:	400a      	ands	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d014      	beq.n	8001a92 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7ff fa64 	bl	8000f34 <HAL_GetTick>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a72:	f7ff fa5f 	bl	8000f34 <HAL_GetTick>
 8001a76:	0002      	movs	r2, r0
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b64      	cmp	r3, #100	; 0x64
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e28a      	b.n	8001f9a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a84:	4b8a      	ldr	r3, [pc, #552]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	029b      	lsls	r3, r3, #10
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d0f0      	beq.n	8001a72 <HAL_RCC_OscConfig+0xee>
 8001a90:	e015      	b.n	8001abe <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a92:	f7ff fa4f 	bl	8000f34 <HAL_GetTick>
 8001a96:	0003      	movs	r3, r0
 8001a98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a9c:	f7ff fa4a 	bl	8000f34 <HAL_GetTick>
 8001aa0:	0002      	movs	r2, r0
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b64      	cmp	r3, #100	; 0x64
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e275      	b.n	8001f9a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aae:	4b80      	ldr	r3, [pc, #512]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	029b      	lsls	r3, r3, #10
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x118>
 8001aba:	e000      	b.n	8001abe <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001abc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d100      	bne.n	8001aca <HAL_RCC_OscConfig+0x146>
 8001ac8:	e069      	b.n	8001b9e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001aca:	4b79      	ldr	r3, [pc, #484]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	220c      	movs	r2, #12
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d00b      	beq.n	8001aec <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ad4:	4b76      	ldr	r3, [pc, #472]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	220c      	movs	r2, #12
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d11c      	bne.n	8001b1a <HAL_RCC_OscConfig+0x196>
 8001ae0:	4b73      	ldr	r3, [pc, #460]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	025b      	lsls	r3, r3, #9
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d116      	bne.n	8001b1a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aec:	4b70      	ldr	r3, [pc, #448]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2202      	movs	r2, #2
 8001af2:	4013      	ands	r3, r2
 8001af4:	d005      	beq.n	8001b02 <HAL_RCC_OscConfig+0x17e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d001      	beq.n	8001b02 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e24b      	b.n	8001f9a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b6b      	ldr	r3, [pc, #428]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	22f8      	movs	r2, #248	; 0xf8
 8001b08:	4393      	bics	r3, r2
 8001b0a:	0019      	movs	r1, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	00da      	lsls	r2, r3, #3
 8001b12:	4b67      	ldr	r3, [pc, #412]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001b14:	430a      	orrs	r2, r1
 8001b16:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b18:	e041      	b.n	8001b9e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d024      	beq.n	8001b6c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b22:	4b63      	ldr	r3, [pc, #396]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	4b62      	ldr	r3, [pc, #392]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001b28:	2101      	movs	r1, #1
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2e:	f7ff fa01 	bl	8000f34 <HAL_GetTick>
 8001b32:	0003      	movs	r3, r0
 8001b34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b38:	f7ff f9fc 	bl	8000f34 <HAL_GetTick>
 8001b3c:	0002      	movs	r2, r0
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e227      	b.n	8001f9a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4a:	4b59      	ldr	r3, [pc, #356]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	4013      	ands	r3, r2
 8001b52:	d0f1      	beq.n	8001b38 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b54:	4b56      	ldr	r3, [pc, #344]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	22f8      	movs	r2, #248	; 0xf8
 8001b5a:	4393      	bics	r3, r2
 8001b5c:	0019      	movs	r1, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	00da      	lsls	r2, r3, #3
 8001b64:	4b52      	ldr	r3, [pc, #328]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001b66:	430a      	orrs	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	e018      	b.n	8001b9e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b6c:	4b50      	ldr	r3, [pc, #320]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b4f      	ldr	r3, [pc, #316]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001b72:	2101      	movs	r1, #1
 8001b74:	438a      	bics	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7ff f9dc 	bl	8000f34 <HAL_GetTick>
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b82:	f7ff f9d7 	bl	8000f34 <HAL_GetTick>
 8001b86:	0002      	movs	r2, r0
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e202      	b.n	8001f9a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b94:	4b46      	ldr	r3, [pc, #280]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2202      	movs	r2, #2
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d1f1      	bne.n	8001b82 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2208      	movs	r2, #8
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d036      	beq.n	8001c16 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d019      	beq.n	8001be4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb0:	4b3f      	ldr	r3, [pc, #252]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001bb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bb4:	4b3e      	ldr	r3, [pc, #248]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bbc:	f7ff f9ba 	bl	8000f34 <HAL_GetTick>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bc6:	f7ff f9b5 	bl	8000f34 <HAL_GetTick>
 8001bca:	0002      	movs	r2, r0
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e1e0      	b.n	8001f9a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd8:	4b35      	ldr	r3, [pc, #212]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	2202      	movs	r2, #2
 8001bde:	4013      	ands	r3, r2
 8001be0:	d0f1      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x242>
 8001be2:	e018      	b.n	8001c16 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be4:	4b32      	ldr	r3, [pc, #200]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001be6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001be8:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001bea:	2101      	movs	r1, #1
 8001bec:	438a      	bics	r2, r1
 8001bee:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf0:	f7ff f9a0 	bl	8000f34 <HAL_GetTick>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bfa:	f7ff f99b 	bl	8000f34 <HAL_GetTick>
 8001bfe:	0002      	movs	r2, r0
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e1c6      	b.n	8001f9a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c0c:	4b28      	ldr	r3, [pc, #160]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	2202      	movs	r2, #2
 8001c12:	4013      	ands	r3, r2
 8001c14:	d1f1      	bne.n	8001bfa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d100      	bne.n	8001c22 <HAL_RCC_OscConfig+0x29e>
 8001c20:	e0b4      	b.n	8001d8c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c22:	201f      	movs	r0, #31
 8001c24:	183b      	adds	r3, r7, r0
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2a:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001c2c:	69da      	ldr	r2, [r3, #28]
 8001c2e:	2380      	movs	r3, #128	; 0x80
 8001c30:	055b      	lsls	r3, r3, #21
 8001c32:	4013      	ands	r3, r2
 8001c34:	d110      	bne.n	8001c58 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001c38:	69da      	ldr	r2, [r3, #28]
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001c3c:	2180      	movs	r1, #128	; 0x80
 8001c3e:	0549      	lsls	r1, r1, #21
 8001c40:	430a      	orrs	r2, r1
 8001c42:	61da      	str	r2, [r3, #28]
 8001c44:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001c46:	69da      	ldr	r2, [r3, #28]
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	055b      	lsls	r3, r3, #21
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c52:	183b      	adds	r3, r7, r0
 8001c54:	2201      	movs	r2, #1
 8001c56:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4013      	ands	r3, r2
 8001c62:	d11a      	bne.n	8001c9a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c64:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001c6a:	2180      	movs	r1, #128	; 0x80
 8001c6c:	0049      	lsls	r1, r1, #1
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c72:	f7ff f95f 	bl	8000f34 <HAL_GetTick>
 8001c76:	0003      	movs	r3, r0
 8001c78:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7c:	f7ff f95a 	bl	8000f34 <HAL_GetTick>
 8001c80:	0002      	movs	r2, r0
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b64      	cmp	r3, #100	; 0x64
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e185      	b.n	8001f9a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4013      	ands	r3, r2
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d10e      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x33c>
 8001ca2:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001ca4:	6a1a      	ldr	r2, [r3, #32]
 8001ca6:	4b02      	ldr	r3, [pc, #8]	; (8001cb0 <HAL_RCC_OscConfig+0x32c>)
 8001ca8:	2101      	movs	r1, #1
 8001caa:	430a      	orrs	r2, r1
 8001cac:	621a      	str	r2, [r3, #32]
 8001cae:	e035      	b.n	8001d1c <HAL_RCC_OscConfig+0x398>
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	fffeffff 	.word	0xfffeffff
 8001cb8:	fffbffff 	.word	0xfffbffff
 8001cbc:	40007000 	.word	0x40007000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10c      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x35e>
 8001cc8:	4bb6      	ldr	r3, [pc, #728]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001cca:	6a1a      	ldr	r2, [r3, #32]
 8001ccc:	4bb5      	ldr	r3, [pc, #724]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001cce:	2101      	movs	r1, #1
 8001cd0:	438a      	bics	r2, r1
 8001cd2:	621a      	str	r2, [r3, #32]
 8001cd4:	4bb3      	ldr	r3, [pc, #716]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001cd6:	6a1a      	ldr	r2, [r3, #32]
 8001cd8:	4bb2      	ldr	r3, [pc, #712]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001cda:	2104      	movs	r1, #4
 8001cdc:	438a      	bics	r2, r1
 8001cde:	621a      	str	r2, [r3, #32]
 8001ce0:	e01c      	b.n	8001d1c <HAL_RCC_OscConfig+0x398>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b05      	cmp	r3, #5
 8001ce8:	d10c      	bne.n	8001d04 <HAL_RCC_OscConfig+0x380>
 8001cea:	4bae      	ldr	r3, [pc, #696]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001cec:	6a1a      	ldr	r2, [r3, #32]
 8001cee:	4bad      	ldr	r3, [pc, #692]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001cf0:	2104      	movs	r1, #4
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	621a      	str	r2, [r3, #32]
 8001cf6:	4bab      	ldr	r3, [pc, #684]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001cf8:	6a1a      	ldr	r2, [r3, #32]
 8001cfa:	4baa      	ldr	r3, [pc, #680]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	621a      	str	r2, [r3, #32]
 8001d02:	e00b      	b.n	8001d1c <HAL_RCC_OscConfig+0x398>
 8001d04:	4ba7      	ldr	r3, [pc, #668]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001d06:	6a1a      	ldr	r2, [r3, #32]
 8001d08:	4ba6      	ldr	r3, [pc, #664]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	438a      	bics	r2, r1
 8001d0e:	621a      	str	r2, [r3, #32]
 8001d10:	4ba4      	ldr	r3, [pc, #656]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001d12:	6a1a      	ldr	r2, [r3, #32]
 8001d14:	4ba3      	ldr	r3, [pc, #652]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001d16:	2104      	movs	r1, #4
 8001d18:	438a      	bics	r2, r1
 8001d1a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d014      	beq.n	8001d4e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d24:	f7ff f906 	bl	8000f34 <HAL_GetTick>
 8001d28:	0003      	movs	r3, r0
 8001d2a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d2c:	e009      	b.n	8001d42 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d2e:	f7ff f901 	bl	8000f34 <HAL_GetTick>
 8001d32:	0002      	movs	r2, r0
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	4a9b      	ldr	r2, [pc, #620]	; (8001fa8 <HAL_RCC_OscConfig+0x624>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e12b      	b.n	8001f9a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d42:	4b98      	ldr	r3, [pc, #608]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	2202      	movs	r2, #2
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCC_OscConfig+0x3aa>
 8001d4c:	e013      	b.n	8001d76 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4e:	f7ff f8f1 	bl	8000f34 <HAL_GetTick>
 8001d52:	0003      	movs	r3, r0
 8001d54:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d56:	e009      	b.n	8001d6c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d58:	f7ff f8ec 	bl	8000f34 <HAL_GetTick>
 8001d5c:	0002      	movs	r2, r0
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	4a91      	ldr	r2, [pc, #580]	; (8001fa8 <HAL_RCC_OscConfig+0x624>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e116      	b.n	8001f9a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d6c:	4b8d      	ldr	r3, [pc, #564]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	2202      	movs	r2, #2
 8001d72:	4013      	ands	r3, r2
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d76:	231f      	movs	r3, #31
 8001d78:	18fb      	adds	r3, r7, r3
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d105      	bne.n	8001d8c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d80:	4b88      	ldr	r3, [pc, #544]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001d82:	69da      	ldr	r2, [r3, #28]
 8001d84:	4b87      	ldr	r3, [pc, #540]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001d86:	4989      	ldr	r1, [pc, #548]	; (8001fac <HAL_RCC_OscConfig+0x628>)
 8001d88:	400a      	ands	r2, r1
 8001d8a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2210      	movs	r2, #16
 8001d92:	4013      	ands	r3, r2
 8001d94:	d063      	beq.n	8001e5e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d12a      	bne.n	8001df4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d9e:	4b81      	ldr	r3, [pc, #516]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001da0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001da2:	4b80      	ldr	r3, [pc, #512]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001da4:	2104      	movs	r1, #4
 8001da6:	430a      	orrs	r2, r1
 8001da8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001daa:	4b7e      	ldr	r3, [pc, #504]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dae:	4b7d      	ldr	r3, [pc, #500]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001db0:	2101      	movs	r1, #1
 8001db2:	430a      	orrs	r2, r1
 8001db4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db6:	f7ff f8bd 	bl	8000f34 <HAL_GetTick>
 8001dba:	0003      	movs	r3, r0
 8001dbc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001dc0:	f7ff f8b8 	bl	8000f34 <HAL_GetTick>
 8001dc4:	0002      	movs	r2, r0
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e0e3      	b.n	8001f9a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001dd2:	4b74      	ldr	r3, [pc, #464]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d0f1      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ddc:	4b71      	ldr	r3, [pc, #452]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de0:	22f8      	movs	r2, #248	; 0xf8
 8001de2:	4393      	bics	r3, r2
 8001de4:	0019      	movs	r1, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	00da      	lsls	r2, r3, #3
 8001dec:	4b6d      	ldr	r3, [pc, #436]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001dee:	430a      	orrs	r2, r1
 8001df0:	635a      	str	r2, [r3, #52]	; 0x34
 8001df2:	e034      	b.n	8001e5e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	3305      	adds	r3, #5
 8001dfa:	d111      	bne.n	8001e20 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001dfc:	4b69      	ldr	r3, [pc, #420]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e00:	4b68      	ldr	r3, [pc, #416]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001e02:	2104      	movs	r1, #4
 8001e04:	438a      	bics	r2, r1
 8001e06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e08:	4b66      	ldr	r3, [pc, #408]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0c:	22f8      	movs	r2, #248	; 0xf8
 8001e0e:	4393      	bics	r3, r2
 8001e10:	0019      	movs	r1, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	00da      	lsls	r2, r3, #3
 8001e18:	4b62      	ldr	r3, [pc, #392]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	635a      	str	r2, [r3, #52]	; 0x34
 8001e1e:	e01e      	b.n	8001e5e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e20:	4b60      	ldr	r3, [pc, #384]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e24:	4b5f      	ldr	r3, [pc, #380]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001e26:	2104      	movs	r1, #4
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001e2c:	4b5d      	ldr	r3, [pc, #372]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e30:	4b5c      	ldr	r3, [pc, #368]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001e32:	2101      	movs	r1, #1
 8001e34:	438a      	bics	r2, r1
 8001e36:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e38:	f7ff f87c 	bl	8000f34 <HAL_GetTick>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e42:	f7ff f877 	bl	8000f34 <HAL_GetTick>
 8001e46:	0002      	movs	r2, r0
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e0a2      	b.n	8001f9a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e54:	4b53      	ldr	r3, [pc, #332]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e58:	2202      	movs	r2, #2
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d1f1      	bne.n	8001e42 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d100      	bne.n	8001e68 <HAL_RCC_OscConfig+0x4e4>
 8001e66:	e097      	b.n	8001f98 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e68:	4b4e      	ldr	r3, [pc, #312]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	220c      	movs	r2, #12
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d100      	bne.n	8001e76 <HAL_RCC_OscConfig+0x4f2>
 8001e74:	e06b      	b.n	8001f4e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d14c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7e:	4b49      	ldr	r3, [pc, #292]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	4b48      	ldr	r3, [pc, #288]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001e84:	494a      	ldr	r1, [pc, #296]	; (8001fb0 <HAL_RCC_OscConfig+0x62c>)
 8001e86:	400a      	ands	r2, r1
 8001e88:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8a:	f7ff f853 	bl	8000f34 <HAL_GetTick>
 8001e8e:	0003      	movs	r3, r0
 8001e90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e94:	f7ff f84e 	bl	8000f34 <HAL_GetTick>
 8001e98:	0002      	movs	r2, r0
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e079      	b.n	8001f9a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea6:	4b3f      	ldr	r3, [pc, #252]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	2380      	movs	r3, #128	; 0x80
 8001eac:	049b      	lsls	r3, r3, #18
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eb2:	4b3c      	ldr	r3, [pc, #240]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb6:	220f      	movs	r2, #15
 8001eb8:	4393      	bics	r3, r2
 8001eba:	0019      	movs	r1, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec0:	4b38      	ldr	r3, [pc, #224]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ec6:	4b37      	ldr	r3, [pc, #220]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4a3a      	ldr	r2, [pc, #232]	; (8001fb4 <HAL_RCC_OscConfig+0x630>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	0019      	movs	r1, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	4b32      	ldr	r3, [pc, #200]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001edc:	430a      	orrs	r2, r1
 8001ede:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee0:	4b30      	ldr	r3, [pc, #192]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b2f      	ldr	r3, [pc, #188]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001ee6:	2180      	movs	r1, #128	; 0x80
 8001ee8:	0449      	lsls	r1, r1, #17
 8001eea:	430a      	orrs	r2, r1
 8001eec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eee:	f7ff f821 	bl	8000f34 <HAL_GetTick>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7ff f81c 	bl	8000f34 <HAL_GetTick>
 8001efc:	0002      	movs	r2, r0
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e047      	b.n	8001f9a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f0a:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	2380      	movs	r3, #128	; 0x80
 8001f10:	049b      	lsls	r3, r3, #18
 8001f12:	4013      	ands	r3, r2
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x574>
 8001f16:	e03f      	b.n	8001f98 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f18:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001f1e:	4924      	ldr	r1, [pc, #144]	; (8001fb0 <HAL_RCC_OscConfig+0x62c>)
 8001f20:	400a      	ands	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7ff f806 	bl	8000f34 <HAL_GetTick>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f2e:	f7ff f801 	bl	8000f34 <HAL_GetTick>
 8001f32:	0002      	movs	r2, r0
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e02c      	b.n	8001f9a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f40:	4b18      	ldr	r3, [pc, #96]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	049b      	lsls	r3, r3, #18
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d1f0      	bne.n	8001f2e <HAL_RCC_OscConfig+0x5aa>
 8001f4c:	e024      	b.n	8001f98 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e01f      	b.n	8001f9a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001f5a:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001f60:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f64:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	025b      	lsls	r3, r3, #9
 8001f6c:	401a      	ands	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d10e      	bne.n	8001f94 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	220f      	movs	r2, #15
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d107      	bne.n	8001f94 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	23f0      	movs	r3, #240	; 0xf0
 8001f88:	039b      	lsls	r3, r3, #14
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d001      	beq.n	8001f98 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b008      	add	sp, #32
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	00001388 	.word	0x00001388
 8001fac:	efffffff 	.word	0xefffffff
 8001fb0:	feffffff 	.word	0xfeffffff
 8001fb4:	ffc2ffff 	.word	0xffc2ffff

08001fb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0b3      	b.n	8002134 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fcc:	4b5b      	ldr	r3, [pc, #364]	; (800213c <HAL_RCC_ClockConfig+0x184>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d911      	bls.n	8001ffe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fda:	4b58      	ldr	r3, [pc, #352]	; (800213c <HAL_RCC_ClockConfig+0x184>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	4393      	bics	r3, r2
 8001fe2:	0019      	movs	r1, r3
 8001fe4:	4b55      	ldr	r3, [pc, #340]	; (800213c <HAL_RCC_ClockConfig+0x184>)
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fec:	4b53      	ldr	r3, [pc, #332]	; (800213c <HAL_RCC_ClockConfig+0x184>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d001      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e09a      	b.n	8002134 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2202      	movs	r2, #2
 8002004:	4013      	ands	r3, r2
 8002006:	d015      	beq.n	8002034 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2204      	movs	r2, #4
 800200e:	4013      	ands	r3, r2
 8002010:	d006      	beq.n	8002020 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002012:	4b4b      	ldr	r3, [pc, #300]	; (8002140 <HAL_RCC_ClockConfig+0x188>)
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	4b4a      	ldr	r3, [pc, #296]	; (8002140 <HAL_RCC_ClockConfig+0x188>)
 8002018:	21e0      	movs	r1, #224	; 0xe0
 800201a:	00c9      	lsls	r1, r1, #3
 800201c:	430a      	orrs	r2, r1
 800201e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002020:	4b47      	ldr	r3, [pc, #284]	; (8002140 <HAL_RCC_ClockConfig+0x188>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	22f0      	movs	r2, #240	; 0xf0
 8002026:	4393      	bics	r3, r2
 8002028:	0019      	movs	r1, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	4b44      	ldr	r3, [pc, #272]	; (8002140 <HAL_RCC_ClockConfig+0x188>)
 8002030:	430a      	orrs	r2, r1
 8002032:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2201      	movs	r2, #1
 800203a:	4013      	ands	r3, r2
 800203c:	d040      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d107      	bne.n	8002056 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002046:	4b3e      	ldr	r3, [pc, #248]	; (8002140 <HAL_RCC_ClockConfig+0x188>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	029b      	lsls	r3, r3, #10
 800204e:	4013      	ands	r3, r2
 8002050:	d114      	bne.n	800207c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e06e      	b.n	8002134 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d107      	bne.n	800206e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205e:	4b38      	ldr	r3, [pc, #224]	; (8002140 <HAL_RCC_ClockConfig+0x188>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	2380      	movs	r3, #128	; 0x80
 8002064:	049b      	lsls	r3, r3, #18
 8002066:	4013      	ands	r3, r2
 8002068:	d108      	bne.n	800207c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e062      	b.n	8002134 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206e:	4b34      	ldr	r3, [pc, #208]	; (8002140 <HAL_RCC_ClockConfig+0x188>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2202      	movs	r2, #2
 8002074:	4013      	ands	r3, r2
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e05b      	b.n	8002134 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800207c:	4b30      	ldr	r3, [pc, #192]	; (8002140 <HAL_RCC_ClockConfig+0x188>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2203      	movs	r2, #3
 8002082:	4393      	bics	r3, r2
 8002084:	0019      	movs	r1, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <HAL_RCC_ClockConfig+0x188>)
 800208c:	430a      	orrs	r2, r1
 800208e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002090:	f7fe ff50 	bl	8000f34 <HAL_GetTick>
 8002094:	0003      	movs	r3, r0
 8002096:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002098:	e009      	b.n	80020ae <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800209a:	f7fe ff4b 	bl	8000f34 <HAL_GetTick>
 800209e:	0002      	movs	r2, r0
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	4a27      	ldr	r2, [pc, #156]	; (8002144 <HAL_RCC_ClockConfig+0x18c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e042      	b.n	8002134 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ae:	4b24      	ldr	r3, [pc, #144]	; (8002140 <HAL_RCC_ClockConfig+0x188>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	220c      	movs	r2, #12
 80020b4:	401a      	ands	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	429a      	cmp	r2, r3
 80020be:	d1ec      	bne.n	800209a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020c0:	4b1e      	ldr	r3, [pc, #120]	; (800213c <HAL_RCC_ClockConfig+0x184>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2201      	movs	r2, #1
 80020c6:	4013      	ands	r3, r2
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d211      	bcs.n	80020f2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ce:	4b1b      	ldr	r3, [pc, #108]	; (800213c <HAL_RCC_ClockConfig+0x184>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2201      	movs	r2, #1
 80020d4:	4393      	bics	r3, r2
 80020d6:	0019      	movs	r1, r3
 80020d8:	4b18      	ldr	r3, [pc, #96]	; (800213c <HAL_RCC_ClockConfig+0x184>)
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e0:	4b16      	ldr	r3, [pc, #88]	; (800213c <HAL_RCC_ClockConfig+0x184>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2201      	movs	r2, #1
 80020e6:	4013      	ands	r3, r2
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d001      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e020      	b.n	8002134 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2204      	movs	r2, #4
 80020f8:	4013      	ands	r3, r2
 80020fa:	d009      	beq.n	8002110 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020fc:	4b10      	ldr	r3, [pc, #64]	; (8002140 <HAL_RCC_ClockConfig+0x188>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	4a11      	ldr	r2, [pc, #68]	; (8002148 <HAL_RCC_ClockConfig+0x190>)
 8002102:	4013      	ands	r3, r2
 8002104:	0019      	movs	r1, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <HAL_RCC_ClockConfig+0x188>)
 800210c:	430a      	orrs	r2, r1
 800210e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002110:	f000 f820 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8002114:	0001      	movs	r1, r0
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_RCC_ClockConfig+0x188>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	091b      	lsrs	r3, r3, #4
 800211c:	220f      	movs	r2, #15
 800211e:	4013      	ands	r3, r2
 8002120:	4a0a      	ldr	r2, [pc, #40]	; (800214c <HAL_RCC_ClockConfig+0x194>)
 8002122:	5cd3      	ldrb	r3, [r2, r3]
 8002124:	000a      	movs	r2, r1
 8002126:	40da      	lsrs	r2, r3
 8002128:	4b09      	ldr	r3, [pc, #36]	; (8002150 <HAL_RCC_ClockConfig+0x198>)
 800212a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800212c:	2000      	movs	r0, #0
 800212e:	f7fe febb 	bl	8000ea8 <HAL_InitTick>
  
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	0018      	movs	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	b004      	add	sp, #16
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40022000 	.word	0x40022000
 8002140:	40021000 	.word	0x40021000
 8002144:	00001388 	.word	0x00001388
 8002148:	fffff8ff 	.word	0xfffff8ff
 800214c:	08003e60 	.word	0x08003e60
 8002150:	20000008 	.word	0x20000008

08002154 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	2300      	movs	r3, #0
 8002168:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800216e:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	220c      	movs	r2, #12
 8002178:	4013      	ands	r3, r2
 800217a:	2b04      	cmp	r3, #4
 800217c:	d002      	beq.n	8002184 <HAL_RCC_GetSysClockFreq+0x30>
 800217e:	2b08      	cmp	r3, #8
 8002180:	d003      	beq.n	800218a <HAL_RCC_GetSysClockFreq+0x36>
 8002182:	e02c      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002184:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002186:	613b      	str	r3, [r7, #16]
      break;
 8002188:	e02c      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	0c9b      	lsrs	r3, r3, #18
 800218e:	220f      	movs	r2, #15
 8002190:	4013      	ands	r3, r2
 8002192:	4a19      	ldr	r2, [pc, #100]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002194:	5cd3      	ldrb	r3, [r2, r3]
 8002196:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002198:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219c:	220f      	movs	r2, #15
 800219e:	4013      	ands	r3, r2
 80021a0:	4a16      	ldr	r2, [pc, #88]	; (80021fc <HAL_RCC_GetSysClockFreq+0xa8>)
 80021a2:	5cd3      	ldrb	r3, [r2, r3]
 80021a4:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	025b      	lsls	r3, r3, #9
 80021ac:	4013      	ands	r3, r2
 80021ae:	d009      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	4810      	ldr	r0, [pc, #64]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021b4:	f7fd ffa8 	bl	8000108 <__udivsi3>
 80021b8:	0003      	movs	r3, r0
 80021ba:	001a      	movs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4353      	muls	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	e009      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	000a      	movs	r2, r1
 80021c8:	0152      	lsls	r2, r2, #5
 80021ca:	1a52      	subs	r2, r2, r1
 80021cc:	0193      	lsls	r3, r2, #6
 80021ce:	1a9b      	subs	r3, r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	185b      	adds	r3, r3, r1
 80021d4:	021b      	lsls	r3, r3, #8
 80021d6:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	613b      	str	r3, [r7, #16]
      break;
 80021dc:	e002      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021de:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021e0:	613b      	str	r3, [r7, #16]
      break;
 80021e2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80021e4:	693b      	ldr	r3, [r7, #16]
}
 80021e6:	0018      	movs	r0, r3
 80021e8:	46bd      	mov	sp, r7
 80021ea:	b006      	add	sp, #24
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	40021000 	.word	0x40021000
 80021f4:	007a1200 	.word	0x007a1200
 80021f8:	08003e78 	.word	0x08003e78
 80021fc:	08003e88 	.word	0x08003e88

08002200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002204:	4b02      	ldr	r3, [pc, #8]	; (8002210 <HAL_RCC_GetHCLKFreq+0x10>)
 8002206:	681b      	ldr	r3, [r3, #0]
}
 8002208:	0018      	movs	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	20000008 	.word	0x20000008

08002214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002218:	f7ff fff2 	bl	8002200 <HAL_RCC_GetHCLKFreq>
 800221c:	0001      	movs	r1, r0
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	2207      	movs	r2, #7
 8002226:	4013      	ands	r3, r2
 8002228:	4a04      	ldr	r2, [pc, #16]	; (800223c <HAL_RCC_GetPCLK1Freq+0x28>)
 800222a:	5cd3      	ldrb	r3, [r2, r3]
 800222c:	40d9      	lsrs	r1, r3
 800222e:	000b      	movs	r3, r1
}    
 8002230:	0018      	movs	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	40021000 	.word	0x40021000
 800223c:	08003e70 	.word	0x08003e70

08002240 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	025b      	lsls	r3, r3, #9
 8002258:	4013      	ands	r3, r2
 800225a:	d100      	bne.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800225c:	e08e      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800225e:	2017      	movs	r0, #23
 8002260:	183b      	adds	r3, r7, r0
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002266:	4b5f      	ldr	r3, [pc, #380]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002268:	69da      	ldr	r2, [r3, #28]
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	055b      	lsls	r3, r3, #21
 800226e:	4013      	ands	r3, r2
 8002270:	d110      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002272:	4b5c      	ldr	r3, [pc, #368]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002274:	69da      	ldr	r2, [r3, #28]
 8002276:	4b5b      	ldr	r3, [pc, #364]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002278:	2180      	movs	r1, #128	; 0x80
 800227a:	0549      	lsls	r1, r1, #21
 800227c:	430a      	orrs	r2, r1
 800227e:	61da      	str	r2, [r3, #28]
 8002280:	4b58      	ldr	r3, [pc, #352]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002282:	69da      	ldr	r2, [r3, #28]
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	055b      	lsls	r3, r3, #21
 8002288:	4013      	ands	r3, r2
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800228e:	183b      	adds	r3, r7, r0
 8002290:	2201      	movs	r2, #1
 8002292:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002294:	4b54      	ldr	r3, [pc, #336]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	2380      	movs	r3, #128	; 0x80
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4013      	ands	r3, r2
 800229e:	d11a      	bne.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a0:	4b51      	ldr	r3, [pc, #324]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4b50      	ldr	r3, [pc, #320]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80022a6:	2180      	movs	r1, #128	; 0x80
 80022a8:	0049      	lsls	r1, r1, #1
 80022aa:	430a      	orrs	r2, r1
 80022ac:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ae:	f7fe fe41 	bl	8000f34 <HAL_GetTick>
 80022b2:	0003      	movs	r3, r0
 80022b4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b6:	e008      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b8:	f7fe fe3c 	bl	8000f34 <HAL_GetTick>
 80022bc:	0002      	movs	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b64      	cmp	r3, #100	; 0x64
 80022c4:	d901      	bls.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e087      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ca:	4b47      	ldr	r3, [pc, #284]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	4013      	ands	r3, r2
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022d6:	4b43      	ldr	r3, [pc, #268]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022d8:	6a1a      	ldr	r2, [r3, #32]
 80022da:	23c0      	movs	r3, #192	; 0xc0
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4013      	ands	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d034      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	23c0      	movs	r3, #192	; 0xc0
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4013      	ands	r3, r2
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d02c      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022f8:	4b3a      	ldr	r3, [pc, #232]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	4a3b      	ldr	r2, [pc, #236]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022fe:	4013      	ands	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002302:	4b38      	ldr	r3, [pc, #224]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002304:	6a1a      	ldr	r2, [r3, #32]
 8002306:	4b37      	ldr	r3, [pc, #220]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002308:	2180      	movs	r1, #128	; 0x80
 800230a:	0249      	lsls	r1, r1, #9
 800230c:	430a      	orrs	r2, r1
 800230e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002310:	4b34      	ldr	r3, [pc, #208]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002312:	6a1a      	ldr	r2, [r3, #32]
 8002314:	4b33      	ldr	r3, [pc, #204]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002316:	4936      	ldr	r1, [pc, #216]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002318:	400a      	ands	r2, r1
 800231a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800231c:	4b31      	ldr	r3, [pc, #196]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2201      	movs	r2, #1
 8002326:	4013      	ands	r3, r2
 8002328:	d013      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232a:	f7fe fe03 	bl	8000f34 <HAL_GetTick>
 800232e:	0003      	movs	r3, r0
 8002330:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002332:	e009      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002334:	f7fe fdfe 	bl	8000f34 <HAL_GetTick>
 8002338:	0002      	movs	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	4a2d      	ldr	r2, [pc, #180]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d901      	bls.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e048      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002348:	4b26      	ldr	r3, [pc, #152]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	2202      	movs	r2, #2
 800234e:	4013      	ands	r3, r2
 8002350:	d0f0      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002352:	4b24      	ldr	r3, [pc, #144]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	4a25      	ldr	r2, [pc, #148]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002358:	4013      	ands	r3, r2
 800235a:	0019      	movs	r1, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002362:	430a      	orrs	r2, r1
 8002364:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002366:	2317      	movs	r3, #23
 8002368:	18fb      	adds	r3, r7, r3
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d105      	bne.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002370:	4b1c      	ldr	r3, [pc, #112]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002372:	69da      	ldr	r2, [r3, #28]
 8002374:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002376:	4920      	ldr	r1, [pc, #128]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002378:	400a      	ands	r2, r1
 800237a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2201      	movs	r2, #1
 8002382:	4013      	ands	r3, r2
 8002384:	d009      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002386:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	2203      	movs	r2, #3
 800238c:	4393      	bics	r3, r2
 800238e:	0019      	movs	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002396:	430a      	orrs	r2, r1
 8002398:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2220      	movs	r2, #32
 80023a0:	4013      	ands	r3, r2
 80023a2:	d009      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023a4:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	2210      	movs	r2, #16
 80023aa:	4393      	bics	r3, r2
 80023ac:	0019      	movs	r1, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80023b4:	430a      	orrs	r2, r1
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	2380      	movs	r3, #128	; 0x80
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	4013      	ands	r3, r2
 80023c2:	d009      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80023c4:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	2240      	movs	r2, #64	; 0x40
 80023ca:	4393      	bics	r3, r2
 80023cc:	0019      	movs	r1, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80023d4:	430a      	orrs	r2, r1
 80023d6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	0018      	movs	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	b006      	add	sp, #24
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40007000 	.word	0x40007000
 80023ec:	fffffcff 	.word	0xfffffcff
 80023f0:	fffeffff 	.word	0xfffeffff
 80023f4:	00001388 	.word	0x00001388
 80023f8:	efffffff 	.word	0xefffffff

080023fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e042      	b.n	8002494 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	223d      	movs	r2, #61	; 0x3d
 8002412:	5c9b      	ldrb	r3, [r3, r2]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d107      	bne.n	800242a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	223c      	movs	r2, #60	; 0x3c
 800241e:	2100      	movs	r1, #0
 8002420:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	0018      	movs	r0, r3
 8002426:	f7fe fadd 	bl	80009e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	223d      	movs	r2, #61	; 0x3d
 800242e:	2102      	movs	r1, #2
 8002430:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3304      	adds	r3, #4
 800243a:	0019      	movs	r1, r3
 800243c:	0010      	movs	r0, r2
 800243e:	f000 fa81 	bl	8002944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2246      	movs	r2, #70	; 0x46
 8002446:	2101      	movs	r1, #1
 8002448:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	223e      	movs	r2, #62	; 0x3e
 800244e:	2101      	movs	r1, #1
 8002450:	5499      	strb	r1, [r3, r2]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	223f      	movs	r2, #63	; 0x3f
 8002456:	2101      	movs	r1, #1
 8002458:	5499      	strb	r1, [r3, r2]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2240      	movs	r2, #64	; 0x40
 800245e:	2101      	movs	r1, #1
 8002460:	5499      	strb	r1, [r3, r2]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2241      	movs	r2, #65	; 0x41
 8002466:	2101      	movs	r1, #1
 8002468:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2242      	movs	r2, #66	; 0x42
 800246e:	2101      	movs	r1, #1
 8002470:	5499      	strb	r1, [r3, r2]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2243      	movs	r2, #67	; 0x43
 8002476:	2101      	movs	r1, #1
 8002478:	5499      	strb	r1, [r3, r2]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2244      	movs	r2, #68	; 0x44
 800247e:	2101      	movs	r1, #1
 8002480:	5499      	strb	r1, [r3, r2]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2245      	movs	r2, #69	; 0x45
 8002486:	2101      	movs	r1, #1
 8002488:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	223d      	movs	r2, #61	; 0x3d
 800248e:	2101      	movs	r1, #1
 8002490:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	0018      	movs	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	b002      	add	sp, #8
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	223d      	movs	r2, #61	; 0x3d
 80024a8:	5c9b      	ldrb	r3, [r3, r2]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d001      	beq.n	80024b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e033      	b.n	800251c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	223d      	movs	r2, #61	; 0x3d
 80024b8:	2102      	movs	r1, #2
 80024ba:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a18      	ldr	r2, [pc, #96]	; (8002524 <HAL_TIM_Base_Start+0x88>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d00f      	beq.n	80024e6 <HAL_TIM_Base_Start+0x4a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	05db      	lsls	r3, r3, #23
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d009      	beq.n	80024e6 <HAL_TIM_Base_Start+0x4a>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a14      	ldr	r2, [pc, #80]	; (8002528 <HAL_TIM_Base_Start+0x8c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d004      	beq.n	80024e6 <HAL_TIM_Base_Start+0x4a>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a12      	ldr	r2, [pc, #72]	; (800252c <HAL_TIM_Base_Start+0x90>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d111      	bne.n	800250a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2207      	movs	r2, #7
 80024ee:	4013      	ands	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b06      	cmp	r3, #6
 80024f6:	d010      	beq.n	800251a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2101      	movs	r1, #1
 8002504:	430a      	orrs	r2, r1
 8002506:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002508:	e007      	b.n	800251a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2101      	movs	r1, #1
 8002516:	430a      	orrs	r2, r1
 8002518:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	0018      	movs	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	b004      	add	sp, #16
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40012c00 	.word	0x40012c00
 8002528:	40000400 	.word	0x40000400
 800252c:	40014000 	.word	0x40014000

08002530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	2202      	movs	r2, #2
 8002540:	4013      	ands	r3, r2
 8002542:	2b02      	cmp	r3, #2
 8002544:	d124      	bne.n	8002590 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	2202      	movs	r2, #2
 800254e:	4013      	ands	r3, r2
 8002550:	2b02      	cmp	r3, #2
 8002552:	d11d      	bne.n	8002590 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2203      	movs	r2, #3
 800255a:	4252      	negs	r2, r2
 800255c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	2203      	movs	r2, #3
 800256c:	4013      	ands	r3, r2
 800256e:	d004      	beq.n	800257a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	0018      	movs	r0, r3
 8002574:	f000 f9ce 	bl	8002914 <HAL_TIM_IC_CaptureCallback>
 8002578:	e007      	b.n	800258a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	0018      	movs	r0, r3
 800257e:	f000 f9c1 	bl	8002904 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	0018      	movs	r0, r3
 8002586:	f000 f9cd 	bl	8002924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	2204      	movs	r2, #4
 8002598:	4013      	ands	r3, r2
 800259a:	2b04      	cmp	r3, #4
 800259c:	d125      	bne.n	80025ea <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	2204      	movs	r2, #4
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d11e      	bne.n	80025ea <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2205      	movs	r2, #5
 80025b2:	4252      	negs	r2, r2
 80025b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2202      	movs	r2, #2
 80025ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699a      	ldr	r2, [r3, #24]
 80025c2:	23c0      	movs	r3, #192	; 0xc0
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4013      	ands	r3, r2
 80025c8:	d004      	beq.n	80025d4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	0018      	movs	r0, r3
 80025ce:	f000 f9a1 	bl	8002914 <HAL_TIM_IC_CaptureCallback>
 80025d2:	e007      	b.n	80025e4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	0018      	movs	r0, r3
 80025d8:	f000 f994 	bl	8002904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	0018      	movs	r0, r3
 80025e0:	f000 f9a0 	bl	8002924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	2208      	movs	r2, #8
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d124      	bne.n	8002642 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	2208      	movs	r2, #8
 8002600:	4013      	ands	r3, r2
 8002602:	2b08      	cmp	r3, #8
 8002604:	d11d      	bne.n	8002642 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2209      	movs	r2, #9
 800260c:	4252      	negs	r2, r2
 800260e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2204      	movs	r2, #4
 8002614:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	2203      	movs	r2, #3
 800261e:	4013      	ands	r3, r2
 8002620:	d004      	beq.n	800262c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	0018      	movs	r0, r3
 8002626:	f000 f975 	bl	8002914 <HAL_TIM_IC_CaptureCallback>
 800262a:	e007      	b.n	800263c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	0018      	movs	r0, r3
 8002630:	f000 f968 	bl	8002904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	0018      	movs	r0, r3
 8002638:	f000 f974 	bl	8002924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	2210      	movs	r2, #16
 800264a:	4013      	ands	r3, r2
 800264c:	2b10      	cmp	r3, #16
 800264e:	d125      	bne.n	800269c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	2210      	movs	r2, #16
 8002658:	4013      	ands	r3, r2
 800265a:	2b10      	cmp	r3, #16
 800265c:	d11e      	bne.n	800269c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2211      	movs	r2, #17
 8002664:	4252      	negs	r2, r2
 8002666:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2208      	movs	r2, #8
 800266c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	69da      	ldr	r2, [r3, #28]
 8002674:	23c0      	movs	r3, #192	; 0xc0
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4013      	ands	r3, r2
 800267a:	d004      	beq.n	8002686 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	0018      	movs	r0, r3
 8002680:	f000 f948 	bl	8002914 <HAL_TIM_IC_CaptureCallback>
 8002684:	e007      	b.n	8002696 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	0018      	movs	r0, r3
 800268a:	f000 f93b 	bl	8002904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	0018      	movs	r0, r3
 8002692:	f000 f947 	bl	8002924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	2201      	movs	r2, #1
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d10f      	bne.n	80026ca <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	2201      	movs	r2, #1
 80026b2:	4013      	ands	r3, r2
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d108      	bne.n	80026ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2202      	movs	r2, #2
 80026be:	4252      	negs	r2, r2
 80026c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	0018      	movs	r0, r3
 80026c6:	f7fe f95b 	bl	8000980 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	2280      	movs	r2, #128	; 0x80
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b80      	cmp	r3, #128	; 0x80
 80026d6:	d10f      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	2280      	movs	r2, #128	; 0x80
 80026e0:	4013      	ands	r3, r2
 80026e2:	2b80      	cmp	r3, #128	; 0x80
 80026e4:	d108      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2281      	movs	r2, #129	; 0x81
 80026ec:	4252      	negs	r2, r2
 80026ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	0018      	movs	r0, r3
 80026f4:	f000 faa6 	bl	8002c44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	2240      	movs	r2, #64	; 0x40
 8002700:	4013      	ands	r3, r2
 8002702:	2b40      	cmp	r3, #64	; 0x40
 8002704:	d10f      	bne.n	8002726 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	2240      	movs	r2, #64	; 0x40
 800270e:	4013      	ands	r3, r2
 8002710:	2b40      	cmp	r3, #64	; 0x40
 8002712:	d108      	bne.n	8002726 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2241      	movs	r2, #65	; 0x41
 800271a:	4252      	negs	r2, r2
 800271c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	0018      	movs	r0, r3
 8002722:	f000 f907 	bl	8002934 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	2220      	movs	r2, #32
 800272e:	4013      	ands	r3, r2
 8002730:	2b20      	cmp	r3, #32
 8002732:	d10f      	bne.n	8002754 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2220      	movs	r2, #32
 800273c:	4013      	ands	r3, r2
 800273e:	2b20      	cmp	r3, #32
 8002740:	d108      	bne.n	8002754 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2221      	movs	r2, #33	; 0x21
 8002748:	4252      	negs	r2, r2
 800274a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	0018      	movs	r0, r3
 8002750:	f000 fa70 	bl	8002c34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002754:	46c0      	nop			; (mov r8, r8)
 8002756:	46bd      	mov	sp, r7
 8002758:	b002      	add	sp, #8
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002766:	230f      	movs	r3, #15
 8002768:	18fb      	adds	r3, r7, r3
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	223c      	movs	r2, #60	; 0x3c
 8002772:	5c9b      	ldrb	r3, [r3, r2]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_TIM_ConfigClockSource+0x20>
 8002778:	2302      	movs	r3, #2
 800277a:	e0bc      	b.n	80028f6 <HAL_TIM_ConfigClockSource+0x19a>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	223c      	movs	r2, #60	; 0x3c
 8002780:	2101      	movs	r1, #1
 8002782:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	223d      	movs	r2, #61	; 0x3d
 8002788:	2102      	movs	r1, #2
 800278a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2277      	movs	r2, #119	; 0x77
 8002798:	4393      	bics	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	4a58      	ldr	r2, [pc, #352]	; (8002900 <HAL_TIM_ConfigClockSource+0x1a4>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2280      	movs	r2, #128	; 0x80
 80027b2:	0192      	lsls	r2, r2, #6
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d040      	beq.n	800283a <HAL_TIM_ConfigClockSource+0xde>
 80027b8:	2280      	movs	r2, #128	; 0x80
 80027ba:	0192      	lsls	r2, r2, #6
 80027bc:	4293      	cmp	r3, r2
 80027be:	d900      	bls.n	80027c2 <HAL_TIM_ConfigClockSource+0x66>
 80027c0:	e088      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x178>
 80027c2:	2280      	movs	r2, #128	; 0x80
 80027c4:	0152      	lsls	r2, r2, #5
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d100      	bne.n	80027cc <HAL_TIM_ConfigClockSource+0x70>
 80027ca:	e088      	b.n	80028de <HAL_TIM_ConfigClockSource+0x182>
 80027cc:	2280      	movs	r2, #128	; 0x80
 80027ce:	0152      	lsls	r2, r2, #5
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d900      	bls.n	80027d6 <HAL_TIM_ConfigClockSource+0x7a>
 80027d4:	e07e      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x178>
 80027d6:	2b70      	cmp	r3, #112	; 0x70
 80027d8:	d018      	beq.n	800280c <HAL_TIM_ConfigClockSource+0xb0>
 80027da:	d900      	bls.n	80027de <HAL_TIM_ConfigClockSource+0x82>
 80027dc:	e07a      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x178>
 80027de:	2b60      	cmp	r3, #96	; 0x60
 80027e0:	d04f      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0x126>
 80027e2:	d900      	bls.n	80027e6 <HAL_TIM_ConfigClockSource+0x8a>
 80027e4:	e076      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x178>
 80027e6:	2b50      	cmp	r3, #80	; 0x50
 80027e8:	d03b      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0x106>
 80027ea:	d900      	bls.n	80027ee <HAL_TIM_ConfigClockSource+0x92>
 80027ec:	e072      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x178>
 80027ee:	2b40      	cmp	r3, #64	; 0x40
 80027f0:	d057      	beq.n	80028a2 <HAL_TIM_ConfigClockSource+0x146>
 80027f2:	d900      	bls.n	80027f6 <HAL_TIM_ConfigClockSource+0x9a>
 80027f4:	e06e      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x178>
 80027f6:	2b30      	cmp	r3, #48	; 0x30
 80027f8:	d063      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0x166>
 80027fa:	d86b      	bhi.n	80028d4 <HAL_TIM_ConfigClockSource+0x178>
 80027fc:	2b20      	cmp	r3, #32
 80027fe:	d060      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0x166>
 8002800:	d868      	bhi.n	80028d4 <HAL_TIM_ConfigClockSource+0x178>
 8002802:	2b00      	cmp	r3, #0
 8002804:	d05d      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0x166>
 8002806:	2b10      	cmp	r3, #16
 8002808:	d05b      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0x166>
 800280a:	e063      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800281c:	f000 f98c 	bl	8002b38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2277      	movs	r2, #119	; 0x77
 800282c:	4313      	orrs	r3, r2
 800282e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	609a      	str	r2, [r3, #8]
      break;
 8002838:	e052      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800284a:	f000 f975 	bl	8002b38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2180      	movs	r1, #128	; 0x80
 800285a:	01c9      	lsls	r1, r1, #7
 800285c:	430a      	orrs	r2, r1
 800285e:	609a      	str	r2, [r3, #8]
      break;
 8002860:	e03e      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800286e:	001a      	movs	r2, r3
 8002870:	f000 f8e8 	bl	8002a44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2150      	movs	r1, #80	; 0x50
 800287a:	0018      	movs	r0, r3
 800287c:	f000 f942 	bl	8002b04 <TIM_ITRx_SetConfig>
      break;
 8002880:	e02e      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800288e:	001a      	movs	r2, r3
 8002890:	f000 f906 	bl	8002aa0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2160      	movs	r1, #96	; 0x60
 800289a:	0018      	movs	r0, r3
 800289c:	f000 f932 	bl	8002b04 <TIM_ITRx_SetConfig>
      break;
 80028a0:	e01e      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ae:	001a      	movs	r2, r3
 80028b0:	f000 f8c8 	bl	8002a44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2140      	movs	r1, #64	; 0x40
 80028ba:	0018      	movs	r0, r3
 80028bc:	f000 f922 	bl	8002b04 <TIM_ITRx_SetConfig>
      break;
 80028c0:	e00e      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	0019      	movs	r1, r3
 80028cc:	0010      	movs	r0, r2
 80028ce:	f000 f919 	bl	8002b04 <TIM_ITRx_SetConfig>
      break;
 80028d2:	e005      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80028d4:	230f      	movs	r3, #15
 80028d6:	18fb      	adds	r3, r7, r3
 80028d8:	2201      	movs	r2, #1
 80028da:	701a      	strb	r2, [r3, #0]
      break;
 80028dc:	e000      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80028de:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	223d      	movs	r2, #61	; 0x3d
 80028e4:	2101      	movs	r1, #1
 80028e6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	223c      	movs	r2, #60	; 0x3c
 80028ec:	2100      	movs	r1, #0
 80028ee:	5499      	strb	r1, [r3, r2]

  return status;
 80028f0:	230f      	movs	r3, #15
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	781b      	ldrb	r3, [r3, #0]
}
 80028f6:	0018      	movs	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b004      	add	sp, #16
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	ffff00ff 	.word	0xffff00ff

08002904 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800290c:	46c0      	nop			; (mov r8, r8)
 800290e:	46bd      	mov	sp, r7
 8002910:	b002      	add	sp, #8
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800291c:	46c0      	nop			; (mov r8, r8)
 800291e:	46bd      	mov	sp, r7
 8002920:	b002      	add	sp, #8
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800292c:	46c0      	nop			; (mov r8, r8)
 800292e:	46bd      	mov	sp, r7
 8002930:	b002      	add	sp, #8
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800293c:	46c0      	nop			; (mov r8, r8)
 800293e:	46bd      	mov	sp, r7
 8002940:	b002      	add	sp, #8
 8002942:	bd80      	pop	{r7, pc}

08002944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a34      	ldr	r2, [pc, #208]	; (8002a28 <TIM_Base_SetConfig+0xe4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d008      	beq.n	800296e <TIM_Base_SetConfig+0x2a>
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	2380      	movs	r3, #128	; 0x80
 8002960:	05db      	lsls	r3, r3, #23
 8002962:	429a      	cmp	r2, r3
 8002964:	d003      	beq.n	800296e <TIM_Base_SetConfig+0x2a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a30      	ldr	r2, [pc, #192]	; (8002a2c <TIM_Base_SetConfig+0xe8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d108      	bne.n	8002980 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2270      	movs	r2, #112	; 0x70
 8002972:	4393      	bics	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a29      	ldr	r2, [pc, #164]	; (8002a28 <TIM_Base_SetConfig+0xe4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d018      	beq.n	80029ba <TIM_Base_SetConfig+0x76>
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	05db      	lsls	r3, r3, #23
 800298e:	429a      	cmp	r2, r3
 8002990:	d013      	beq.n	80029ba <TIM_Base_SetConfig+0x76>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a25      	ldr	r2, [pc, #148]	; (8002a2c <TIM_Base_SetConfig+0xe8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d00f      	beq.n	80029ba <TIM_Base_SetConfig+0x76>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a24      	ldr	r2, [pc, #144]	; (8002a30 <TIM_Base_SetConfig+0xec>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d00b      	beq.n	80029ba <TIM_Base_SetConfig+0x76>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a23      	ldr	r2, [pc, #140]	; (8002a34 <TIM_Base_SetConfig+0xf0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d007      	beq.n	80029ba <TIM_Base_SetConfig+0x76>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a22      	ldr	r2, [pc, #136]	; (8002a38 <TIM_Base_SetConfig+0xf4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d003      	beq.n	80029ba <TIM_Base_SetConfig+0x76>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a21      	ldr	r2, [pc, #132]	; (8002a3c <TIM_Base_SetConfig+0xf8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d108      	bne.n	80029cc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4a20      	ldr	r2, [pc, #128]	; (8002a40 <TIM_Base_SetConfig+0xfc>)
 80029be:	4013      	ands	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2280      	movs	r2, #128	; 0x80
 80029d0:	4393      	bics	r3, r2
 80029d2:	001a      	movs	r2, r3
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a0c      	ldr	r2, [pc, #48]	; (8002a28 <TIM_Base_SetConfig+0xe4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00b      	beq.n	8002a12 <TIM_Base_SetConfig+0xce>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a0d      	ldr	r2, [pc, #52]	; (8002a34 <TIM_Base_SetConfig+0xf0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d007      	beq.n	8002a12 <TIM_Base_SetConfig+0xce>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a0c      	ldr	r2, [pc, #48]	; (8002a38 <TIM_Base_SetConfig+0xf4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d003      	beq.n	8002a12 <TIM_Base_SetConfig+0xce>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a0b      	ldr	r2, [pc, #44]	; (8002a3c <TIM_Base_SetConfig+0xf8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d103      	bne.n	8002a1a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	615a      	str	r2, [r3, #20]
}
 8002a20:	46c0      	nop			; (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b004      	add	sp, #16
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40012c00 	.word	0x40012c00
 8002a2c:	40000400 	.word	0x40000400
 8002a30:	40002000 	.word	0x40002000
 8002a34:	40014000 	.word	0x40014000
 8002a38:	40014400 	.word	0x40014400
 8002a3c:	40014800 	.word	0x40014800
 8002a40:	fffffcff 	.word	0xfffffcff

08002a44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	4393      	bics	r3, r2
 8002a5e:	001a      	movs	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	22f0      	movs	r2, #240	; 0xf0
 8002a6e:	4393      	bics	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	220a      	movs	r2, #10
 8002a80:	4393      	bics	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	621a      	str	r2, [r3, #32]
}
 8002a98:	46c0      	nop			; (mov r8, r8)
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b006      	add	sp, #24
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	2210      	movs	r2, #16
 8002ab2:	4393      	bics	r3, r2
 8002ab4:	001a      	movs	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	4a0d      	ldr	r2, [pc, #52]	; (8002b00 <TIM_TI2_ConfigInputStage+0x60>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	031b      	lsls	r3, r3, #12
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	22a0      	movs	r2, #160	; 0xa0
 8002adc:	4393      	bics	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	621a      	str	r2, [r3, #32]
}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b006      	add	sp, #24
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	ffff0fff 	.word	0xffff0fff

08002b04 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2270      	movs	r2, #112	; 0x70
 8002b18:	4393      	bics	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	2207      	movs	r2, #7
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	609a      	str	r2, [r3, #8]
}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	46bd      	mov	sp, r7
 8002b32:	b004      	add	sp, #16
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
 8002b44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	4a09      	ldr	r2, [pc, #36]	; (8002b74 <TIM_ETR_SetConfig+0x3c>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	021a      	lsls	r2, r3, #8
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	609a      	str	r2, [r3, #8]
}
 8002b6c:	46c0      	nop			; (mov r8, r8)
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b006      	add	sp, #24
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	ffff00ff 	.word	0xffff00ff

08002b78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	223c      	movs	r2, #60	; 0x3c
 8002b86:	5c9b      	ldrb	r3, [r3, r2]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e047      	b.n	8002c20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	223c      	movs	r2, #60	; 0x3c
 8002b94:	2101      	movs	r1, #1
 8002b96:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	223d      	movs	r2, #61	; 0x3d
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2270      	movs	r2, #112	; 0x70
 8002bb4:	4393      	bics	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a16      	ldr	r2, [pc, #88]	; (8002c28 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d00f      	beq.n	8002bf4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	2380      	movs	r3, #128	; 0x80
 8002bda:	05db      	lsls	r3, r3, #23
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d009      	beq.n	8002bf4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a11      	ldr	r2, [pc, #68]	; (8002c2c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d004      	beq.n	8002bf4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a10      	ldr	r2, [pc, #64]	; (8002c30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d10c      	bne.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2280      	movs	r2, #128	; 0x80
 8002bf8:	4393      	bics	r3, r2
 8002bfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	223d      	movs	r2, #61	; 0x3d
 8002c12:	2101      	movs	r1, #1
 8002c14:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	223c      	movs	r2, #60	; 0x3c
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	0018      	movs	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b004      	add	sp, #16
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40012c00 	.word	0x40012c00
 8002c2c:	40000400 	.word	0x40000400
 8002c30:	40014000 	.word	0x40014000

08002c34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c3c:	46c0      	nop			; (mov r8, r8)
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b002      	add	sp, #8
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c4c:	46c0      	nop			; (mov r8, r8)
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b002      	add	sp, #8
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e044      	b.n	8002cf0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d107      	bne.n	8002c7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2278      	movs	r2, #120	; 0x78
 8002c72:	2100      	movs	r1, #0
 8002c74:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f7fd fef5 	bl	8000a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2224      	movs	r2, #36	; 0x24
 8002c82:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2101      	movs	r1, #1
 8002c90:	438a      	bics	r2, r1
 8002c92:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	0018      	movs	r0, r3
 8002c98:	f000 f978 	bl	8002f8c <UART_SetConfig>
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e024      	b.n	8002cf0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f000 faab 	bl	800320c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	490d      	ldr	r1, [pc, #52]	; (8002cf8 <HAL_UART_Init+0xa4>)
 8002cc2:	400a      	ands	r2, r1
 8002cc4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	212a      	movs	r1, #42	; 0x2a
 8002cd2:	438a      	bics	r2, r1
 8002cd4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f000 fb43 	bl	8003374 <UART_CheckIdleState>
 8002cee:	0003      	movs	r3, r0
}
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b002      	add	sp, #8
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	ffffb7ff 	.word	0xffffb7ff

08002cfc <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e030      	b.n	8002d70 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2224      	movs	r2, #36	; 0x24
 8002d12:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2101      	movs	r1, #1
 8002d20:	438a      	bics	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2200      	movs	r2, #0
 8002d32:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f7fd ff9a 	bl	8000c78 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2284      	movs	r2, #132	; 0x84
 8002d48:	2100      	movs	r1, #0
 8002d4a:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2280      	movs	r2, #128	; 0x80
 8002d56:	2100      	movs	r1, #0
 8002d58:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2278      	movs	r2, #120	; 0x78
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	0018      	movs	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b002      	add	sp, #8
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	1dbb      	adds	r3, r7, #6
 8002d84:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d8a:	2b20      	cmp	r3, #32
 8002d8c:	d000      	beq.n	8002d90 <HAL_UART_Transmit_DMA+0x18>
 8002d8e:	e077      	b.n	8002e80 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_UART_Transmit_DMA+0x26>
 8002d96:	1dbb      	adds	r3, r7, #6
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e06f      	b.n	8002e82 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	2380      	movs	r3, #128	; 0x80
 8002da8:	015b      	lsls	r3, r3, #5
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d109      	bne.n	8002dc2 <HAL_UART_Transmit_DMA+0x4a>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d105      	bne.n	8002dc2 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2201      	movs	r2, #1
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d001      	beq.n	8002dc2 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e05f      	b.n	8002e82 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	1dba      	adds	r2, r7, #6
 8002dcc:	2150      	movs	r1, #80	; 0x50
 8002dce:	8812      	ldrh	r2, [r2, #0]
 8002dd0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1dba      	adds	r2, r7, #6
 8002dd6:	2152      	movs	r1, #82	; 0x52
 8002dd8:	8812      	ldrh	r2, [r2, #0]
 8002dda:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2284      	movs	r2, #132	; 0x84
 8002de0:	2100      	movs	r1, #0
 8002de2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2221      	movs	r2, #33	; 0x21
 8002de8:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d027      	beq.n	8002e42 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	4a25      	ldr	r2, [pc, #148]	; (8002e8c <HAL_UART_Transmit_DMA+0x114>)
 8002df8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfe:	4a24      	ldr	r2, [pc, #144]	; (8002e90 <HAL_UART_Transmit_DMA+0x118>)
 8002e00:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e06:	4a23      	ldr	r2, [pc, #140]	; (8002e94 <HAL_UART_Transmit_DMA+0x11c>)
 8002e08:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	2200      	movs	r2, #0
 8002e10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3328      	adds	r3, #40	; 0x28
 8002e22:	001a      	movs	r2, r3
 8002e24:	1dbb      	adds	r3, r7, #6
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	f7fe f9fd 	bl	8001226 <HAL_DMA_Start_IT>
 8002e2c:	1e03      	subs	r3, r0, #0
 8002e2e:	d008      	beq.n	8002e42 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2284      	movs	r2, #132	; 0x84
 8002e34:	2110      	movs	r1, #16
 8002e36:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e01f      	b.n	8002e82 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2240      	movs	r2, #64	; 0x40
 8002e48:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e4e:	613b      	str	r3, [r7, #16]
  return(result);
 8002e50:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002e52:	61fb      	str	r3, [r7, #28]
 8002e54:	2301      	movs	r3, #1
 8002e56:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f383 8810 	msr	PRIMASK, r3
}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2180      	movs	r1, #128	; 0x80
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	f383 8810 	msr	PRIMASK, r3
}
 8002e7a:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	e000      	b.n	8002e82 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002e80:	2302      	movs	r3, #2
  }
}
 8002e82:	0018      	movs	r0, r3
 8002e84:	46bd      	mov	sp, r7
 8002e86:	b008      	add	sp, #32
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	080037e9 	.word	0x080037e9
 8002e90:	0800387d 	.word	0x0800387d
 8002e94:	08003a0b 	.word	0x08003a0b

08002e98 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	1dbb      	adds	r3, r7, #6
 8002ea4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2280      	movs	r2, #128	; 0x80
 8002eaa:	589b      	ldr	r3, [r3, r2]
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	d145      	bne.n	8002f3c <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_UART_Receive_DMA+0x26>
 8002eb6:	1dbb      	adds	r3, r7, #6
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e03d      	b.n	8002f3e <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	2380      	movs	r3, #128	; 0x80
 8002ec8:	015b      	lsls	r3, r3, #5
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d109      	bne.n	8002ee2 <HAL_UART_Receive_DMA+0x4a>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d105      	bne.n	8002ee2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	4013      	ands	r3, r2
 8002edc:	d001      	beq.n	8002ee2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e02d      	b.n	8002f3e <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	2380      	movs	r3, #128	; 0x80
 8002ef0:	041b      	lsls	r3, r3, #16
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	d019      	beq.n	8002f2a <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ef6:	f3ef 8310 	mrs	r3, PRIMASK
 8002efa:	613b      	str	r3, [r7, #16]
  return(result);
 8002efc:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002efe:	61fb      	str	r3, [r7, #28]
 8002f00:	2301      	movs	r3, #1
 8002f02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f383 8810 	msr	PRIMASK, r3
}
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2180      	movs	r1, #128	; 0x80
 8002f18:	04c9      	lsls	r1, r1, #19
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	f383 8810 	msr	PRIMASK, r3
}
 8002f28:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002f2a:	1dbb      	adds	r3, r7, #6
 8002f2c:	881a      	ldrh	r2, [r3, #0]
 8002f2e:	68b9      	ldr	r1, [r7, #8]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	0018      	movs	r0, r3
 8002f34:	f000 fb30 	bl	8003598 <UART_Start_Receive_DMA>
 8002f38:	0003      	movs	r3, r0
 8002f3a:	e000      	b.n	8002f3e <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002f3c:	2302      	movs	r3, #2
  }
}
 8002f3e:	0018      	movs	r0, r3
 8002f40:	46bd      	mov	sp, r7
 8002f42:	b008      	add	sp, #32
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b082      	sub	sp, #8
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b002      	add	sp, #8
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b002      	add	sp, #8
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b082      	sub	sp, #8
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	46bd      	mov	sp, r7
 8002f72:	b002      	add	sp, #8
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b082      	sub	sp, #8
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	000a      	movs	r2, r1
 8002f80:	1cbb      	adds	r3, r7, #2
 8002f82:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f84:	46c0      	nop			; (mov r8, r8)
 8002f86:	46bd      	mov	sp, r7
 8002f88:	b002      	add	sp, #8
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f94:	231e      	movs	r3, #30
 8002f96:	18fb      	adds	r3, r7, r3
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a8d      	ldr	r2, [pc, #564]	; (80031f0 <UART_SetConfig+0x264>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	0019      	movs	r1, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4a88      	ldr	r2, [pc, #544]	; (80031f4 <UART_SetConfig+0x268>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	0019      	movs	r1, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4a7f      	ldr	r2, [pc, #508]	; (80031f8 <UART_SetConfig+0x26c>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	0019      	movs	r1, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	430a      	orrs	r2, r1
 8003006:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a7b      	ldr	r2, [pc, #492]	; (80031fc <UART_SetConfig+0x270>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d127      	bne.n	8003062 <UART_SetConfig+0xd6>
 8003012:	4b7b      	ldr	r3, [pc, #492]	; (8003200 <UART_SetConfig+0x274>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	2203      	movs	r2, #3
 8003018:	4013      	ands	r3, r2
 800301a:	2b03      	cmp	r3, #3
 800301c:	d00d      	beq.n	800303a <UART_SetConfig+0xae>
 800301e:	d81b      	bhi.n	8003058 <UART_SetConfig+0xcc>
 8003020:	2b02      	cmp	r3, #2
 8003022:	d014      	beq.n	800304e <UART_SetConfig+0xc2>
 8003024:	d818      	bhi.n	8003058 <UART_SetConfig+0xcc>
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <UART_SetConfig+0xa4>
 800302a:	2b01      	cmp	r3, #1
 800302c:	d00a      	beq.n	8003044 <UART_SetConfig+0xb8>
 800302e:	e013      	b.n	8003058 <UART_SetConfig+0xcc>
 8003030:	231f      	movs	r3, #31
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	2200      	movs	r2, #0
 8003036:	701a      	strb	r2, [r3, #0]
 8003038:	e021      	b.n	800307e <UART_SetConfig+0xf2>
 800303a:	231f      	movs	r3, #31
 800303c:	18fb      	adds	r3, r7, r3
 800303e:	2202      	movs	r2, #2
 8003040:	701a      	strb	r2, [r3, #0]
 8003042:	e01c      	b.n	800307e <UART_SetConfig+0xf2>
 8003044:	231f      	movs	r3, #31
 8003046:	18fb      	adds	r3, r7, r3
 8003048:	2204      	movs	r2, #4
 800304a:	701a      	strb	r2, [r3, #0]
 800304c:	e017      	b.n	800307e <UART_SetConfig+0xf2>
 800304e:	231f      	movs	r3, #31
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	2208      	movs	r2, #8
 8003054:	701a      	strb	r2, [r3, #0]
 8003056:	e012      	b.n	800307e <UART_SetConfig+0xf2>
 8003058:	231f      	movs	r3, #31
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	2210      	movs	r2, #16
 800305e:	701a      	strb	r2, [r3, #0]
 8003060:	e00d      	b.n	800307e <UART_SetConfig+0xf2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a67      	ldr	r2, [pc, #412]	; (8003204 <UART_SetConfig+0x278>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d104      	bne.n	8003076 <UART_SetConfig+0xea>
 800306c:	231f      	movs	r3, #31
 800306e:	18fb      	adds	r3, r7, r3
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]
 8003074:	e003      	b.n	800307e <UART_SetConfig+0xf2>
 8003076:	231f      	movs	r3, #31
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	2210      	movs	r2, #16
 800307c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69da      	ldr	r2, [r3, #28]
 8003082:	2380      	movs	r3, #128	; 0x80
 8003084:	021b      	lsls	r3, r3, #8
 8003086:	429a      	cmp	r2, r3
 8003088:	d15c      	bne.n	8003144 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800308a:	231f      	movs	r3, #31
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b08      	cmp	r3, #8
 8003092:	d015      	beq.n	80030c0 <UART_SetConfig+0x134>
 8003094:	dc18      	bgt.n	80030c8 <UART_SetConfig+0x13c>
 8003096:	2b04      	cmp	r3, #4
 8003098:	d00d      	beq.n	80030b6 <UART_SetConfig+0x12a>
 800309a:	dc15      	bgt.n	80030c8 <UART_SetConfig+0x13c>
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <UART_SetConfig+0x11a>
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d005      	beq.n	80030b0 <UART_SetConfig+0x124>
 80030a4:	e010      	b.n	80030c8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030a6:	f7ff f8b5 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 80030aa:	0003      	movs	r3, r0
 80030ac:	61bb      	str	r3, [r7, #24]
        break;
 80030ae:	e012      	b.n	80030d6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030b0:	4b55      	ldr	r3, [pc, #340]	; (8003208 <UART_SetConfig+0x27c>)
 80030b2:	61bb      	str	r3, [r7, #24]
        break;
 80030b4:	e00f      	b.n	80030d6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030b6:	f7ff f84d 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 80030ba:	0003      	movs	r3, r0
 80030bc:	61bb      	str	r3, [r7, #24]
        break;
 80030be:	e00a      	b.n	80030d6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030c0:	2380      	movs	r3, #128	; 0x80
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	61bb      	str	r3, [r7, #24]
        break;
 80030c6:	e006      	b.n	80030d6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030cc:	231e      	movs	r3, #30
 80030ce:	18fb      	adds	r3, r7, r3
 80030d0:	2201      	movs	r2, #1
 80030d2:	701a      	strb	r2, [r3, #0]
        break;
 80030d4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d100      	bne.n	80030de <UART_SetConfig+0x152>
 80030dc:	e07a      	b.n	80031d4 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	005a      	lsls	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	085b      	lsrs	r3, r3, #1
 80030e8:	18d2      	adds	r2, r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	0019      	movs	r1, r3
 80030f0:	0010      	movs	r0, r2
 80030f2:	f7fd f809 	bl	8000108 <__udivsi3>
 80030f6:	0003      	movs	r3, r0
 80030f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	2b0f      	cmp	r3, #15
 80030fe:	d91c      	bls.n	800313a <UART_SetConfig+0x1ae>
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	2380      	movs	r3, #128	; 0x80
 8003104:	025b      	lsls	r3, r3, #9
 8003106:	429a      	cmp	r2, r3
 8003108:	d217      	bcs.n	800313a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	b29a      	uxth	r2, r3
 800310e:	200e      	movs	r0, #14
 8003110:	183b      	adds	r3, r7, r0
 8003112:	210f      	movs	r1, #15
 8003114:	438a      	bics	r2, r1
 8003116:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	085b      	lsrs	r3, r3, #1
 800311c:	b29b      	uxth	r3, r3
 800311e:	2207      	movs	r2, #7
 8003120:	4013      	ands	r3, r2
 8003122:	b299      	uxth	r1, r3
 8003124:	183b      	adds	r3, r7, r0
 8003126:	183a      	adds	r2, r7, r0
 8003128:	8812      	ldrh	r2, [r2, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	183a      	adds	r2, r7, r0
 8003134:	8812      	ldrh	r2, [r2, #0]
 8003136:	60da      	str	r2, [r3, #12]
 8003138:	e04c      	b.n	80031d4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800313a:	231e      	movs	r3, #30
 800313c:	18fb      	adds	r3, r7, r3
 800313e:	2201      	movs	r2, #1
 8003140:	701a      	strb	r2, [r3, #0]
 8003142:	e047      	b.n	80031d4 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003144:	231f      	movs	r3, #31
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b08      	cmp	r3, #8
 800314c:	d015      	beq.n	800317a <UART_SetConfig+0x1ee>
 800314e:	dc18      	bgt.n	8003182 <UART_SetConfig+0x1f6>
 8003150:	2b04      	cmp	r3, #4
 8003152:	d00d      	beq.n	8003170 <UART_SetConfig+0x1e4>
 8003154:	dc15      	bgt.n	8003182 <UART_SetConfig+0x1f6>
 8003156:	2b00      	cmp	r3, #0
 8003158:	d002      	beq.n	8003160 <UART_SetConfig+0x1d4>
 800315a:	2b02      	cmp	r3, #2
 800315c:	d005      	beq.n	800316a <UART_SetConfig+0x1de>
 800315e:	e010      	b.n	8003182 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003160:	f7ff f858 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 8003164:	0003      	movs	r3, r0
 8003166:	61bb      	str	r3, [r7, #24]
        break;
 8003168:	e012      	b.n	8003190 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800316a:	4b27      	ldr	r3, [pc, #156]	; (8003208 <UART_SetConfig+0x27c>)
 800316c:	61bb      	str	r3, [r7, #24]
        break;
 800316e:	e00f      	b.n	8003190 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003170:	f7fe fff0 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8003174:	0003      	movs	r3, r0
 8003176:	61bb      	str	r3, [r7, #24]
        break;
 8003178:	e00a      	b.n	8003190 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800317a:	2380      	movs	r3, #128	; 0x80
 800317c:	021b      	lsls	r3, r3, #8
 800317e:	61bb      	str	r3, [r7, #24]
        break;
 8003180:	e006      	b.n	8003190 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003186:	231e      	movs	r3, #30
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	2201      	movs	r2, #1
 800318c:	701a      	strb	r2, [r3, #0]
        break;
 800318e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d01e      	beq.n	80031d4 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	085a      	lsrs	r2, r3, #1
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	18d2      	adds	r2, r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	0019      	movs	r1, r3
 80031a6:	0010      	movs	r0, r2
 80031a8:	f7fc ffae 	bl	8000108 <__udivsi3>
 80031ac:	0003      	movs	r3, r0
 80031ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	2b0f      	cmp	r3, #15
 80031b4:	d90a      	bls.n	80031cc <UART_SetConfig+0x240>
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	2380      	movs	r3, #128	; 0x80
 80031ba:	025b      	lsls	r3, r3, #9
 80031bc:	429a      	cmp	r2, r3
 80031be:	d205      	bcs.n	80031cc <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	60da      	str	r2, [r3, #12]
 80031ca:	e003      	b.n	80031d4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80031cc:	231e      	movs	r3, #30
 80031ce:	18fb      	adds	r3, r7, r3
 80031d0:	2201      	movs	r2, #1
 80031d2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80031e0:	231e      	movs	r3, #30
 80031e2:	18fb      	adds	r3, r7, r3
 80031e4:	781b      	ldrb	r3, [r3, #0]
}
 80031e6:	0018      	movs	r0, r3
 80031e8:	46bd      	mov	sp, r7
 80031ea:	b008      	add	sp, #32
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	ffff69f3 	.word	0xffff69f3
 80031f4:	ffffcfff 	.word	0xffffcfff
 80031f8:	fffff4ff 	.word	0xfffff4ff
 80031fc:	40013800 	.word	0x40013800
 8003200:	40021000 	.word	0x40021000
 8003204:	40004400 	.word	0x40004400
 8003208:	007a1200 	.word	0x007a1200

0800320c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	2201      	movs	r2, #1
 800321a:	4013      	ands	r3, r2
 800321c:	d00b      	beq.n	8003236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	4a4a      	ldr	r2, [pc, #296]	; (8003350 <UART_AdvFeatureConfig+0x144>)
 8003226:	4013      	ands	r3, r2
 8003228:	0019      	movs	r1, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	2202      	movs	r2, #2
 800323c:	4013      	ands	r3, r2
 800323e:	d00b      	beq.n	8003258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4a43      	ldr	r2, [pc, #268]	; (8003354 <UART_AdvFeatureConfig+0x148>)
 8003248:	4013      	ands	r3, r2
 800324a:	0019      	movs	r1, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	2204      	movs	r2, #4
 800325e:	4013      	ands	r3, r2
 8003260:	d00b      	beq.n	800327a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	4a3b      	ldr	r2, [pc, #236]	; (8003358 <UART_AdvFeatureConfig+0x14c>)
 800326a:	4013      	ands	r3, r2
 800326c:	0019      	movs	r1, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	2208      	movs	r2, #8
 8003280:	4013      	ands	r3, r2
 8003282:	d00b      	beq.n	800329c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	4a34      	ldr	r2, [pc, #208]	; (800335c <UART_AdvFeatureConfig+0x150>)
 800328c:	4013      	ands	r3, r2
 800328e:	0019      	movs	r1, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	2210      	movs	r2, #16
 80032a2:	4013      	ands	r3, r2
 80032a4:	d00b      	beq.n	80032be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	4a2c      	ldr	r2, [pc, #176]	; (8003360 <UART_AdvFeatureConfig+0x154>)
 80032ae:	4013      	ands	r3, r2
 80032b0:	0019      	movs	r1, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	2220      	movs	r2, #32
 80032c4:	4013      	ands	r3, r2
 80032c6:	d00b      	beq.n	80032e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	4a25      	ldr	r2, [pc, #148]	; (8003364 <UART_AdvFeatureConfig+0x158>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	0019      	movs	r1, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	2240      	movs	r2, #64	; 0x40
 80032e6:	4013      	ands	r3, r2
 80032e8:	d01d      	beq.n	8003326 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	4a1d      	ldr	r2, [pc, #116]	; (8003368 <UART_AdvFeatureConfig+0x15c>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	0019      	movs	r1, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003306:	2380      	movs	r3, #128	; 0x80
 8003308:	035b      	lsls	r3, r3, #13
 800330a:	429a      	cmp	r2, r3
 800330c:	d10b      	bne.n	8003326 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	4a15      	ldr	r2, [pc, #84]	; (800336c <UART_AdvFeatureConfig+0x160>)
 8003316:	4013      	ands	r3, r2
 8003318:	0019      	movs	r1, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	2280      	movs	r2, #128	; 0x80
 800332c:	4013      	ands	r3, r2
 800332e:	d00b      	beq.n	8003348 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4a0e      	ldr	r2, [pc, #56]	; (8003370 <UART_AdvFeatureConfig+0x164>)
 8003338:	4013      	ands	r3, r2
 800333a:	0019      	movs	r1, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	605a      	str	r2, [r3, #4]
  }
}
 8003348:	46c0      	nop			; (mov r8, r8)
 800334a:	46bd      	mov	sp, r7
 800334c:	b002      	add	sp, #8
 800334e:	bd80      	pop	{r7, pc}
 8003350:	fffdffff 	.word	0xfffdffff
 8003354:	fffeffff 	.word	0xfffeffff
 8003358:	fffbffff 	.word	0xfffbffff
 800335c:	ffff7fff 	.word	0xffff7fff
 8003360:	ffffefff 	.word	0xffffefff
 8003364:	ffffdfff 	.word	0xffffdfff
 8003368:	ffefffff 	.word	0xffefffff
 800336c:	ff9fffff 	.word	0xff9fffff
 8003370:	fff7ffff 	.word	0xfff7ffff

08003374 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b092      	sub	sp, #72	; 0x48
 8003378:	af02      	add	r7, sp, #8
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2284      	movs	r2, #132	; 0x84
 8003380:	2100      	movs	r1, #0
 8003382:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003384:	f7fd fdd6 	bl	8000f34 <HAL_GetTick>
 8003388:	0003      	movs	r3, r0
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2208      	movs	r2, #8
 8003394:	4013      	ands	r3, r2
 8003396:	2b08      	cmp	r3, #8
 8003398:	d12c      	bne.n	80033f4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800339a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800339c:	2280      	movs	r2, #128	; 0x80
 800339e:	0391      	lsls	r1, r2, #14
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	4a46      	ldr	r2, [pc, #280]	; (80034bc <UART_CheckIdleState+0x148>)
 80033a4:	9200      	str	r2, [sp, #0]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f000 f88c 	bl	80034c4 <UART_WaitOnFlagUntilTimeout>
 80033ac:	1e03      	subs	r3, r0, #0
 80033ae:	d021      	beq.n	80033f4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033b0:	f3ef 8310 	mrs	r3, PRIMASK
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80033b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80033ba:	2301      	movs	r3, #1
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c0:	f383 8810 	msr	PRIMASK, r3
}
 80033c4:	46c0      	nop			; (mov r8, r8)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2180      	movs	r1, #128	; 0x80
 80033d2:	438a      	bics	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033dc:	f383 8810 	msr	PRIMASK, r3
}
 80033e0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2220      	movs	r2, #32
 80033e6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2278      	movs	r2, #120	; 0x78
 80033ec:	2100      	movs	r1, #0
 80033ee:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e05f      	b.n	80034b4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2204      	movs	r2, #4
 80033fc:	4013      	ands	r3, r2
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d146      	bne.n	8003490 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003404:	2280      	movs	r2, #128	; 0x80
 8003406:	03d1      	lsls	r1, r2, #15
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	4a2c      	ldr	r2, [pc, #176]	; (80034bc <UART_CheckIdleState+0x148>)
 800340c:	9200      	str	r2, [sp, #0]
 800340e:	2200      	movs	r2, #0
 8003410:	f000 f858 	bl	80034c4 <UART_WaitOnFlagUntilTimeout>
 8003414:	1e03      	subs	r3, r0, #0
 8003416:	d03b      	beq.n	8003490 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003418:	f3ef 8310 	mrs	r3, PRIMASK
 800341c:	60fb      	str	r3, [r7, #12]
  return(result);
 800341e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003420:	637b      	str	r3, [r7, #52]	; 0x34
 8003422:	2301      	movs	r3, #1
 8003424:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f383 8810 	msr	PRIMASK, r3
}
 800342c:	46c0      	nop			; (mov r8, r8)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4921      	ldr	r1, [pc, #132]	; (80034c0 <UART_CheckIdleState+0x14c>)
 800343a:	400a      	ands	r2, r1
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003440:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f383 8810 	msr	PRIMASK, r3
}
 8003448:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800344a:	f3ef 8310 	mrs	r3, PRIMASK
 800344e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003450:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003452:	633b      	str	r3, [r7, #48]	; 0x30
 8003454:	2301      	movs	r3, #1
 8003456:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f383 8810 	msr	PRIMASK, r3
}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2101      	movs	r1, #1
 800346c:	438a      	bics	r2, r1
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003472:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	f383 8810 	msr	PRIMASK, r3
}
 800347a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2280      	movs	r2, #128	; 0x80
 8003480:	2120      	movs	r1, #32
 8003482:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2278      	movs	r2, #120	; 0x78
 8003488:	2100      	movs	r1, #0
 800348a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e011      	b.n	80034b4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2220      	movs	r2, #32
 8003494:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2280      	movs	r2, #128	; 0x80
 800349a:	2120      	movs	r1, #32
 800349c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2278      	movs	r2, #120	; 0x78
 80034ae:	2100      	movs	r1, #0
 80034b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	0018      	movs	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b010      	add	sp, #64	; 0x40
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	01ffffff 	.word	0x01ffffff
 80034c0:	fffffedf 	.word	0xfffffedf

080034c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	603b      	str	r3, [r7, #0]
 80034d0:	1dfb      	adds	r3, r7, #7
 80034d2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034d4:	e04b      	b.n	800356e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	3301      	adds	r3, #1
 80034da:	d048      	beq.n	800356e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034dc:	f7fd fd2a 	bl	8000f34 <HAL_GetTick>
 80034e0:	0002      	movs	r2, r0
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d302      	bcc.n	80034f2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e04b      	b.n	800358e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2204      	movs	r2, #4
 80034fe:	4013      	ands	r3, r2
 8003500:	d035      	beq.n	800356e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	2208      	movs	r2, #8
 800350a:	4013      	ands	r3, r2
 800350c:	2b08      	cmp	r3, #8
 800350e:	d111      	bne.n	8003534 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2208      	movs	r2, #8
 8003516:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	0018      	movs	r0, r3
 800351c:	f000 f900 	bl	8003720 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2284      	movs	r2, #132	; 0x84
 8003524:	2108      	movs	r1, #8
 8003526:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2278      	movs	r2, #120	; 0x78
 800352c:	2100      	movs	r1, #0
 800352e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e02c      	b.n	800358e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	69da      	ldr	r2, [r3, #28]
 800353a:	2380      	movs	r3, #128	; 0x80
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	401a      	ands	r2, r3
 8003540:	2380      	movs	r3, #128	; 0x80
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	429a      	cmp	r2, r3
 8003546:	d112      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2280      	movs	r2, #128	; 0x80
 800354e:	0112      	lsls	r2, r2, #4
 8003550:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	0018      	movs	r0, r3
 8003556:	f000 f8e3 	bl	8003720 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2284      	movs	r2, #132	; 0x84
 800355e:	2120      	movs	r1, #32
 8003560:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2278      	movs	r2, #120	; 0x78
 8003566:	2100      	movs	r1, #0
 8003568:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e00f      	b.n	800358e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	4013      	ands	r3, r2
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	425a      	negs	r2, r3
 800357e:	4153      	adcs	r3, r2
 8003580:	b2db      	uxtb	r3, r3
 8003582:	001a      	movs	r2, r3
 8003584:	1dfb      	adds	r3, r7, #7
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d0a4      	beq.n	80034d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	0018      	movs	r0, r3
 8003590:	46bd      	mov	sp, r7
 8003592:	b004      	add	sp, #16
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b090      	sub	sp, #64	; 0x40
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	1dbb      	adds	r3, r7, #6
 80035a4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	1dba      	adds	r2, r7, #6
 80035b0:	2158      	movs	r1, #88	; 0x58
 80035b2:	8812      	ldrh	r2, [r2, #0]
 80035b4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2284      	movs	r2, #132	; 0x84
 80035ba:	2100      	movs	r1, #0
 80035bc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2280      	movs	r2, #128	; 0x80
 80035c2:	2122      	movs	r1, #34	; 0x22
 80035c4:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d028      	beq.n	8003620 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d2:	4a3e      	ldr	r2, [pc, #248]	; (80036cc <UART_Start_Receive_DMA+0x134>)
 80035d4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035da:	4a3d      	ldr	r2, [pc, #244]	; (80036d0 <UART_Start_Receive_DMA+0x138>)
 80035dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e2:	4a3c      	ldr	r2, [pc, #240]	; (80036d4 <UART_Start_Receive_DMA+0x13c>)
 80035e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ea:	2200      	movs	r2, #0
 80035ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	3324      	adds	r3, #36	; 0x24
 80035f8:	0019      	movs	r1, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fe:	001a      	movs	r2, r3
 8003600:	1dbb      	adds	r3, r7, #6
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	f7fd fe0f 	bl	8001226 <HAL_DMA_Start_IT>
 8003608:	1e03      	subs	r3, r0, #0
 800360a:	d009      	beq.n	8003620 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2284      	movs	r2, #132	; 0x84
 8003610:	2110      	movs	r1, #16
 8003612:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2280      	movs	r2, #128	; 0x80
 8003618:	2120      	movs	r1, #32
 800361a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e050      	b.n	80036c2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d019      	beq.n	800365c <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003628:	f3ef 8310 	mrs	r3, PRIMASK
 800362c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003632:	2301      	movs	r3, #1
 8003634:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003638:	f383 8810 	msr	PRIMASK, r3
}
 800363c:	46c0      	nop			; (mov r8, r8)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2180      	movs	r1, #128	; 0x80
 800364a:	0049      	lsls	r1, r1, #1
 800364c:	430a      	orrs	r2, r1
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003652:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003656:	f383 8810 	msr	PRIMASK, r3
}
 800365a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800365c:	f3ef 8310 	mrs	r3, PRIMASK
 8003660:	613b      	str	r3, [r7, #16]
  return(result);
 8003662:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003664:	63bb      	str	r3, [r7, #56]	; 0x38
 8003666:	2301      	movs	r3, #1
 8003668:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f383 8810 	msr	PRIMASK, r3
}
 8003670:	46c0      	nop			; (mov r8, r8)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2101      	movs	r1, #1
 800367e:	430a      	orrs	r2, r1
 8003680:	609a      	str	r2, [r3, #8]
 8003682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003684:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	f383 8810 	msr	PRIMASK, r3
}
 800368c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800368e:	f3ef 8310 	mrs	r3, PRIMASK
 8003692:	61fb      	str	r3, [r7, #28]
  return(result);
 8003694:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003696:	637b      	str	r3, [r7, #52]	; 0x34
 8003698:	2301      	movs	r3, #1
 800369a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	f383 8810 	msr	PRIMASK, r3
}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2140      	movs	r1, #64	; 0x40
 80036b0:	430a      	orrs	r2, r1
 80036b2:	609a      	str	r2, [r3, #8]
 80036b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	f383 8810 	msr	PRIMASK, r3
}
 80036be:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	0018      	movs	r0, r3
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b010      	add	sp, #64	; 0x40
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	0800389d 	.word	0x0800389d
 80036d0:	080039c9 	.word	0x080039c9
 80036d4:	08003a0b 	.word	0x08003a0b

080036d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036e0:	f3ef 8310 	mrs	r3, PRIMASK
 80036e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80036e6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	2301      	movs	r3, #1
 80036ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f383 8810 	msr	PRIMASK, r3
}
 80036f4:	46c0      	nop			; (mov r8, r8)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	21c0      	movs	r1, #192	; 0xc0
 8003702:	438a      	bics	r2, r1
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f383 8810 	msr	PRIMASK, r3
}
 8003710:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2220      	movs	r2, #32
 8003716:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8003718:	46c0      	nop			; (mov r8, r8)
 800371a:	46bd      	mov	sp, r7
 800371c:	b006      	add	sp, #24
 800371e:	bd80      	pop	{r7, pc}

08003720 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08e      	sub	sp, #56	; 0x38
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003728:	f3ef 8310 	mrs	r3, PRIMASK
 800372c:	617b      	str	r3, [r7, #20]
  return(result);
 800372e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003730:	637b      	str	r3, [r7, #52]	; 0x34
 8003732:	2301      	movs	r3, #1
 8003734:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	f383 8810 	msr	PRIMASK, r3
}
 800373c:	46c0      	nop			; (mov r8, r8)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4926      	ldr	r1, [pc, #152]	; (80037e4 <UART_EndRxTransfer+0xc4>)
 800374a:	400a      	ands	r2, r1
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003750:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	f383 8810 	msr	PRIMASK, r3
}
 8003758:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800375a:	f3ef 8310 	mrs	r3, PRIMASK
 800375e:	623b      	str	r3, [r7, #32]
  return(result);
 8003760:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003762:	633b      	str	r3, [r7, #48]	; 0x30
 8003764:	2301      	movs	r3, #1
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	f383 8810 	msr	PRIMASK, r3
}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2101      	movs	r1, #1
 800377c:	438a      	bics	r2, r1
 800377e:	609a      	str	r2, [r3, #8]
 8003780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003782:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003786:	f383 8810 	msr	PRIMASK, r3
}
 800378a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003790:	2b01      	cmp	r3, #1
 8003792:	d118      	bne.n	80037c6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003794:	f3ef 8310 	mrs	r3, PRIMASK
 8003798:	60bb      	str	r3, [r7, #8]
  return(result);
 800379a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800379c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800379e:	2301      	movs	r3, #1
 80037a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f383 8810 	msr	PRIMASK, r3
}
 80037a8:	46c0      	nop			; (mov r8, r8)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2110      	movs	r1, #16
 80037b6:	438a      	bics	r2, r1
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f383 8810 	msr	PRIMASK, r3
}
 80037c4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2280      	movs	r2, #128	; 0x80
 80037ca:	2120      	movs	r1, #32
 80037cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	46bd      	mov	sp, r7
 80037de:	b00e      	add	sp, #56	; 0x38
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	fffffedf 	.word	0xfffffedf

080037e8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08c      	sub	sp, #48	; 0x30
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	2b20      	cmp	r3, #32
 80037fc:	d035      	beq.n	800386a <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 80037fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003800:	2252      	movs	r2, #82	; 0x52
 8003802:	2100      	movs	r1, #0
 8003804:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003806:	f3ef 8310 	mrs	r3, PRIMASK
 800380a:	60fb      	str	r3, [r7, #12]
  return(result);
 800380c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800380e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003810:	2301      	movs	r3, #1
 8003812:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f383 8810 	msr	PRIMASK, r3
}
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689a      	ldr	r2, [r3, #8]
 8003822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2180      	movs	r1, #128	; 0x80
 8003828:	438a      	bics	r2, r1
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f383 8810 	msr	PRIMASK, r3
}
 8003836:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003838:	f3ef 8310 	mrs	r3, PRIMASK
 800383c:	61bb      	str	r3, [r7, #24]
  return(result);
 800383e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
 8003842:	2301      	movs	r3, #1
 8003844:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f383 8810 	msr	PRIMASK, r3
}
 800384c:	46c0      	nop			; (mov r8, r8)
 800384e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2140      	movs	r1, #64	; 0x40
 800385a:	430a      	orrs	r2, r1
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	f383 8810 	msr	PRIMASK, r3
}
 8003868:	e004      	b.n	8003874 <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800386a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386c:	0018      	movs	r0, r3
 800386e:	f7fc fd5b 	bl	8000328 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	46c0      	nop			; (mov r8, r8)
 8003876:	46bd      	mov	sp, r7
 8003878:	b00c      	add	sp, #48	; 0x30
 800387a:	bd80      	pop	{r7, pc}

0800387c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	0018      	movs	r0, r3
 800388e:	f7ff fb5a 	bl	8002f46 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	46bd      	mov	sp, r7
 8003896:	b004      	add	sp, #16
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b094      	sub	sp, #80	; 0x50
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	2b20      	cmp	r3, #32
 80038b0:	d06f      	beq.n	8003992 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 80038b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038b4:	225a      	movs	r2, #90	; 0x5a
 80038b6:	2100      	movs	r1, #0
 80038b8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ba:	f3ef 8310 	mrs	r3, PRIMASK
 80038be:	61bb      	str	r3, [r7, #24]
  return(result);
 80038c0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80038c4:	2301      	movs	r3, #1
 80038c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f383 8810 	msr	PRIMASK, r3
}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	493a      	ldr	r1, [pc, #232]	; (80039c4 <UART_DMAReceiveCplt+0x128>)
 80038dc:	400a      	ands	r2, r1
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038e2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	f383 8810 	msr	PRIMASK, r3
}
 80038ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ec:	f3ef 8310 	mrs	r3, PRIMASK
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f4:	647b      	str	r3, [r7, #68]	; 0x44
 80038f6:	2301      	movs	r3, #1
 80038f8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fc:	f383 8810 	msr	PRIMASK, r3
}
 8003900:	46c0      	nop			; (mov r8, r8)
 8003902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2101      	movs	r1, #1
 800390e:	438a      	bics	r2, r1
 8003910:	609a      	str	r2, [r3, #8]
 8003912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003914:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003918:	f383 8810 	msr	PRIMASK, r3
}
 800391c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800391e:	f3ef 8310 	mrs	r3, PRIMASK
 8003922:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003924:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003926:	643b      	str	r3, [r7, #64]	; 0x40
 8003928:	2301      	movs	r3, #1
 800392a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800392c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800392e:	f383 8810 	msr	PRIMASK, r3
}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2140      	movs	r1, #64	; 0x40
 8003940:	438a      	bics	r2, r1
 8003942:	609a      	str	r2, [r3, #8]
 8003944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003946:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394a:	f383 8810 	msr	PRIMASK, r3
}
 800394e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003952:	2280      	movs	r2, #128	; 0x80
 8003954:	2120      	movs	r1, #32
 8003956:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800395a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800395c:	2b01      	cmp	r3, #1
 800395e:	d118      	bne.n	8003992 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003960:	f3ef 8310 	mrs	r3, PRIMASK
 8003964:	60fb      	str	r3, [r7, #12]
  return(result);
 8003966:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800396a:	2301      	movs	r3, #1
 800396c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f383 8810 	msr	PRIMASK, r3
}
 8003974:	46c0      	nop			; (mov r8, r8)
 8003976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2110      	movs	r1, #16
 8003982:	438a      	bics	r2, r1
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003988:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f383 8810 	msr	PRIMASK, r3
}
 8003990:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003994:	2200      	movs	r2, #0
 8003996:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800399a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800399c:	2b01      	cmp	r3, #1
 800399e:	d108      	bne.n	80039b2 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a2:	2258      	movs	r2, #88	; 0x58
 80039a4:	5a9a      	ldrh	r2, [r3, r2]
 80039a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a8:	0011      	movs	r1, r2
 80039aa:	0018      	movs	r0, r3
 80039ac:	f7ff fae3 	bl	8002f76 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80039b0:	e003      	b.n	80039ba <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80039b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039b4:	0018      	movs	r0, r3
 80039b6:	f7fc fc33 	bl	8000220 <HAL_UART_RxCpltCallback>
}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	b014      	add	sp, #80	; 0x50
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	fffffeff 	.word	0xfffffeff

080039c8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d10a      	bne.n	80039fa <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2258      	movs	r2, #88	; 0x58
 80039e8:	5a9b      	ldrh	r3, [r3, r2]
 80039ea:	085b      	lsrs	r3, r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	0011      	movs	r1, r2
 80039f2:	0018      	movs	r0, r3
 80039f4:	f7ff fabf 	bl	8002f76 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80039f8:	e003      	b.n	8003a02 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	0018      	movs	r0, r3
 80039fe:	f7ff faaa 	bl	8002f56 <HAL_UART_RxHalfCpltCallback>
}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	46bd      	mov	sp, r7
 8003a06:	b004      	add	sp, #16
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b086      	sub	sp, #24
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a1c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2280      	movs	r2, #128	; 0x80
 8003a22:	589b      	ldr	r3, [r3, r2]
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	2280      	movs	r2, #128	; 0x80
 8003a2e:	4013      	ands	r3, r2
 8003a30:	2b80      	cmp	r3, #128	; 0x80
 8003a32:	d10a      	bne.n	8003a4a <UART_DMAError+0x40>
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	2b21      	cmp	r3, #33	; 0x21
 8003a38:	d107      	bne.n	8003a4a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2252      	movs	r2, #82	; 0x52
 8003a3e:	2100      	movs	r1, #0
 8003a40:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	0018      	movs	r0, r3
 8003a46:	f7ff fe47 	bl	80036d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2240      	movs	r2, #64	; 0x40
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b40      	cmp	r3, #64	; 0x40
 8003a56:	d10a      	bne.n	8003a6e <UART_DMAError+0x64>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b22      	cmp	r3, #34	; 0x22
 8003a5c:	d107      	bne.n	8003a6e <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	225a      	movs	r2, #90	; 0x5a
 8003a62:	2100      	movs	r1, #0
 8003a64:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f7ff fe59 	bl	8003720 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2284      	movs	r2, #132	; 0x84
 8003a72:	589b      	ldr	r3, [r3, r2]
 8003a74:	2210      	movs	r2, #16
 8003a76:	431a      	orrs	r2, r3
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2184      	movs	r1, #132	; 0x84
 8003a7c:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	0018      	movs	r0, r3
 8003a82:	f7ff fa70 	bl	8002f66 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	b006      	add	sp, #24
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e05b      	b.n	8003b60 <HAL_RS485Ex_Init+0xd0>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d107      	bne.n	8003ac0 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2278      	movs	r2, #120	; 0x78
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	0018      	movs	r0, r3
 8003abc:	f7fc ffd4 	bl	8000a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2224      	movs	r2, #36	; 0x24
 8003ac4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	438a      	bics	r2, r1
 8003ad4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f7ff fa57 	bl	8002f8c <UART_SetConfig>
 8003ade:	0003      	movs	r3, r0
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e03b      	b.n	8003b60 <HAL_RS485Ex_Init+0xd0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_RS485Ex_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	0018      	movs	r0, r3
 8003af4:	f7ff fb8a 	bl	800320c <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2180      	movs	r1, #128	; 0x80
 8003b04:	01c9      	lsls	r1, r1, #7
 8003b06:	430a      	orrs	r2, r1
 8003b08:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	4a15      	ldr	r2, [pc, #84]	; (8003b68 <HAL_RS485Ex_Init+0xd8>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	0019      	movs	r1, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	055b      	lsls	r3, r3, #21
 8003b24:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	041b      	lsls	r3, r3, #16
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a0d      	ldr	r2, [pc, #52]	; (8003b6c <HAL_RS485Ex_Init+0xdc>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	0019      	movs	r1, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2101      	movs	r1, #1
 8003b52:	430a      	orrs	r2, r1
 8003b54:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f7ff fc0b 	bl	8003374 <UART_CheckIdleState>
 8003b5e:	0003      	movs	r3, r0
}
 8003b60:	0018      	movs	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b006      	add	sp, #24
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	ffff7fff 	.word	0xffff7fff
 8003b6c:	fc00ffff 	.word	0xfc00ffff

08003b70 <malloc>:
 8003b70:	b510      	push	{r4, lr}
 8003b72:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <malloc+0x10>)
 8003b74:	0001      	movs	r1, r0
 8003b76:	6818      	ldr	r0, [r3, #0]
 8003b78:	f000 f830 	bl	8003bdc <_malloc_r>
 8003b7c:	bd10      	pop	{r4, pc}
 8003b7e:	46c0      	nop			; (mov r8, r8)
 8003b80:	20000060 	.word	0x20000060

08003b84 <free>:
 8003b84:	b510      	push	{r4, lr}
 8003b86:	4b03      	ldr	r3, [pc, #12]	; (8003b94 <free+0x10>)
 8003b88:	0001      	movs	r1, r0
 8003b8a:	6818      	ldr	r0, [r3, #0]
 8003b8c:	f000 f908 	bl	8003da0 <_free_r>
 8003b90:	bd10      	pop	{r4, pc}
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	20000060 	.word	0x20000060

08003b98 <sbrk_aligned>:
 8003b98:	b570      	push	{r4, r5, r6, lr}
 8003b9a:	4e0f      	ldr	r6, [pc, #60]	; (8003bd8 <sbrk_aligned+0x40>)
 8003b9c:	000d      	movs	r5, r1
 8003b9e:	6831      	ldr	r1, [r6, #0]
 8003ba0:	0004      	movs	r4, r0
 8003ba2:	2900      	cmp	r1, #0
 8003ba4:	d102      	bne.n	8003bac <sbrk_aligned+0x14>
 8003ba6:	f000 f8b3 	bl	8003d10 <_sbrk_r>
 8003baa:	6030      	str	r0, [r6, #0]
 8003bac:	0029      	movs	r1, r5
 8003bae:	0020      	movs	r0, r4
 8003bb0:	f000 f8ae 	bl	8003d10 <_sbrk_r>
 8003bb4:	1c43      	adds	r3, r0, #1
 8003bb6:	d00a      	beq.n	8003bce <sbrk_aligned+0x36>
 8003bb8:	2303      	movs	r3, #3
 8003bba:	1cc5      	adds	r5, r0, #3
 8003bbc:	439d      	bics	r5, r3
 8003bbe:	42a8      	cmp	r0, r5
 8003bc0:	d007      	beq.n	8003bd2 <sbrk_aligned+0x3a>
 8003bc2:	1a29      	subs	r1, r5, r0
 8003bc4:	0020      	movs	r0, r4
 8003bc6:	f000 f8a3 	bl	8003d10 <_sbrk_r>
 8003bca:	3001      	adds	r0, #1
 8003bcc:	d101      	bne.n	8003bd2 <sbrk_aligned+0x3a>
 8003bce:	2501      	movs	r5, #1
 8003bd0:	426d      	negs	r5, r5
 8003bd2:	0028      	movs	r0, r5
 8003bd4:	bd70      	pop	{r4, r5, r6, pc}
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	20000314 	.word	0x20000314

08003bdc <_malloc_r>:
 8003bdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bde:	2203      	movs	r2, #3
 8003be0:	1ccb      	adds	r3, r1, #3
 8003be2:	4393      	bics	r3, r2
 8003be4:	3308      	adds	r3, #8
 8003be6:	0006      	movs	r6, r0
 8003be8:	001f      	movs	r7, r3
 8003bea:	2b0c      	cmp	r3, #12
 8003bec:	d238      	bcs.n	8003c60 <_malloc_r+0x84>
 8003bee:	270c      	movs	r7, #12
 8003bf0:	42b9      	cmp	r1, r7
 8003bf2:	d837      	bhi.n	8003c64 <_malloc_r+0x88>
 8003bf4:	0030      	movs	r0, r6
 8003bf6:	f000 f873 	bl	8003ce0 <__malloc_lock>
 8003bfa:	4b38      	ldr	r3, [pc, #224]	; (8003cdc <_malloc_r+0x100>)
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	001c      	movs	r4, r3
 8003c02:	2c00      	cmp	r4, #0
 8003c04:	d133      	bne.n	8003c6e <_malloc_r+0x92>
 8003c06:	0039      	movs	r1, r7
 8003c08:	0030      	movs	r0, r6
 8003c0a:	f7ff ffc5 	bl	8003b98 <sbrk_aligned>
 8003c0e:	0004      	movs	r4, r0
 8003c10:	1c43      	adds	r3, r0, #1
 8003c12:	d15e      	bne.n	8003cd2 <_malloc_r+0xf6>
 8003c14:	9b00      	ldr	r3, [sp, #0]
 8003c16:	681c      	ldr	r4, [r3, #0]
 8003c18:	0025      	movs	r5, r4
 8003c1a:	2d00      	cmp	r5, #0
 8003c1c:	d14e      	bne.n	8003cbc <_malloc_r+0xe0>
 8003c1e:	2c00      	cmp	r4, #0
 8003c20:	d051      	beq.n	8003cc6 <_malloc_r+0xea>
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	0029      	movs	r1, r5
 8003c26:	18e3      	adds	r3, r4, r3
 8003c28:	0030      	movs	r0, r6
 8003c2a:	9301      	str	r3, [sp, #4]
 8003c2c:	f000 f870 	bl	8003d10 <_sbrk_r>
 8003c30:	9b01      	ldr	r3, [sp, #4]
 8003c32:	4283      	cmp	r3, r0
 8003c34:	d147      	bne.n	8003cc6 <_malloc_r+0xea>
 8003c36:	6823      	ldr	r3, [r4, #0]
 8003c38:	0030      	movs	r0, r6
 8003c3a:	1aff      	subs	r7, r7, r3
 8003c3c:	0039      	movs	r1, r7
 8003c3e:	f7ff ffab 	bl	8003b98 <sbrk_aligned>
 8003c42:	3001      	adds	r0, #1
 8003c44:	d03f      	beq.n	8003cc6 <_malloc_r+0xea>
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	19db      	adds	r3, r3, r7
 8003c4a:	6023      	str	r3, [r4, #0]
 8003c4c:	9b00      	ldr	r3, [sp, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d040      	beq.n	8003cd6 <_malloc_r+0xfa>
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	42a2      	cmp	r2, r4
 8003c58:	d133      	bne.n	8003cc2 <_malloc_r+0xe6>
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	605a      	str	r2, [r3, #4]
 8003c5e:	e014      	b.n	8003c8a <_malloc_r+0xae>
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	dac5      	bge.n	8003bf0 <_malloc_r+0x14>
 8003c64:	230c      	movs	r3, #12
 8003c66:	2500      	movs	r5, #0
 8003c68:	6033      	str	r3, [r6, #0]
 8003c6a:	0028      	movs	r0, r5
 8003c6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c6e:	6821      	ldr	r1, [r4, #0]
 8003c70:	1bc9      	subs	r1, r1, r7
 8003c72:	d420      	bmi.n	8003cb6 <_malloc_r+0xda>
 8003c74:	290b      	cmp	r1, #11
 8003c76:	d918      	bls.n	8003caa <_malloc_r+0xce>
 8003c78:	19e2      	adds	r2, r4, r7
 8003c7a:	6027      	str	r7, [r4, #0]
 8003c7c:	42a3      	cmp	r3, r4
 8003c7e:	d112      	bne.n	8003ca6 <_malloc_r+0xca>
 8003c80:	9b00      	ldr	r3, [sp, #0]
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	6863      	ldr	r3, [r4, #4]
 8003c86:	6011      	str	r1, [r2, #0]
 8003c88:	6053      	str	r3, [r2, #4]
 8003c8a:	0030      	movs	r0, r6
 8003c8c:	0025      	movs	r5, r4
 8003c8e:	f000 f82f 	bl	8003cf0 <__malloc_unlock>
 8003c92:	2207      	movs	r2, #7
 8003c94:	350b      	adds	r5, #11
 8003c96:	1d23      	adds	r3, r4, #4
 8003c98:	4395      	bics	r5, r2
 8003c9a:	1aea      	subs	r2, r5, r3
 8003c9c:	429d      	cmp	r5, r3
 8003c9e:	d0e4      	beq.n	8003c6a <_malloc_r+0x8e>
 8003ca0:	1b5b      	subs	r3, r3, r5
 8003ca2:	50a3      	str	r3, [r4, r2]
 8003ca4:	e7e1      	b.n	8003c6a <_malloc_r+0x8e>
 8003ca6:	605a      	str	r2, [r3, #4]
 8003ca8:	e7ec      	b.n	8003c84 <_malloc_r+0xa8>
 8003caa:	6862      	ldr	r2, [r4, #4]
 8003cac:	42a3      	cmp	r3, r4
 8003cae:	d1d5      	bne.n	8003c5c <_malloc_r+0x80>
 8003cb0:	9b00      	ldr	r3, [sp, #0]
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	e7e9      	b.n	8003c8a <_malloc_r+0xae>
 8003cb6:	0023      	movs	r3, r4
 8003cb8:	6864      	ldr	r4, [r4, #4]
 8003cba:	e7a2      	b.n	8003c02 <_malloc_r+0x26>
 8003cbc:	002c      	movs	r4, r5
 8003cbe:	686d      	ldr	r5, [r5, #4]
 8003cc0:	e7ab      	b.n	8003c1a <_malloc_r+0x3e>
 8003cc2:	0013      	movs	r3, r2
 8003cc4:	e7c4      	b.n	8003c50 <_malloc_r+0x74>
 8003cc6:	230c      	movs	r3, #12
 8003cc8:	0030      	movs	r0, r6
 8003cca:	6033      	str	r3, [r6, #0]
 8003ccc:	f000 f810 	bl	8003cf0 <__malloc_unlock>
 8003cd0:	e7cb      	b.n	8003c6a <_malloc_r+0x8e>
 8003cd2:	6027      	str	r7, [r4, #0]
 8003cd4:	e7d9      	b.n	8003c8a <_malloc_r+0xae>
 8003cd6:	605b      	str	r3, [r3, #4]
 8003cd8:	deff      	udf	#255	; 0xff
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	20000310 	.word	0x20000310

08003ce0 <__malloc_lock>:
 8003ce0:	b510      	push	{r4, lr}
 8003ce2:	4802      	ldr	r0, [pc, #8]	; (8003cec <__malloc_lock+0xc>)
 8003ce4:	f000 f850 	bl	8003d88 <__retarget_lock_acquire_recursive>
 8003ce8:	bd10      	pop	{r4, pc}
 8003cea:	46c0      	nop			; (mov r8, r8)
 8003cec:	20000454 	.word	0x20000454

08003cf0 <__malloc_unlock>:
 8003cf0:	b510      	push	{r4, lr}
 8003cf2:	4802      	ldr	r0, [pc, #8]	; (8003cfc <__malloc_unlock+0xc>)
 8003cf4:	f000 f849 	bl	8003d8a <__retarget_lock_release_recursive>
 8003cf8:	bd10      	pop	{r4, pc}
 8003cfa:	46c0      	nop			; (mov r8, r8)
 8003cfc:	20000454 	.word	0x20000454

08003d00 <memset>:
 8003d00:	0003      	movs	r3, r0
 8003d02:	1882      	adds	r2, r0, r2
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d100      	bne.n	8003d0a <memset+0xa>
 8003d08:	4770      	bx	lr
 8003d0a:	7019      	strb	r1, [r3, #0]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	e7f9      	b.n	8003d04 <memset+0x4>

08003d10 <_sbrk_r>:
 8003d10:	2300      	movs	r3, #0
 8003d12:	b570      	push	{r4, r5, r6, lr}
 8003d14:	4d06      	ldr	r5, [pc, #24]	; (8003d30 <_sbrk_r+0x20>)
 8003d16:	0004      	movs	r4, r0
 8003d18:	0008      	movs	r0, r1
 8003d1a:	602b      	str	r3, [r5, #0]
 8003d1c:	f7fd f84a 	bl	8000db4 <_sbrk>
 8003d20:	1c43      	adds	r3, r0, #1
 8003d22:	d103      	bne.n	8003d2c <_sbrk_r+0x1c>
 8003d24:	682b      	ldr	r3, [r5, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d000      	beq.n	8003d2c <_sbrk_r+0x1c>
 8003d2a:	6023      	str	r3, [r4, #0]
 8003d2c:	bd70      	pop	{r4, r5, r6, pc}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	20000450 	.word	0x20000450

08003d34 <__errno>:
 8003d34:	4b01      	ldr	r3, [pc, #4]	; (8003d3c <__errno+0x8>)
 8003d36:	6818      	ldr	r0, [r3, #0]
 8003d38:	4770      	bx	lr
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	20000060 	.word	0x20000060

08003d40 <__libc_init_array>:
 8003d40:	b570      	push	{r4, r5, r6, lr}
 8003d42:	2600      	movs	r6, #0
 8003d44:	4c0c      	ldr	r4, [pc, #48]	; (8003d78 <__libc_init_array+0x38>)
 8003d46:	4d0d      	ldr	r5, [pc, #52]	; (8003d7c <__libc_init_array+0x3c>)
 8003d48:	1b64      	subs	r4, r4, r5
 8003d4a:	10a4      	asrs	r4, r4, #2
 8003d4c:	42a6      	cmp	r6, r4
 8003d4e:	d109      	bne.n	8003d64 <__libc_init_array+0x24>
 8003d50:	2600      	movs	r6, #0
 8003d52:	f000 f86f 	bl	8003e34 <_init>
 8003d56:	4c0a      	ldr	r4, [pc, #40]	; (8003d80 <__libc_init_array+0x40>)
 8003d58:	4d0a      	ldr	r5, [pc, #40]	; (8003d84 <__libc_init_array+0x44>)
 8003d5a:	1b64      	subs	r4, r4, r5
 8003d5c:	10a4      	asrs	r4, r4, #2
 8003d5e:	42a6      	cmp	r6, r4
 8003d60:	d105      	bne.n	8003d6e <__libc_init_array+0x2e>
 8003d62:	bd70      	pop	{r4, r5, r6, pc}
 8003d64:	00b3      	lsls	r3, r6, #2
 8003d66:	58eb      	ldr	r3, [r5, r3]
 8003d68:	4798      	blx	r3
 8003d6a:	3601      	adds	r6, #1
 8003d6c:	e7ee      	b.n	8003d4c <__libc_init_array+0xc>
 8003d6e:	00b3      	lsls	r3, r6, #2
 8003d70:	58eb      	ldr	r3, [r5, r3]
 8003d72:	4798      	blx	r3
 8003d74:	3601      	adds	r6, #1
 8003d76:	e7f2      	b.n	8003d5e <__libc_init_array+0x1e>
 8003d78:	08003e98 	.word	0x08003e98
 8003d7c:	08003e98 	.word	0x08003e98
 8003d80:	08003e9c 	.word	0x08003e9c
 8003d84:	08003e98 	.word	0x08003e98

08003d88 <__retarget_lock_acquire_recursive>:
 8003d88:	4770      	bx	lr

08003d8a <__retarget_lock_release_recursive>:
 8003d8a:	4770      	bx	lr

08003d8c <memcpy>:
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	b510      	push	{r4, lr}
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d100      	bne.n	8003d96 <memcpy+0xa>
 8003d94:	bd10      	pop	{r4, pc}
 8003d96:	5ccc      	ldrb	r4, [r1, r3]
 8003d98:	54c4      	strb	r4, [r0, r3]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	e7f8      	b.n	8003d90 <memcpy+0x4>
	...

08003da0 <_free_r>:
 8003da0:	b570      	push	{r4, r5, r6, lr}
 8003da2:	0005      	movs	r5, r0
 8003da4:	2900      	cmp	r1, #0
 8003da6:	d010      	beq.n	8003dca <_free_r+0x2a>
 8003da8:	1f0c      	subs	r4, r1, #4
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	da00      	bge.n	8003db2 <_free_r+0x12>
 8003db0:	18e4      	adds	r4, r4, r3
 8003db2:	0028      	movs	r0, r5
 8003db4:	f7ff ff94 	bl	8003ce0 <__malloc_lock>
 8003db8:	4a1d      	ldr	r2, [pc, #116]	; (8003e30 <_free_r+0x90>)
 8003dba:	6813      	ldr	r3, [r2, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d105      	bne.n	8003dcc <_free_r+0x2c>
 8003dc0:	6063      	str	r3, [r4, #4]
 8003dc2:	6014      	str	r4, [r2, #0]
 8003dc4:	0028      	movs	r0, r5
 8003dc6:	f7ff ff93 	bl	8003cf0 <__malloc_unlock>
 8003dca:	bd70      	pop	{r4, r5, r6, pc}
 8003dcc:	42a3      	cmp	r3, r4
 8003dce:	d908      	bls.n	8003de2 <_free_r+0x42>
 8003dd0:	6820      	ldr	r0, [r4, #0]
 8003dd2:	1821      	adds	r1, r4, r0
 8003dd4:	428b      	cmp	r3, r1
 8003dd6:	d1f3      	bne.n	8003dc0 <_free_r+0x20>
 8003dd8:	6819      	ldr	r1, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	1809      	adds	r1, r1, r0
 8003dde:	6021      	str	r1, [r4, #0]
 8003de0:	e7ee      	b.n	8003dc0 <_free_r+0x20>
 8003de2:	001a      	movs	r2, r3
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <_free_r+0x4e>
 8003dea:	42a3      	cmp	r3, r4
 8003dec:	d9f9      	bls.n	8003de2 <_free_r+0x42>
 8003dee:	6811      	ldr	r1, [r2, #0]
 8003df0:	1850      	adds	r0, r2, r1
 8003df2:	42a0      	cmp	r0, r4
 8003df4:	d10b      	bne.n	8003e0e <_free_r+0x6e>
 8003df6:	6820      	ldr	r0, [r4, #0]
 8003df8:	1809      	adds	r1, r1, r0
 8003dfa:	1850      	adds	r0, r2, r1
 8003dfc:	6011      	str	r1, [r2, #0]
 8003dfe:	4283      	cmp	r3, r0
 8003e00:	d1e0      	bne.n	8003dc4 <_free_r+0x24>
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	1841      	adds	r1, r0, r1
 8003e08:	6011      	str	r1, [r2, #0]
 8003e0a:	6053      	str	r3, [r2, #4]
 8003e0c:	e7da      	b.n	8003dc4 <_free_r+0x24>
 8003e0e:	42a0      	cmp	r0, r4
 8003e10:	d902      	bls.n	8003e18 <_free_r+0x78>
 8003e12:	230c      	movs	r3, #12
 8003e14:	602b      	str	r3, [r5, #0]
 8003e16:	e7d5      	b.n	8003dc4 <_free_r+0x24>
 8003e18:	6820      	ldr	r0, [r4, #0]
 8003e1a:	1821      	adds	r1, r4, r0
 8003e1c:	428b      	cmp	r3, r1
 8003e1e:	d103      	bne.n	8003e28 <_free_r+0x88>
 8003e20:	6819      	ldr	r1, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	1809      	adds	r1, r1, r0
 8003e26:	6021      	str	r1, [r4, #0]
 8003e28:	6063      	str	r3, [r4, #4]
 8003e2a:	6054      	str	r4, [r2, #4]
 8003e2c:	e7ca      	b.n	8003dc4 <_free_r+0x24>
 8003e2e:	46c0      	nop			; (mov r8, r8)
 8003e30:	20000310 	.word	0x20000310

08003e34 <_init>:
 8003e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3a:	bc08      	pop	{r3}
 8003e3c:	469e      	mov	lr, r3
 8003e3e:	4770      	bx	lr

08003e40 <_fini>:
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e46:	bc08      	pop	{r3}
 8003e48:	469e      	mov	lr, r3
 8003e4a:	4770      	bx	lr
