
RDM-DMX-Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d4c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08003e0c  08003e0c  00013e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e58  08003e58  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08003e58  08003e58  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e58  08003e58  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e58  08003e58  00013e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e5c  08003e5c  00013e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08003e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  20000064  08003ec4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  08003ec4  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d8dc  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002094  00000000  00000000  0002d9ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c90  00000000  00000000  0002fa40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e0  00000000  00000000  000306d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000219b  00000000  00000000  000310b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f931  00000000  00000000  0003324b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00071894  00000000  00000000  00042b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003054  00000000  00000000  000b4410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000b7464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000064 	.word	0x20000064
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003df4 	.word	0x08003df4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000068 	.word	0x20000068
 8000104:	08003df4 	.word	0x08003df4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_UART_RxCpltCallback>:
void stopTiming(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    if (currentFrame.data == NULL) {
 8000228:	4b57      	ldr	r3, [pc, #348]	; (8000388 <HAL_UART_RxCpltCallback+0x168>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d145      	bne.n	80002bc <HAL_UART_RxCpltCallback+0x9c>
    	// Cabeçalho e tamanho dos dados detectados, continua a leitura dos dados
		if ((uartBuffer[0] == header_sequence[0]) &&
 8000230:	4b56      	ldr	r3, [pc, #344]	; (800038c <HAL_UART_RxCpltCallback+0x16c>)
 8000232:	781a      	ldrb	r2, [r3, #0]
 8000234:	4b56      	ldr	r3, [pc, #344]	; (8000390 <HAL_UART_RxCpltCallback+0x170>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	429a      	cmp	r2, r3
 800023a:	d000      	beq.n	800023e <HAL_UART_RxCpltCallback+0x1e>
 800023c:	e09f      	b.n	800037e <HAL_UART_RxCpltCallback+0x15e>
			(uartBuffer[1] == header_sequence[1]) &&
 800023e:	4b53      	ldr	r3, [pc, #332]	; (800038c <HAL_UART_RxCpltCallback+0x16c>)
 8000240:	785a      	ldrb	r2, [r3, #1]
 8000242:	4b53      	ldr	r3, [pc, #332]	; (8000390 <HAL_UART_RxCpltCallback+0x170>)
 8000244:	785b      	ldrb	r3, [r3, #1]
		if ((uartBuffer[0] == header_sequence[0]) &&
 8000246:	429a      	cmp	r2, r3
 8000248:	d000      	beq.n	800024c <HAL_UART_RxCpltCallback+0x2c>
 800024a:	e098      	b.n	800037e <HAL_UART_RxCpltCallback+0x15e>
			(uartBuffer[2] == header_sequence[2])) {
 800024c:	4b4f      	ldr	r3, [pc, #316]	; (800038c <HAL_UART_RxCpltCallback+0x16c>)
 800024e:	789a      	ldrb	r2, [r3, #2]
 8000250:	4b4f      	ldr	r3, [pc, #316]	; (8000390 <HAL_UART_RxCpltCallback+0x170>)
 8000252:	789b      	ldrb	r3, [r3, #2]
			(uartBuffer[1] == header_sequence[1]) &&
 8000254:	429a      	cmp	r2, r3
 8000256:	d000      	beq.n	800025a <HAL_UART_RxCpltCallback+0x3a>
 8000258:	e091      	b.n	800037e <HAL_UART_RxCpltCallback+0x15e>
			// Cabeçalho detectado, continua a leitura do tamanho dos dados
			currentFrame.capacity = (uint16_t)((uartBuffer[3] << 8) | uartBuffer[4]);
 800025a:	4b4c      	ldr	r3, [pc, #304]	; (800038c <HAL_UART_RxCpltCallback+0x16c>)
 800025c:	78db      	ldrb	r3, [r3, #3]
 800025e:	021b      	lsls	r3, r3, #8
 8000260:	b21a      	sxth	r2, r3
 8000262:	4b4a      	ldr	r3, [pc, #296]	; (800038c <HAL_UART_RxCpltCallback+0x16c>)
 8000264:	791b      	ldrb	r3, [r3, #4]
 8000266:	b21b      	sxth	r3, r3
 8000268:	4313      	orrs	r3, r2
 800026a:	b21b      	sxth	r3, r3
 800026c:	b29a      	uxth	r2, r3
 800026e:	4b46      	ldr	r3, [pc, #280]	; (8000388 <HAL_UART_RxCpltCallback+0x168>)
 8000270:	809a      	strh	r2, [r3, #4]
			currentFrame.data = (uint8_t *)malloc(currentFrame.capacity);
 8000272:	4b45      	ldr	r3, [pc, #276]	; (8000388 <HAL_UART_RxCpltCallback+0x168>)
 8000274:	889b      	ldrh	r3, [r3, #4]
 8000276:	0018      	movs	r0, r3
 8000278:	f003 fc5a 	bl	8003b30 <malloc>
 800027c:	0003      	movs	r3, r0
 800027e:	001a      	movs	r2, r3
 8000280:	4b41      	ldr	r3, [pc, #260]	; (8000388 <HAL_UART_RxCpltCallback+0x168>)
 8000282:	601a      	str	r2, [r3, #0]
			if (currentFrame.data != NULL) {
 8000284:	4b40      	ldr	r3, [pc, #256]	; (8000388 <HAL_UART_RxCpltCallback+0x168>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d008      	beq.n	800029e <HAL_UART_RxCpltCallback+0x7e>
				// Continua a recepção dos dados e rodapé
				HAL_UART_Receive_DMA(huart, currentFrame.data, currentFrame.capacity);
 800028c:	4b3e      	ldr	r3, [pc, #248]	; (8000388 <HAL_UART_RxCpltCallback+0x168>)
 800028e:	6819      	ldr	r1, [r3, #0]
 8000290:	4b3d      	ldr	r3, [pc, #244]	; (8000388 <HAL_UART_RxCpltCallback+0x168>)
 8000292:	889a      	ldrh	r2, [r3, #4]
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	0018      	movs	r0, r3
 8000298:	f002 fdde 	bl	8002e58 <HAL_UART_Receive_DMA>
    	// Prepara nova recepção
    	free(currentFrame.data);
    	currentFrame.data = NULL;
    	HAL_UART_Receive_DMA(&huart1, uartBuffer, HEADER_BUFFER_SIZE);
    }
}
 800029c:	e06f      	b.n	800037e <HAL_UART_RxCpltCallback+0x15e>
				free(currentFrame.data);
 800029e:	4b3a      	ldr	r3, [pc, #232]	; (8000388 <HAL_UART_RxCpltCallback+0x168>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	0018      	movs	r0, r3
 80002a4:	f003 fc4e 	bl	8003b44 <free>
				currentFrame.data = NULL;
 80002a8:	4b37      	ldr	r3, [pc, #220]	; (8000388 <HAL_UART_RxCpltCallback+0x168>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
				HAL_UART_Receive_DMA(&huart1, uartBuffer, HEADER_BUFFER_SIZE);
 80002ae:	4937      	ldr	r1, [pc, #220]	; (800038c <HAL_UART_RxCpltCallback+0x16c>)
 80002b0:	4b38      	ldr	r3, [pc, #224]	; (8000394 <HAL_UART_RxCpltCallback+0x174>)
 80002b2:	2205      	movs	r2, #5
 80002b4:	0018      	movs	r0, r3
 80002b6:	f002 fdcf 	bl	8002e58 <HAL_UART_Receive_DMA>
}
 80002ba:	e060      	b.n	800037e <HAL_UART_RxCpltCallback+0x15e>
    	uint16_t DataSize = currentFrame.capacity;
 80002bc:	210e      	movs	r1, #14
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	4a31      	ldr	r2, [pc, #196]	; (8000388 <HAL_UART_RxCpltCallback+0x168>)
 80002c2:	8892      	ldrh	r2, [r2, #4]
 80002c4:	801a      	strh	r2, [r3, #0]
    	if ((currentFrame.data[DataSize-3] == tail_sequence[0]) &&
 80002c6:	4b30      	ldr	r3, [pc, #192]	; (8000388 <HAL_UART_RxCpltCallback+0x168>)
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	3b03      	subs	r3, #3
 80002d0:	18d3      	adds	r3, r2, r3
 80002d2:	781a      	ldrb	r2, [r3, #0]
 80002d4:	4b30      	ldr	r3, [pc, #192]	; (8000398 <HAL_UART_RxCpltCallback+0x178>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	429a      	cmp	r2, r3
 80002da:	d142      	bne.n	8000362 <HAL_UART_RxCpltCallback+0x142>
    		(currentFrame.data[DataSize-2] == tail_sequence[1]) &&
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <HAL_UART_RxCpltCallback+0x168>)
 80002de:	681a      	ldr	r2, [r3, #0]
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	881b      	ldrh	r3, [r3, #0]
 80002e4:	3b02      	subs	r3, #2
 80002e6:	18d3      	adds	r3, r2, r3
 80002e8:	781a      	ldrb	r2, [r3, #0]
 80002ea:	4b2b      	ldr	r3, [pc, #172]	; (8000398 <HAL_UART_RxCpltCallback+0x178>)
 80002ec:	785b      	ldrb	r3, [r3, #1]
    	if ((currentFrame.data[DataSize-3] == tail_sequence[0]) &&
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d137      	bne.n	8000362 <HAL_UART_RxCpltCallback+0x142>
			(currentFrame.data[DataSize-1] == tail_sequence[2])) {
 80002f2:	4b25      	ldr	r3, [pc, #148]	; (8000388 <HAL_UART_RxCpltCallback+0x168>)
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	881b      	ldrh	r3, [r3, #0]
 80002fa:	3b01      	subs	r3, #1
 80002fc:	18d3      	adds	r3, r2, r3
 80002fe:	781a      	ldrb	r2, [r3, #0]
 8000300:	4b25      	ldr	r3, [pc, #148]	; (8000398 <HAL_UART_RxCpltCallback+0x178>)
 8000302:	789b      	ldrb	r3, [r3, #2]
    		(currentFrame.data[DataSize-2] == tail_sequence[1]) &&
 8000304:	429a      	cmp	r2, r3
 8000306:	d12c      	bne.n	8000362 <HAL_UART_RxCpltCallback+0x142>
			if (DMX_buffer_toSend != NULL)
 8000308:	4b24      	ldr	r3, [pc, #144]	; (800039c <HAL_UART_RxCpltCallback+0x17c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d004      	beq.n	800031a <HAL_UART_RxCpltCallback+0xfa>
				free(DMX_buffer_toSend);
 8000310:	4b22      	ldr	r3, [pc, #136]	; (800039c <HAL_UART_RxCpltCallback+0x17c>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	0018      	movs	r0, r3
 8000316:	f003 fc15 	bl	8003b44 <free>
    		DMX_buffer_toSend_Size = currentFrame.capacity;
 800031a:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <HAL_UART_RxCpltCallback+0x168>)
 800031c:	889a      	ldrh	r2, [r3, #4]
 800031e:	4b20      	ldr	r3, [pc, #128]	; (80003a0 <HAL_UART_RxCpltCallback+0x180>)
 8000320:	801a      	strh	r2, [r3, #0]
    		DMX_buffer_toSend = (uint8_t *)malloc(DMX_buffer_toSend_Size);
 8000322:	4b1f      	ldr	r3, [pc, #124]	; (80003a0 <HAL_UART_RxCpltCallback+0x180>)
 8000324:	881b      	ldrh	r3, [r3, #0]
 8000326:	0018      	movs	r0, r3
 8000328:	f003 fc02 	bl	8003b30 <malloc>
 800032c:	0003      	movs	r3, r0
 800032e:	001a      	movs	r2, r3
 8000330:	4b1a      	ldr	r3, [pc, #104]	; (800039c <HAL_UART_RxCpltCallback+0x17c>)
 8000332:	601a      	str	r2, [r3, #0]
    		if (DMX_buffer_toSend != NULL) {
 8000334:	4b19      	ldr	r3, [pc, #100]	; (800039c <HAL_UART_RxCpltCallback+0x17c>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d00d      	beq.n	8000358 <HAL_UART_RxCpltCallback+0x138>
				memcpy(DMX_buffer_toSend, currentFrame.data, DMX_buffer_toSend_Size);
 800033c:	4b17      	ldr	r3, [pc, #92]	; (800039c <HAL_UART_RxCpltCallback+0x17c>)
 800033e:	6818      	ldr	r0, [r3, #0]
 8000340:	4b11      	ldr	r3, [pc, #68]	; (8000388 <HAL_UART_RxCpltCallback+0x168>)
 8000342:	6819      	ldr	r1, [r3, #0]
 8000344:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <HAL_UART_RxCpltCallback+0x180>)
 8000346:	881b      	ldrh	r3, [r3, #0]
 8000348:	001a      	movs	r2, r3
 800034a:	f003 fcff 	bl	8003d4c <memcpy>
				dmx_state = STATE_PREPARE;
 800034e:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <HAL_UART_RxCpltCallback+0x184>)
 8000350:	2201      	movs	r2, #1
 8000352:	701a      	strb	r2, [r3, #0]
				DMX_SendHandler();
 8000354:	f000 fa8e 	bl	8000874 <DMX_SendHandler>
    		dmx_state = STATE_PREPARE;
 8000358:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <HAL_UART_RxCpltCallback+0x184>)
 800035a:	2201      	movs	r2, #1
 800035c:	701a      	strb	r2, [r3, #0]
			DMX_SendHandler();
 800035e:	f000 fa89 	bl	8000874 <DMX_SendHandler>
    	free(currentFrame.data);
 8000362:	4b09      	ldr	r3, [pc, #36]	; (8000388 <HAL_UART_RxCpltCallback+0x168>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	0018      	movs	r0, r3
 8000368:	f003 fbec 	bl	8003b44 <free>
    	currentFrame.data = NULL;
 800036c:	4b06      	ldr	r3, [pc, #24]	; (8000388 <HAL_UART_RxCpltCallback+0x168>)
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
    	HAL_UART_Receive_DMA(&huart1, uartBuffer, HEADER_BUFFER_SIZE);
 8000372:	4906      	ldr	r1, [pc, #24]	; (800038c <HAL_UART_RxCpltCallback+0x16c>)
 8000374:	4b07      	ldr	r3, [pc, #28]	; (8000394 <HAL_UART_RxCpltCallback+0x174>)
 8000376:	2205      	movs	r2, #5
 8000378:	0018      	movs	r0, r3
 800037a:	f002 fd6d 	bl	8002e58 <HAL_UART_Receive_DMA>
}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	46bd      	mov	sp, r7
 8000382:	b004      	add	sp, #16
 8000384:	bd80      	pop	{r7, pc}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	200002f0 	.word	0x200002f0
 800038c:	200002f8 	.word	0x200002f8
 8000390:	20000000 	.word	0x20000000
 8000394:	20000110 	.word	0x20000110
 8000398:	20000004 	.word	0x20000004
 800039c:	20000300 	.word	0x20000300
 80003a0:	20000304 	.word	0x20000304
 80003a4:	200002ec 	.word	0x200002ec

080003a8 <HAL_UART_TxCpltCallback>:

// Função para lidar com a transmissão concluída
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
    // Este callback será chamado quando a transmissão for concluída
	DMX_Set_DE_LOW();  // Desabilitar o barramento DMX para escrita (Necessidade do RS485)
 80003b0:	2390      	movs	r3, #144	; 0x90
 80003b2:	05db      	lsls	r3, r3, #23
 80003b4:	2200      	movs	r2, #0
 80003b6:	2102      	movs	r1, #2
 80003b8:	0018      	movs	r0, r3
 80003ba:	f001 faa5 	bl	8001908 <HAL_GPIO_WritePin>
	dmx_state = STATE_IDLE;  // Transição para o estado de IDLE
 80003be:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <HAL_UART_TxCpltCallback+0x3c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]

	// libera o buffer de recebimento de dados
	DMX_buffer_toSend_Size = 0;
 80003c4:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <HAL_UART_TxCpltCallback+0x40>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	801a      	strh	r2, [r3, #0]
	free(DMX_buffer_toSend);
 80003ca:	4b08      	ldr	r3, [pc, #32]	; (80003ec <HAL_UART_TxCpltCallback+0x44>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	0018      	movs	r0, r3
 80003d0:	f003 fbb8 	bl	8003b44 <free>
	DMX_buffer_toSend = NULL;
 80003d4:	4b05      	ldr	r3, [pc, #20]	; (80003ec <HAL_UART_TxCpltCallback+0x44>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]

}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	46bd      	mov	sp, r7
 80003de:	b002      	add	sp, #8
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	200002ec 	.word	0x200002ec
 80003e8:	20000304 	.word	0x20000304
 80003ec:	20000300 	.word	0x20000300

080003f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b086      	sub	sp, #24
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f6:	f000 fd23 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fa:	f000 f82d 	bl	8000458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fe:	f000 f995 	bl	800072c <MX_GPIO_Init>
  MX_DMA_Init();
 8000402:	f000 f96d 	bl	80006e0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000406:	f000 f905 	bl	8000614 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800040a:	f000 f935 	bl	8000678 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800040e:	f000 f885 	bl	800051c <MX_TIM2_Init>
  MX_TIM17_Init();
 8000412:	f000 f8d7 	bl	80005c4 <MX_TIM17_Init>
	#define GUI_addr &huart1
	#define LIGHTING_addr &huart2

	uint8_t dataReceived;

	uint8_t GUI_receiveFinished = 0;
 8000416:	2317      	movs	r3, #23
 8000418:	18fb      	adds	r3, r7, r3
 800041a:	2200      	movs	r2, #0
 800041c:	701a      	strb	r2, [r3, #0]
	uint8_t GUI_receive = 1;
 800041e:	2316      	movs	r3, #22
 8000420:	18fb      	adds	r3, r7, r3
 8000422:	2201      	movs	r2, #1
 8000424:	701a      	strb	r2, [r3, #0]
	uint32_t currentTime;

	unsigned char viewDMX[20];

	DMX_UART_Init();
 8000426:	f000 f927 	bl	8000678 <MX_USART2_UART_Init>
	HAL_TIM_Base_Start(&htim17);
 800042a:	4b07      	ldr	r3, [pc, #28]	; (8000448 <main+0x58>)
 800042c:	0018      	movs	r0, r3
 800042e:	f002 f815 	bl	800245c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2);
 8000432:	4b06      	ldr	r3, [pc, #24]	; (800044c <main+0x5c>)
 8000434:	0018      	movs	r0, r3
 8000436:	f002 f811 	bl	800245c <HAL_TIM_Base_Start>

	// Inicializa a DMA para a recepção UART
	HAL_UART_Receive_DMA(&huart1, uartBuffer, HEADER_BUFFER_SIZE);
 800043a:	4905      	ldr	r1, [pc, #20]	; (8000450 <main+0x60>)
 800043c:	4b05      	ldr	r3, [pc, #20]	; (8000454 <main+0x64>)
 800043e:	2205      	movs	r2, #5
 8000440:	0018      	movs	r0, r3
 8000442:	f002 fd09 	bl	8002e58 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000446:	e7fe      	b.n	8000446 <main+0x56>
 8000448:	200000c8 	.word	0x200000c8
 800044c:	20000080 	.word	0x20000080
 8000450:	200002f8 	.word	0x200002f8
 8000454:	20000110 	.word	0x20000110

08000458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000458:	b590      	push	{r4, r7, lr}
 800045a:	b097      	sub	sp, #92	; 0x5c
 800045c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045e:	2428      	movs	r4, #40	; 0x28
 8000460:	193b      	adds	r3, r7, r4
 8000462:	0018      	movs	r0, r3
 8000464:	2330      	movs	r3, #48	; 0x30
 8000466:	001a      	movs	r2, r3
 8000468:	2100      	movs	r1, #0
 800046a:	f003 fc29 	bl	8003cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800046e:	2318      	movs	r3, #24
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	0018      	movs	r0, r3
 8000474:	2310      	movs	r3, #16
 8000476:	001a      	movs	r2, r3
 8000478:	2100      	movs	r1, #0
 800047a:	f003 fc21 	bl	8003cc0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	0018      	movs	r0, r3
 8000482:	2314      	movs	r3, #20
 8000484:	001a      	movs	r2, r3
 8000486:	2100      	movs	r1, #0
 8000488:	f003 fc1a 	bl	8003cc0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800048c:	0021      	movs	r1, r4
 800048e:	187b      	adds	r3, r7, r1
 8000490:	2202      	movs	r2, #2
 8000492:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000494:	187b      	adds	r3, r7, r1
 8000496:	2201      	movs	r2, #1
 8000498:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800049a:	187b      	adds	r3, r7, r1
 800049c:	2210      	movs	r2, #16
 800049e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	2202      	movs	r2, #2
 80004a4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2200      	movs	r2, #0
 80004aa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	22a0      	movs	r2, #160	; 0xa0
 80004b0:	0392      	lsls	r2, r2, #14
 80004b2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	2200      	movs	r2, #0
 80004b8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	0018      	movs	r0, r3
 80004be:	f001 fa41 	bl	8001944 <HAL_RCC_OscConfig>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d001      	beq.n	80004ca <SystemClock_Config+0x72>
  {
    Error_Handler();
 80004c6:	f000 fa57 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ca:	2118      	movs	r1, #24
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2207      	movs	r2, #7
 80004d0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2202      	movs	r2, #2
 80004d6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2200      	movs	r2, #0
 80004e2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	2101      	movs	r1, #1
 80004e8:	0018      	movs	r0, r3
 80004ea:	f001 fd45 	bl	8001f78 <HAL_RCC_ClockConfig>
 80004ee:	1e03      	subs	r3, r0, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80004f2:	f000 fa41 	bl	8000978 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2201      	movs	r2, #1
 80004fa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	0018      	movs	r0, r3
 8000506:	f001 fe7b 	bl	8002200 <HAL_RCCEx_PeriphCLKConfig>
 800050a:	1e03      	subs	r3, r0, #0
 800050c:	d001      	beq.n	8000512 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800050e:	f000 fa33 	bl	8000978 <Error_Handler>
  }
}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	46bd      	mov	sp, r7
 8000516:	b017      	add	sp, #92	; 0x5c
 8000518:	bd90      	pop	{r4, r7, pc}
	...

0800051c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000522:	2308      	movs	r3, #8
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	0018      	movs	r0, r3
 8000528:	2310      	movs	r3, #16
 800052a:	001a      	movs	r2, r3
 800052c:	2100      	movs	r1, #0
 800052e:	f003 fbc7 	bl	8003cc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000532:	003b      	movs	r3, r7
 8000534:	0018      	movs	r0, r3
 8000536:	2308      	movs	r3, #8
 8000538:	001a      	movs	r2, r3
 800053a:	2100      	movs	r1, #0
 800053c:	f003 fbc0 	bl	8003cc0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000540:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <MX_TIM2_Init+0xa4>)
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	05d2      	lsls	r2, r2, #23
 8000546:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8000548:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <MX_TIM2_Init+0xa4>)
 800054a:	222f      	movs	r2, #47	; 0x2f
 800054c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800054e:	4b1c      	ldr	r3, [pc, #112]	; (80005c0 <MX_TIM2_Init+0xa4>)
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000554:	4b1a      	ldr	r3, [pc, #104]	; (80005c0 <MX_TIM2_Init+0xa4>)
 8000556:	2201      	movs	r2, #1
 8000558:	4252      	negs	r2, r2
 800055a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800055c:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <MX_TIM2_Init+0xa4>)
 800055e:	2200      	movs	r2, #0
 8000560:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000562:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <MX_TIM2_Init+0xa4>)
 8000564:	2200      	movs	r2, #0
 8000566:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000568:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_TIM2_Init+0xa4>)
 800056a:	0018      	movs	r0, r3
 800056c:	f001 ff26 	bl	80023bc <HAL_TIM_Base_Init>
 8000570:	1e03      	subs	r3, r0, #0
 8000572:	d001      	beq.n	8000578 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000574:	f000 fa00 	bl	8000978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000578:	2108      	movs	r1, #8
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2280      	movs	r2, #128	; 0x80
 800057e:	0152      	lsls	r2, r2, #5
 8000580:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000582:	187a      	adds	r2, r7, r1
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <MX_TIM2_Init+0xa4>)
 8000586:	0011      	movs	r1, r2
 8000588:	0018      	movs	r0, r3
 800058a:	f002 f8c7 	bl	800271c <HAL_TIM_ConfigClockSource>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d001      	beq.n	8000596 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000592:	f000 f9f1 	bl	8000978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000596:	003b      	movs	r3, r7
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800059c:	003b      	movs	r3, r7
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005a2:	003a      	movs	r2, r7
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <MX_TIM2_Init+0xa4>)
 80005a6:	0011      	movs	r1, r2
 80005a8:	0018      	movs	r0, r3
 80005aa:	f002 fac5 	bl	8002b38 <HAL_TIMEx_MasterConfigSynchronization>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80005b2:	f000 f9e1 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b006      	add	sp, #24
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	20000080 	.word	0x20000080

080005c4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <MX_TIM17_Init+0x44>)
 80005ca:	4a10      	ldr	r2, [pc, #64]	; (800060c <MX_TIM17_Init+0x48>)
 80005cc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48-1;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <MX_TIM17_Init+0x44>)
 80005d0:	222f      	movs	r2, #47	; 0x2f
 80005d2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <MX_TIM17_Init+0x44>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 0xffff;
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <MX_TIM17_Init+0x44>)
 80005dc:	4a0c      	ldr	r2, [pc, #48]	; (8000610 <MX_TIM17_Init+0x4c>)
 80005de:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <MX_TIM17_Init+0x44>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <MX_TIM17_Init+0x44>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <MX_TIM17_Init+0x44>)
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <MX_TIM17_Init+0x44>)
 80005f4:	0018      	movs	r0, r3
 80005f6:	f001 fee1 	bl	80023bc <HAL_TIM_Base_Init>
 80005fa:	1e03      	subs	r3, r0, #0
 80005fc:	d001      	beq.n	8000602 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 80005fe:	f000 f9bb 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200000c8 	.word	0x200000c8
 800060c:	40014800 	.word	0x40014800
 8000610:	0000ffff 	.word	0x0000ffff

08000614 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000618:	4b14      	ldr	r3, [pc, #80]	; (800066c <MX_USART1_UART_Init+0x58>)
 800061a:	4a15      	ldr	r2, [pc, #84]	; (8000670 <MX_USART1_UART_Init+0x5c>)
 800061c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 800061e:	4b13      	ldr	r3, [pc, #76]	; (800066c <MX_USART1_UART_Init+0x58>)
 8000620:	4a14      	ldr	r2, [pc, #80]	; (8000674 <MX_USART1_UART_Init+0x60>)
 8000622:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_USART1_UART_Init+0x58>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <MX_USART1_UART_Init+0x58>)
 800062c:	2280      	movs	r2, #128	; 0x80
 800062e:	0192      	lsls	r2, r2, #6
 8000630:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_USART1_UART_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_USART1_UART_Init+0x58>)
 800063a:	220c      	movs	r2, #12
 800063c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <MX_USART1_UART_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_USART1_UART_Init+0x58>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <MX_USART1_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_USART1_UART_Init+0x58>)
 8000652:	2200      	movs	r2, #0
 8000654:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <MX_USART1_UART_Init+0x58>)
 8000658:	0018      	movs	r0, r3
 800065a:	f002 fadb 	bl	8002c14 <HAL_UART_Init>
 800065e:	1e03      	subs	r3, r0, #0
 8000660:	d001      	beq.n	8000666 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000662:	f000 f989 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000110 	.word	0x20000110
 8000670:	40013800 	.word	0x40013800
 8000674:	0007a120 	.word	0x0007a120

08000678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <MX_USART2_UART_Init+0x5c>)
 800067e:	4a16      	ldr	r2, [pc, #88]	; (80006d8 <MX_USART2_UART_Init+0x60>)
 8000680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 250000;
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_USART2_UART_Init+0x5c>)
 8000684:	4a15      	ldr	r2, [pc, #84]	; (80006dc <MX_USART2_UART_Init+0x64>)
 8000686:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_USART2_UART_Init+0x5c>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_USART2_UART_Init+0x5c>)
 8000690:	2280      	movs	r2, #128	; 0x80
 8000692:	0192      	lsls	r2, r2, #6
 8000694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_USART2_UART_Init+0x5c>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <MX_USART2_UART_Init+0x5c>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_USART2_UART_Init+0x5c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <MX_USART2_UART_Init+0x5c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_USART2_UART_Init+0x5c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <MX_USART2_UART_Init+0x5c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <MX_USART2_UART_Init+0x5c>)
 80006bc:	2300      	movs	r3, #0
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	f003 f9c5 	bl	8003a50 <HAL_RS485Ex_Init>
 80006c6:	1e03      	subs	r3, r0, #0
 80006c8:	d001      	beq.n	80006ce <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 80006ca:	f000 f955 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000198 	.word	0x20000198
 80006d8:	40004400 	.word	0x40004400
 80006dc:	0003d090 	.word	0x0003d090

080006e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_DMA_Init+0x48>)
 80006e8:	695a      	ldr	r2, [r3, #20]
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_DMA_Init+0x48>)
 80006ec:	2101      	movs	r1, #1
 80006ee:	430a      	orrs	r2, r1
 80006f0:	615a      	str	r2, [r3, #20]
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <MX_DMA_Init+0x48>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	2201      	movs	r2, #1
 80006f8:	4013      	ands	r3, r2
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	200a      	movs	r0, #10
 8000704:	f000 fcac 	bl	8001060 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000708:	200a      	movs	r0, #10
 800070a:	f000 fcbe 	bl	800108a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	2100      	movs	r1, #0
 8000712:	200b      	movs	r0, #11
 8000714:	f000 fca4 	bl	8001060 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000718:	200b      	movs	r0, #11
 800071a:	f000 fcb6 	bl	800108a <HAL_NVIC_EnableIRQ>

}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	b002      	add	sp, #8
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	40021000 	.word	0x40021000

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b089      	sub	sp, #36	; 0x24
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	240c      	movs	r4, #12
 8000734:	193b      	adds	r3, r7, r4
 8000736:	0018      	movs	r0, r3
 8000738:	2314      	movs	r3, #20
 800073a:	001a      	movs	r2, r3
 800073c:	2100      	movs	r1, #0
 800073e:	f003 fabf 	bl	8003cc0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	4b2e      	ldr	r3, [pc, #184]	; (80007fc <MX_GPIO_Init+0xd0>)
 8000744:	695a      	ldr	r2, [r3, #20]
 8000746:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <MX_GPIO_Init+0xd0>)
 8000748:	2180      	movs	r1, #128	; 0x80
 800074a:	0309      	lsls	r1, r1, #12
 800074c:	430a      	orrs	r2, r1
 800074e:	615a      	str	r2, [r3, #20]
 8000750:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <MX_GPIO_Init+0xd0>)
 8000752:	695a      	ldr	r2, [r3, #20]
 8000754:	2380      	movs	r3, #128	; 0x80
 8000756:	031b      	lsls	r3, r3, #12
 8000758:	4013      	ands	r3, r2
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	4b27      	ldr	r3, [pc, #156]	; (80007fc <MX_GPIO_Init+0xd0>)
 8000760:	695a      	ldr	r2, [r3, #20]
 8000762:	4b26      	ldr	r3, [pc, #152]	; (80007fc <MX_GPIO_Init+0xd0>)
 8000764:	2180      	movs	r1, #128	; 0x80
 8000766:	0289      	lsls	r1, r1, #10
 8000768:	430a      	orrs	r2, r1
 800076a:	615a      	str	r2, [r3, #20]
 800076c:	4b23      	ldr	r3, [pc, #140]	; (80007fc <MX_GPIO_Init+0xd0>)
 800076e:	695a      	ldr	r2, [r3, #20]
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	029b      	lsls	r3, r3, #10
 8000774:	4013      	ands	r3, r2
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Timing_test_Pin|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800077a:	4921      	ldr	r1, [pc, #132]	; (8000800 <MX_GPIO_Init+0xd4>)
 800077c:	4b21      	ldr	r3, [pc, #132]	; (8000804 <MX_GPIO_Init+0xd8>)
 800077e:	2200      	movs	r2, #0
 8000780:	0018      	movs	r0, r3
 8000782:	f001 f8c1 	bl	8001908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Timing_test_Pin */
  GPIO_InitStruct.Pin = Timing_test_Pin;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2201      	movs	r2, #1
 800078a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2201      	movs	r2, #1
 8000790:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2203      	movs	r2, #3
 800079c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Timing_test_GPIO_Port, &GPIO_InitStruct);
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	4a18      	ldr	r2, [pc, #96]	; (8000804 <MX_GPIO_Init+0xd8>)
 80007a2:	0019      	movs	r1, r3
 80007a4:	0010      	movs	r0, r2
 80007a6:	f000 fe6f 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	2201      	movs	r2, #1
 80007ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	2290      	movs	r2, #144	; 0x90
 80007b4:	0352      	lsls	r2, r2, #13
 80007b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	193b      	adds	r3, r7, r4
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007be:	193a      	adds	r2, r7, r4
 80007c0:	2390      	movs	r3, #144	; 0x90
 80007c2:	05db      	lsls	r3, r3, #23
 80007c4:	0011      	movs	r1, r2
 80007c6:	0018      	movs	r0, r3
 80007c8:	f000 fe5e 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80007cc:	0021      	movs	r1, r4
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	22c0      	movs	r2, #192	; 0xc0
 80007d2:	0092      	lsls	r2, r2, #2
 80007d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2201      	movs	r2, #1
 80007da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	4a06      	ldr	r2, [pc, #24]	; (8000804 <MX_GPIO_Init+0xd8>)
 80007ec:	0019      	movs	r1, r3
 80007ee:	0010      	movs	r0, r2
 80007f0:	f000 fe4a 	bl	8001488 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b009      	add	sp, #36	; 0x24
 80007fa:	bd90      	pop	{r4, r7, pc}
 80007fc:	40021000 	.word	0x40021000
 8000800:	00000301 	.word	0x00000301
 8000804:	48000800 	.word	0x48000800

08000808 <DMX_GPIO_Init>:
/*
 * Função que envia o comando DMX seguindo os tempos de MBB, break e MAB exigidos pela norma
 *
 * */

static void DMX_GPIO_Init(void){
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b08d      	sub	sp, #52	; 0x34
 800080c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	2418      	movs	r4, #24
 8000810:	193b      	adds	r3, r7, r4
 8000812:	0018      	movs	r0, r3
 8000814:	2314      	movs	r3, #20
 8000816:	001a      	movs	r2, r3
 8000818:	2100      	movs	r1, #0
 800081a:	f003 fa51 	bl	8003cc0 <memset>
	uint16_t receivedIndex = 0;
 800081e:	232e      	movs	r3, #46	; 0x2e
 8000820:	18fb      	adds	r3, r7, r3
 8000822:	2200      	movs	r2, #0
 8000824:	801a      	strh	r2, [r3, #0]
	uint8_t GUI_receiveFinished = 0;
 8000826:	232d      	movs	r3, #45	; 0x2d
 8000828:	18fb      	adds	r3, r7, r3
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
	uint8_t GUI_receive = 1;
 800082e:	232c      	movs	r3, #44	; 0x2c
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	2201      	movs	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000836:	2390      	movs	r3, #144	; 0x90
 8000838:	05db      	lsls	r3, r3, #23
 800083a:	2201      	movs	r2, #1
 800083c:	2104      	movs	r1, #4
 800083e:	0018      	movs	r0, r3
 8000840:	f001 f862 	bl	8001908 <HAL_GPIO_WritePin>
	uint32_t currentTime;

	// Configure GPIO pin as output
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000844:	0021      	movs	r1, r4
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2204      	movs	r2, #4
 800084a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2201      	movs	r2, #1
 8000850:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085e:	187a      	adds	r2, r7, r1
 8000860:	2390      	movs	r3, #144	; 0x90
 8000862:	05db      	lsls	r3, r3, #23
 8000864:	0011      	movs	r1, r2
 8000866:	0018      	movs	r0, r3
 8000868:	f000 fe0e 	bl	8001488 <HAL_GPIO_Init>
	unsigned char viewDMX[20];

}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	b00d      	add	sp, #52	; 0x34
 8000872:	bd90      	pop	{r4, r7, pc}

08000874 <DMX_SendHandler>:

void DMX_SendHandler(void) {
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
    switch (dmx_state) {
 8000878:	4b34      	ldr	r3, [pc, #208]	; (800094c <DMX_SendHandler+0xd8>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b04      	cmp	r3, #4
 800087e:	d861      	bhi.n	8000944 <DMX_SendHandler+0xd0>
 8000880:	009a      	lsls	r2, r3, #2
 8000882:	4b33      	ldr	r3, [pc, #204]	; (8000950 <DMX_SendHandler+0xdc>)
 8000884:	18d3      	adds	r3, r2, r3
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	469f      	mov	pc, r3
        case STATE_IDLE:
            break;

        case STATE_PREPARE:
        	DMX_UART_DeInit;
 800088a:	4b32      	ldr	r3, [pc, #200]	; (8000954 <DMX_SendHandler+0xe0>)
 800088c:	0018      	movs	r0, r3
 800088e:	f002 fa15 	bl	8002cbc <HAL_UART_DeInit>
			DMX_GPIO_Init();   // Inicia DMX modo GPIO
 8000892:	f7ff ffb9 	bl	8000808 <DMX_GPIO_Init>
        	//DMX_Set_LOW();
        	DMX_Set_DE_HIGH(); // Habilita o barramento DMX para escrita (Necessidade do RS485)
 8000896:	2390      	movs	r3, #144	; 0x90
 8000898:	05db      	lsls	r3, r3, #23
 800089a:	2201      	movs	r2, #1
 800089c:	2102      	movs	r1, #2
 800089e:	0018      	movs	r0, r3
 80008a0:	f001 f832 	bl	8001908 <HAL_GPIO_WritePin>

        	__HAL_TIM_ENABLE_IT(&htim17, TIM_IT_UPDATE);
 80008a4:	4b2c      	ldr	r3, [pc, #176]	; (8000958 <DMX_SendHandler+0xe4>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	68da      	ldr	r2, [r3, #12]
 80008aa:	4b2b      	ldr	r3, [pc, #172]	; (8000958 <DMX_SendHandler+0xe4>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2101      	movs	r1, #1
 80008b0:	430a      	orrs	r2, r1
 80008b2:	60da      	str	r2, [r3, #12]
			//TIM17->CNT = 0;
			//TIM17->ARR = 10;
			dmx_state = STATE_MBB;
 80008b4:	4b25      	ldr	r3, [pc, #148]	; (800094c <DMX_SendHandler+0xd8>)
 80008b6:	2203      	movs	r2, #3
 80008b8:	701a      	strb	r2, [r3, #0]
			break;
 80008ba:	e043      	b.n	8000944 <DMX_SendHandler+0xd0>

        case STATE_MBB:
			DMX_Set_HIGH(); // Setar o MBB
 80008bc:	2390      	movs	r3, #144	; 0x90
 80008be:	05db      	lsls	r3, r3, #23
 80008c0:	2201      	movs	r2, #1
 80008c2:	2104      	movs	r1, #4
 80008c4:	0018      	movs	r0, r3
 80008c6:	f001 f81f 	bl	8001908 <HAL_GPIO_WritePin>

			__HAL_TIM_ENABLE_IT(&htim17, TIM_IT_UPDATE);
 80008ca:	4b23      	ldr	r3, [pc, #140]	; (8000958 <DMX_SendHandler+0xe4>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	68da      	ldr	r2, [r3, #12]
 80008d0:	4b21      	ldr	r3, [pc, #132]	; (8000958 <DMX_SendHandler+0xe4>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2101      	movs	r1, #1
 80008d6:	430a      	orrs	r2, r1
 80008d8:	60da      	str	r2, [r3, #12]
			TIM17->CNT = 0;
 80008da:	4b20      	ldr	r3, [pc, #128]	; (800095c <DMX_SendHandler+0xe8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	625a      	str	r2, [r3, #36]	; 0x24
			TIM17->ARR = TIME_BEFORE_BREAK;
 80008e0:	4b1e      	ldr	r3, [pc, #120]	; (800095c <DMX_SendHandler+0xe8>)
 80008e2:	2205      	movs	r2, #5
 80008e4:	62da      	str	r2, [r3, #44]	; 0x2c
			dmx_state = STATE_BREAK;
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <DMX_SendHandler+0xd8>)
 80008e8:	2202      	movs	r2, #2
 80008ea:	701a      	strb	r2, [r3, #0]
			break;
 80008ec:	e02a      	b.n	8000944 <DMX_SendHandler+0xd0>

        case STATE_BREAK:
            DMX_Set_LOW();  // Setar o Break
 80008ee:	2390      	movs	r3, #144	; 0x90
 80008f0:	05db      	lsls	r3, r3, #23
 80008f2:	2200      	movs	r2, #0
 80008f4:	2104      	movs	r1, #4
 80008f6:	0018      	movs	r0, r3
 80008f8:	f001 f806 	bl	8001908 <HAL_GPIO_WritePin>

            __HAL_TIM_ENABLE_IT(&htim17, TIM_IT_UPDATE);
 80008fc:	4b16      	ldr	r3, [pc, #88]	; (8000958 <DMX_SendHandler+0xe4>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	68da      	ldr	r2, [r3, #12]
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <DMX_SendHandler+0xe4>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2101      	movs	r1, #1
 8000908:	430a      	orrs	r2, r1
 800090a:	60da      	str	r2, [r3, #12]
            TIM17->CNT = 0;
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <DMX_SendHandler+0xe8>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
            TIM17->ARR = TIME_BREAK;
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <DMX_SendHandler+0xe8>)
 8000914:	22fa      	movs	r2, #250	; 0xfa
 8000916:	62da      	str	r2, [r3, #44]	; 0x2c
            dmx_state = STATE_DATA;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <DMX_SendHandler+0xd8>)
 800091a:	2204      	movs	r2, #4
 800091c:	701a      	strb	r2, [r3, #0]
            break;
 800091e:	e011      	b.n	8000944 <DMX_SendHandler+0xd0>


        case STATE_DATA:
        	DMX_GPIO_DeInit(); 	// Desativa o modo GPIO
 8000920:	2390      	movs	r3, #144	; 0x90
 8000922:	05db      	lsls	r3, r3, #23
 8000924:	2104      	movs	r1, #4
 8000926:	0018      	movs	r0, r3
 8000928:	f000 ff1e 	bl	8001768 <HAL_GPIO_DeInit>
			DMX_UART_Init();		// Inicia novamente o modo USART
 800092c:	f7ff fea4 	bl	8000678 <MX_USART2_UART_Init>

			HAL_UART_Transmit_DMA(LIGHTING_addr, DMX_buffer_toSend, DMX_buffer_toSend_Size);
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <DMX_SendHandler+0xec>)
 8000932:	6819      	ldr	r1, [r3, #0]
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <DMX_SendHandler+0xf0>)
 8000936:	881a      	ldrh	r2, [r3, #0]
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <DMX_SendHandler+0xe0>)
 800093a:	0018      	movs	r0, r3
 800093c:	f002 f9fc 	bl	8002d38 <HAL_UART_Transmit_DMA>
//			// libera o buffer de recebimento de dados
//			DMX_buffer_toSend_Size = 0;
//			free(DMX_buffer_toSend);
//			DMX_buffer_toSend = NULL;
			// Final da transmissão é feita no callback de transmissão DMA
            break;
 8000940:	e000      	b.n	8000944 <DMX_SendHandler+0xd0>
            break;
 8000942:	46c0      	nop			; (mov r8, r8)


    }
}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	200002ec 	.word	0x200002ec
 8000950:	08003e0c 	.word	0x08003e0c
 8000954:	20000198 	.word	0x20000198
 8000958:	200000c8 	.word	0x200000c8
 800095c:	40014800 	.word	0x40014800
 8000960:	20000300 	.word	0x20000300
 8000964:	20000304 	.word	0x20000304

08000968 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM17) {
        // Lógica a ser executada quando ocorre a interrupção do Timer
    }
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	b002      	add	sp, #8
 8000976:	bd80      	pop	{r7, pc}

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	e7fe      	b.n	8000980 <Error_Handler+0x8>
	...

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <HAL_MspInit+0x44>)
 800098c:	699a      	ldr	r2, [r3, #24]
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <HAL_MspInit+0x44>)
 8000990:	2101      	movs	r1, #1
 8000992:	430a      	orrs	r2, r1
 8000994:	619a      	str	r2, [r3, #24]
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <HAL_MspInit+0x44>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	2201      	movs	r2, #1
 800099c:	4013      	ands	r3, r2
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <HAL_MspInit+0x44>)
 80009a4:	69da      	ldr	r2, [r3, #28]
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <HAL_MspInit+0x44>)
 80009a8:	2180      	movs	r1, #128	; 0x80
 80009aa:	0549      	lsls	r1, r1, #21
 80009ac:	430a      	orrs	r2, r1
 80009ae:	61da      	str	r2, [r3, #28]
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <HAL_MspInit+0x44>)
 80009b2:	69da      	ldr	r2, [r3, #28]
 80009b4:	2380      	movs	r3, #128	; 0x80
 80009b6:	055b      	lsls	r3, r3, #21
 80009b8:	4013      	ands	r3, r2
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b002      	add	sp, #8
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	40021000 	.word	0x40021000

080009cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	2380      	movs	r3, #128	; 0x80
 80009da:	05db      	lsls	r3, r3, #23
 80009dc:	429a      	cmp	r2, r3
 80009de:	d10c      	bne.n	80009fa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <HAL_TIM_Base_MspInit+0x6c>)
 80009e2:	69da      	ldr	r2, [r3, #28]
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <HAL_TIM_Base_MspInit+0x6c>)
 80009e6:	2101      	movs	r1, #1
 80009e8:	430a      	orrs	r2, r1
 80009ea:	61da      	str	r2, [r3, #28]
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_TIM_Base_MspInit+0x6c>)
 80009ee:	69db      	ldr	r3, [r3, #28]
 80009f0:	2201      	movs	r2, #1
 80009f2:	4013      	ands	r3, r2
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80009f8:	e01a      	b.n	8000a30 <HAL_TIM_Base_MspInit+0x64>
  else if(htim_base->Instance==TIM17)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a0f      	ldr	r2, [pc, #60]	; (8000a3c <HAL_TIM_Base_MspInit+0x70>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d115      	bne.n	8000a30 <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <HAL_TIM_Base_MspInit+0x6c>)
 8000a06:	699a      	ldr	r2, [r3, #24]
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <HAL_TIM_Base_MspInit+0x6c>)
 8000a0a:	2180      	movs	r1, #128	; 0x80
 8000a0c:	02c9      	lsls	r1, r1, #11
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	619a      	str	r2, [r3, #24]
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <HAL_TIM_Base_MspInit+0x6c>)
 8000a14:	699a      	ldr	r2, [r3, #24]
 8000a16:	2380      	movs	r3, #128	; 0x80
 8000a18:	02db      	lsls	r3, r3, #11
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2100      	movs	r1, #0
 8000a24:	2016      	movs	r0, #22
 8000a26:	f000 fb1b 	bl	8001060 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000a2a:	2016      	movs	r0, #22
 8000a2c:	f000 fb2d 	bl	800108a <HAL_NVIC_EnableIRQ>
}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b004      	add	sp, #16
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40014800 	.word	0x40014800

08000a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b08d      	sub	sp, #52	; 0x34
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	241c      	movs	r4, #28
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	2314      	movs	r3, #20
 8000a50:	001a      	movs	r2, r3
 8000a52:	2100      	movs	r1, #0
 8000a54:	f003 f934 	bl	8003cc0 <memset>
  if(huart->Instance==USART1)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a73      	ldr	r2, [pc, #460]	; (8000c2c <HAL_UART_MspInit+0x1ec>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d15a      	bne.n	8000b18 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a62:	4b73      	ldr	r3, [pc, #460]	; (8000c30 <HAL_UART_MspInit+0x1f0>)
 8000a64:	699a      	ldr	r2, [r3, #24]
 8000a66:	4b72      	ldr	r3, [pc, #456]	; (8000c30 <HAL_UART_MspInit+0x1f0>)
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	01c9      	lsls	r1, r1, #7
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	619a      	str	r2, [r3, #24]
 8000a70:	4b6f      	ldr	r3, [pc, #444]	; (8000c30 <HAL_UART_MspInit+0x1f0>)
 8000a72:	699a      	ldr	r2, [r3, #24]
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	01db      	lsls	r3, r3, #7
 8000a78:	4013      	ands	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]
 8000a7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	4b6c      	ldr	r3, [pc, #432]	; (8000c30 <HAL_UART_MspInit+0x1f0>)
 8000a80:	695a      	ldr	r2, [r3, #20]
 8000a82:	4b6b      	ldr	r3, [pc, #428]	; (8000c30 <HAL_UART_MspInit+0x1f0>)
 8000a84:	2180      	movs	r1, #128	; 0x80
 8000a86:	0289      	lsls	r1, r1, #10
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	615a      	str	r2, [r3, #20]
 8000a8c:	4b68      	ldr	r3, [pc, #416]	; (8000c30 <HAL_UART_MspInit+0x1f0>)
 8000a8e:	695a      	ldr	r2, [r3, #20]
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	029b      	lsls	r3, r3, #10
 8000a94:	4013      	ands	r3, r2
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USB_TX_Pin|USB_RX_Pin;
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	22c0      	movs	r2, #192	; 0xc0
 8000a9e:	00d2      	lsls	r2, r2, #3
 8000aa0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	0021      	movs	r1, r4
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2203      	movs	r2, #3
 8000ab4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2201      	movs	r2, #1
 8000aba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abc:	187a      	adds	r2, r7, r1
 8000abe:	2390      	movs	r3, #144	; 0x90
 8000ac0:	05db      	lsls	r3, r3, #23
 8000ac2:	0011      	movs	r1, r2
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f000 fcdf 	bl	8001488 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000aca:	4b5a      	ldr	r3, [pc, #360]	; (8000c34 <HAL_UART_MspInit+0x1f4>)
 8000acc:	4a5a      	ldr	r2, [pc, #360]	; (8000c38 <HAL_UART_MspInit+0x1f8>)
 8000ace:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ad0:	4b58      	ldr	r3, [pc, #352]	; (8000c34 <HAL_UART_MspInit+0x1f4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad6:	4b57      	ldr	r3, [pc, #348]	; (8000c34 <HAL_UART_MspInit+0x1f4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000adc:	4b55      	ldr	r3, [pc, #340]	; (8000c34 <HAL_UART_MspInit+0x1f4>)
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ae2:	4b54      	ldr	r3, [pc, #336]	; (8000c34 <HAL_UART_MspInit+0x1f4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ae8:	4b52      	ldr	r3, [pc, #328]	; (8000c34 <HAL_UART_MspInit+0x1f4>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000aee:	4b51      	ldr	r3, [pc, #324]	; (8000c34 <HAL_UART_MspInit+0x1f4>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000af4:	4b4f      	ldr	r3, [pc, #316]	; (8000c34 <HAL_UART_MspInit+0x1f4>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000afa:	4b4e      	ldr	r3, [pc, #312]	; (8000c34 <HAL_UART_MspInit+0x1f4>)
 8000afc:	0018      	movs	r0, r3
 8000afe:	f000 fae1 	bl	80010c4 <HAL_DMA_Init>
 8000b02:	1e03      	subs	r3, r0, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000b06:	f7ff ff37 	bl	8000978 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a49      	ldr	r2, [pc, #292]	; (8000c34 <HAL_UART_MspInit+0x1f4>)
 8000b0e:	675a      	str	r2, [r3, #116]	; 0x74
 8000b10:	4b48      	ldr	r3, [pc, #288]	; (8000c34 <HAL_UART_MspInit+0x1f4>)
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b16:	e084      	b.n	8000c22 <HAL_UART_MspInit+0x1e2>
  else if(huart->Instance==USART2)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a47      	ldr	r2, [pc, #284]	; (8000c3c <HAL_UART_MspInit+0x1fc>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d000      	beq.n	8000b24 <HAL_UART_MspInit+0xe4>
 8000b22:	e07e      	b.n	8000c22 <HAL_UART_MspInit+0x1e2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b24:	4b42      	ldr	r3, [pc, #264]	; (8000c30 <HAL_UART_MspInit+0x1f0>)
 8000b26:	69da      	ldr	r2, [r3, #28]
 8000b28:	4b41      	ldr	r3, [pc, #260]	; (8000c30 <HAL_UART_MspInit+0x1f0>)
 8000b2a:	2180      	movs	r1, #128	; 0x80
 8000b2c:	0289      	lsls	r1, r1, #10
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	61da      	str	r2, [r3, #28]
 8000b32:	4b3f      	ldr	r3, [pc, #252]	; (8000c30 <HAL_UART_MspInit+0x1f0>)
 8000b34:	69da      	ldr	r2, [r3, #28]
 8000b36:	2380      	movs	r3, #128	; 0x80
 8000b38:	029b      	lsls	r3, r3, #10
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b40:	4b3b      	ldr	r3, [pc, #236]	; (8000c30 <HAL_UART_MspInit+0x1f0>)
 8000b42:	695a      	ldr	r2, [r3, #20]
 8000b44:	4b3a      	ldr	r3, [pc, #232]	; (8000c30 <HAL_UART_MspInit+0x1f0>)
 8000b46:	2180      	movs	r1, #128	; 0x80
 8000b48:	0289      	lsls	r1, r1, #10
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	615a      	str	r2, [r3, #20]
 8000b4e:	4b38      	ldr	r3, [pc, #224]	; (8000c30 <HAL_UART_MspInit+0x1f0>)
 8000b50:	695a      	ldr	r2, [r3, #20]
 8000b52:	2380      	movs	r3, #128	; 0x80
 8000b54:	029b      	lsls	r3, r3, #10
 8000b56:	4013      	ands	r3, r2
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DMX_DE_Pin|DMX_TX_Pin|DMX_RX_Pin;
 8000b5c:	211c      	movs	r1, #28
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	220e      	movs	r2, #14
 8000b62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	2202      	movs	r2, #2
 8000b68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	2203      	movs	r2, #3
 8000b74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2201      	movs	r2, #1
 8000b7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	187a      	adds	r2, r7, r1
 8000b7e:	2390      	movs	r3, #144	; 0x90
 8000b80:	05db      	lsls	r3, r3, #23
 8000b82:	0011      	movs	r1, r2
 8000b84:	0018      	movs	r0, r3
 8000b86:	f000 fc7f 	bl	8001488 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8000b8a:	4b2d      	ldr	r3, [pc, #180]	; (8000c40 <HAL_UART_MspInit+0x200>)
 8000b8c:	4a2d      	ldr	r2, [pc, #180]	; (8000c44 <HAL_UART_MspInit+0x204>)
 8000b8e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b90:	4b2b      	ldr	r3, [pc, #172]	; (8000c40 <HAL_UART_MspInit+0x200>)
 8000b92:	2210      	movs	r2, #16
 8000b94:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b96:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <HAL_UART_MspInit+0x200>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b9c:	4b28      	ldr	r3, [pc, #160]	; (8000c40 <HAL_UART_MspInit+0x200>)
 8000b9e:	2280      	movs	r2, #128	; 0x80
 8000ba0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ba2:	4b27      	ldr	r3, [pc, #156]	; (8000c40 <HAL_UART_MspInit+0x200>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ba8:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <HAL_UART_MspInit+0x200>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000bae:	4b24      	ldr	r3, [pc, #144]	; (8000c40 <HAL_UART_MspInit+0x200>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bb4:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <HAL_UART_MspInit+0x200>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000bba:	4b21      	ldr	r3, [pc, #132]	; (8000c40 <HAL_UART_MspInit+0x200>)
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f000 fa81 	bl	80010c4 <HAL_DMA_Init>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_UART_MspInit+0x18a>
      Error_Handler();
 8000bc6:	f7ff fed7 	bl	8000978 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a1c      	ldr	r2, [pc, #112]	; (8000c40 <HAL_UART_MspInit+0x200>)
 8000bce:	671a      	str	r2, [r3, #112]	; 0x70
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <HAL_UART_MspInit+0x200>)
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <HAL_UART_MspInit+0x208>)
 8000bd8:	4a1c      	ldr	r2, [pc, #112]	; (8000c4c <HAL_UART_MspInit+0x20c>)
 8000bda:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <HAL_UART_MspInit+0x208>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <HAL_UART_MspInit+0x208>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <HAL_UART_MspInit+0x208>)
 8000bea:	2280      	movs	r2, #128	; 0x80
 8000bec:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <HAL_UART_MspInit+0x208>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <HAL_UART_MspInit+0x208>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <HAL_UART_MspInit+0x208>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <HAL_UART_MspInit+0x208>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <HAL_UART_MspInit+0x208>)
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f000 fa5b 	bl	80010c4 <HAL_DMA_Init>
 8000c0e:	1e03      	subs	r3, r0, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 8000c12:	f7ff feb1 	bl	8000978 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <HAL_UART_MspInit+0x208>)
 8000c1a:	675a      	str	r2, [r3, #116]	; 0x74
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <HAL_UART_MspInit+0x208>)
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b00d      	add	sp, #52	; 0x34
 8000c28:	bd90      	pop	{r4, r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	40013800 	.word	0x40013800
 8000c30:	40021000 	.word	0x40021000
 8000c34:	20000220 	.word	0x20000220
 8000c38:	40020030 	.word	0x40020030
 8000c3c:	40004400 	.word	0x40004400
 8000c40:	20000264 	.word	0x20000264
 8000c44:	40020044 	.word	0x40020044
 8000c48:	200002a8 	.word	0x200002a8
 8000c4c:	40020058 	.word	0x40020058

08000c50 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a1a      	ldr	r2, [pc, #104]	; (8000cc8 <HAL_UART_MspDeInit+0x78>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d113      	bne.n	8000c8a <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000c62:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <HAL_UART_MspDeInit+0x7c>)
 8000c64:	699a      	ldr	r2, [r3, #24]
 8000c66:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <HAL_UART_MspDeInit+0x7c>)
 8000c68:	4919      	ldr	r1, [pc, #100]	; (8000cd0 <HAL_UART_MspDeInit+0x80>)
 8000c6a:	400a      	ands	r2, r1
 8000c6c:	619a      	str	r2, [r3, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, USB_TX_Pin|USB_RX_Pin);
 8000c6e:	23c0      	movs	r3, #192	; 0xc0
 8000c70:	00da      	lsls	r2, r3, #3
 8000c72:	2390      	movs	r3, #144	; 0x90
 8000c74:	05db      	lsls	r3, r3, #23
 8000c76:	0011      	movs	r1, r2
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f000 fd75 	bl	8001768 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c82:	0018      	movs	r0, r3
 8000c84:	f000 fa66 	bl	8001154 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8000c88:	e01a      	b.n	8000cc0 <HAL_UART_MspDeInit+0x70>
  else if(huart->Instance==USART2)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a11      	ldr	r2, [pc, #68]	; (8000cd4 <HAL_UART_MspDeInit+0x84>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d115      	bne.n	8000cc0 <HAL_UART_MspDeInit+0x70>
    __HAL_RCC_USART2_CLK_DISABLE();
 8000c94:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <HAL_UART_MspDeInit+0x7c>)
 8000c96:	69da      	ldr	r2, [r3, #28]
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <HAL_UART_MspDeInit+0x7c>)
 8000c9a:	490f      	ldr	r1, [pc, #60]	; (8000cd8 <HAL_UART_MspDeInit+0x88>)
 8000c9c:	400a      	ands	r2, r1
 8000c9e:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, DMX_DE_Pin|DMX_TX_Pin|DMX_RX_Pin);
 8000ca0:	2390      	movs	r3, #144	; 0x90
 8000ca2:	05db      	lsls	r3, r3, #23
 8000ca4:	210e      	movs	r1, #14
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f000 fd5e 	bl	8001768 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f000 fa4f 	bl	8001154 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f000 fa4a 	bl	8001154 <HAL_DMA_DeInit>
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b002      	add	sp, #8
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40013800 	.word	0x40013800
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	ffffbfff 	.word	0xffffbfff
 8000cd4:	40004400 	.word	0x40004400
 8000cd8:	fffdffff 	.word	0xfffdffff

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <NMI_Handler+0x4>

08000ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <HardFault_Handler+0x4>

08000ce8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d00:	f000 f8e6 	bl	8000ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d04:	46c0      	nop			; (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000d12:	0018      	movs	r0, r3
 8000d14:	f000 facd 	bl	80012b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	20000220 	.word	0x20000220

08000d24 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <DMA1_Channel4_5_IRQHandler+0x1c>)
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f000 fac1 	bl	80012b2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <DMA1_Channel4_5_IRQHandler+0x20>)
 8000d32:	0018      	movs	r0, r3
 8000d34:	f000 fabd 	bl	80012b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	20000264 	.word	0x20000264
 8000d44:	200002a8 	.word	0x200002a8

08000d48 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
  // Desabilita temporariamente as interrupções e chama a maquina de estados
  // para enviar a proxima parte do frame DMX
  __HAL_TIM_DISABLE_IT(&htim17, TIM_IT_UPDATE);
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <TIM17_IRQHandler+0x28>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	68da      	ldr	r2, [r3, #12]
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <TIM17_IRQHandler+0x28>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2101      	movs	r1, #1
 8000d58:	438a      	bics	r2, r1
 8000d5a:	60da      	str	r2, [r3, #12]
  DMX_SendHandler();
 8000d5c:	f7ff fd8a 	bl	8000874 <DMX_SendHandler>

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <TIM17_IRQHandler+0x28>)
 8000d62:	0018      	movs	r0, r3
 8000d64:	f001 fbc4 	bl	80024f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	200000c8 	.word	0x200000c8

08000d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d7c:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <_sbrk+0x5c>)
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <_sbrk+0x60>)
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <_sbrk+0x64>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <_sbrk+0x68>)
 8000d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	18d3      	adds	r3, r2, r3
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d207      	bcs.n	8000db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da4:	f002 ffa6 	bl	8003cf4 <__errno>
 8000da8:	0003      	movs	r3, r0
 8000daa:	220c      	movs	r2, #12
 8000dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dae:	2301      	movs	r3, #1
 8000db0:	425b      	negs	r3, r3
 8000db2:	e009      	b.n	8000dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	18d2      	adds	r2, r2, r3
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <_sbrk+0x64>)
 8000dc4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
}
 8000dc8:	0018      	movs	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b006      	add	sp, #24
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20002000 	.word	0x20002000
 8000dd4:	00000400 	.word	0x00000400
 8000dd8:	20000308 	.word	0x20000308
 8000ddc:	20000458 	.word	0x20000458

08000de0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dee:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8000df0:	f7ff fff6 	bl	8000de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df4:	480c      	ldr	r0, [pc, #48]	; (8000e28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000df6:	490d      	ldr	r1, [pc, #52]	; (8000e2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000df8:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <LoopForever+0xe>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e0c:	4c0a      	ldr	r4, [pc, #40]	; (8000e38 <LoopForever+0x16>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e1a:	f002 ff71 	bl	8003d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e1e:	f7ff fae7 	bl	80003f0 <main>

08000e22 <LoopForever>:

LoopForever:
    b LoopForever
 8000e22:	e7fe      	b.n	8000e22 <LoopForever>
  ldr   r0, =_estack
 8000e24:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e2c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000e30:	08003e60 	.word	0x08003e60
  ldr r2, =_sbss
 8000e34:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000e38:	20000458 	.word	0x20000458

08000e3c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC1_COMP_IRQHandler>
	...

08000e40 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <HAL_Init+0x24>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_Init+0x24>)
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f000 f809 	bl	8000e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e56:	f7ff fd95 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	40022000 	.word	0x40022000

08000e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <HAL_InitTick+0x5c>)
 8000e72:	681c      	ldr	r4, [r3, #0]
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <HAL_InitTick+0x60>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	0019      	movs	r1, r3
 8000e7a:	23fa      	movs	r3, #250	; 0xfa
 8000e7c:	0098      	lsls	r0, r3, #2
 8000e7e:	f7ff f943 	bl	8000108 <__udivsi3>
 8000e82:	0003      	movs	r3, r0
 8000e84:	0019      	movs	r1, r3
 8000e86:	0020      	movs	r0, r4
 8000e88:	f7ff f93e 	bl	8000108 <__udivsi3>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f000 f90b 	bl	80010aa <HAL_SYSTICK_Config>
 8000e94:	1e03      	subs	r3, r0, #0
 8000e96:	d001      	beq.n	8000e9c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e00f      	b.n	8000ebc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b03      	cmp	r3, #3
 8000ea0:	d80b      	bhi.n	8000eba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	425b      	negs	r3, r3
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f000 f8d8 	bl	8001060 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_InitTick+0x64>)
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e000      	b.n	8000ebc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b003      	add	sp, #12
 8000ec2:	bd90      	pop	{r4, r7, pc}
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000010 	.word	0x20000010
 8000ecc:	2000000c 	.word	0x2000000c

08000ed0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <HAL_IncTick+0x1c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	001a      	movs	r2, r3
 8000eda:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <HAL_IncTick+0x20>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	18d2      	adds	r2, r2, r3
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_IncTick+0x20>)
 8000ee2:	601a      	str	r2, [r3, #0]
}
 8000ee4:	46c0      	nop			; (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	20000010 	.word	0x20000010
 8000ef0:	2000030c 	.word	0x2000030c

08000ef4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef8:	4b02      	ldr	r3, [pc, #8]	; (8000f04 <HAL_GetTick+0x10>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	0018      	movs	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	2000030c 	.word	0x2000030c

08000f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	0002      	movs	r2, r0
 8000f10:	1dfb      	adds	r3, r7, #7
 8000f12:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	1dfb      	adds	r3, r7, #7
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b7f      	cmp	r3, #127	; 0x7f
 8000f1a:	d809      	bhi.n	8000f30 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1c:	1dfb      	adds	r3, r7, #7
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	001a      	movs	r2, r3
 8000f22:	231f      	movs	r3, #31
 8000f24:	401a      	ands	r2, r3
 8000f26:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <__NVIC_EnableIRQ+0x30>)
 8000f28:	2101      	movs	r1, #1
 8000f2a:	4091      	lsls	r1, r2
 8000f2c:	000a      	movs	r2, r1
 8000f2e:	601a      	str	r2, [r3, #0]
  }
}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b002      	add	sp, #8
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	e000e100 	.word	0xe000e100

08000f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	0002      	movs	r2, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f4a:	1dfb      	adds	r3, r7, #7
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b7f      	cmp	r3, #127	; 0x7f
 8000f50:	d828      	bhi.n	8000fa4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f52:	4a2f      	ldr	r2, [pc, #188]	; (8001010 <__NVIC_SetPriority+0xd4>)
 8000f54:	1dfb      	adds	r3, r7, #7
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b25b      	sxtb	r3, r3
 8000f5a:	089b      	lsrs	r3, r3, #2
 8000f5c:	33c0      	adds	r3, #192	; 0xc0
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	589b      	ldr	r3, [r3, r2]
 8000f62:	1dfa      	adds	r2, r7, #7
 8000f64:	7812      	ldrb	r2, [r2, #0]
 8000f66:	0011      	movs	r1, r2
 8000f68:	2203      	movs	r2, #3
 8000f6a:	400a      	ands	r2, r1
 8000f6c:	00d2      	lsls	r2, r2, #3
 8000f6e:	21ff      	movs	r1, #255	; 0xff
 8000f70:	4091      	lsls	r1, r2
 8000f72:	000a      	movs	r2, r1
 8000f74:	43d2      	mvns	r2, r2
 8000f76:	401a      	ands	r2, r3
 8000f78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	019b      	lsls	r3, r3, #6
 8000f7e:	22ff      	movs	r2, #255	; 0xff
 8000f80:	401a      	ands	r2, r3
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	0018      	movs	r0, r3
 8000f88:	2303      	movs	r3, #3
 8000f8a:	4003      	ands	r3, r0
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f90:	481f      	ldr	r0, [pc, #124]	; (8001010 <__NVIC_SetPriority+0xd4>)
 8000f92:	1dfb      	adds	r3, r7, #7
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	b25b      	sxtb	r3, r3
 8000f98:	089b      	lsrs	r3, r3, #2
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	33c0      	adds	r3, #192	; 0xc0
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fa2:	e031      	b.n	8001008 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fa4:	4a1b      	ldr	r2, [pc, #108]	; (8001014 <__NVIC_SetPriority+0xd8>)
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	0019      	movs	r1, r3
 8000fac:	230f      	movs	r3, #15
 8000fae:	400b      	ands	r3, r1
 8000fb0:	3b08      	subs	r3, #8
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	3306      	adds	r3, #6
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	18d3      	adds	r3, r2, r3
 8000fba:	3304      	adds	r3, #4
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	1dfa      	adds	r2, r7, #7
 8000fc0:	7812      	ldrb	r2, [r2, #0]
 8000fc2:	0011      	movs	r1, r2
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	400a      	ands	r2, r1
 8000fc8:	00d2      	lsls	r2, r2, #3
 8000fca:	21ff      	movs	r1, #255	; 0xff
 8000fcc:	4091      	lsls	r1, r2
 8000fce:	000a      	movs	r2, r1
 8000fd0:	43d2      	mvns	r2, r2
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	019b      	lsls	r3, r3, #6
 8000fda:	22ff      	movs	r2, #255	; 0xff
 8000fdc:	401a      	ands	r2, r3
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	4003      	ands	r3, r0
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fec:	4809      	ldr	r0, [pc, #36]	; (8001014 <__NVIC_SetPriority+0xd8>)
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	001c      	movs	r4, r3
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	4023      	ands	r3, r4
 8000ff8:	3b08      	subs	r3, #8
 8000ffa:	089b      	lsrs	r3, r3, #2
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	3306      	adds	r3, #6
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	18c3      	adds	r3, r0, r3
 8001004:	3304      	adds	r3, #4
 8001006:	601a      	str	r2, [r3, #0]
}
 8001008:	46c0      	nop			; (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	b003      	add	sp, #12
 800100e:	bd90      	pop	{r4, r7, pc}
 8001010:	e000e100 	.word	0xe000e100
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	1e5a      	subs	r2, r3, #1
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	045b      	lsls	r3, r3, #17
 8001028:	429a      	cmp	r2, r3
 800102a:	d301      	bcc.n	8001030 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102c:	2301      	movs	r3, #1
 800102e:	e010      	b.n	8001052 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <SysTick_Config+0x44>)
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	3a01      	subs	r2, #1
 8001036:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001038:	2301      	movs	r3, #1
 800103a:	425b      	negs	r3, r3
 800103c:	2103      	movs	r1, #3
 800103e:	0018      	movs	r0, r3
 8001040:	f7ff ff7c 	bl	8000f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <SysTick_Config+0x44>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <SysTick_Config+0x44>)
 800104c:	2207      	movs	r2, #7
 800104e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001050:	2300      	movs	r3, #0
}
 8001052:	0018      	movs	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	b002      	add	sp, #8
 8001058:	bd80      	pop	{r7, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	e000e010 	.word	0xe000e010

08001060 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	210f      	movs	r1, #15
 800106c:	187b      	adds	r3, r7, r1
 800106e:	1c02      	adds	r2, r0, #0
 8001070:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	187b      	adds	r3, r7, r1
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	b25b      	sxtb	r3, r3
 800107a:	0011      	movs	r1, r2
 800107c:	0018      	movs	r0, r3
 800107e:	f7ff ff5d 	bl	8000f3c <__NVIC_SetPriority>
}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	46bd      	mov	sp, r7
 8001086:	b004      	add	sp, #16
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	0002      	movs	r2, r0
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	b25b      	sxtb	r3, r3
 800109c:	0018      	movs	r0, r3
 800109e:	f7ff ff33 	bl	8000f08 <__NVIC_EnableIRQ>
}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b002      	add	sp, #8
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	0018      	movs	r0, r3
 80010b6:	f7ff ffaf 	bl	8001018 <SysTick_Config>
 80010ba:	0003      	movs	r3, r0
}
 80010bc:	0018      	movs	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	b002      	add	sp, #8
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e036      	b.n	8001148 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2221      	movs	r2, #33	; 0x21
 80010de:	2102      	movs	r1, #2
 80010e0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4a18      	ldr	r2, [pc, #96]	; (8001150 <HAL_DMA_Init+0x8c>)
 80010ee:	4013      	ands	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80010fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001106:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001112:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69db      	ldr	r3, [r3, #28]
 8001118:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	4313      	orrs	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	0018      	movs	r0, r3
 800112c:	f000 f990 	bl	8001450 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2221      	movs	r2, #33	; 0x21
 800113a:	2101      	movs	r1, #1
 800113c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2220      	movs	r2, #32
 8001142:	2100      	movs	r1, #0
 8001144:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001146:	2300      	movs	r3, #0
}
 8001148:	0018      	movs	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	b004      	add	sp, #16
 800114e:	bd80      	pop	{r7, pc}
 8001150:	ffffc00f 	.word	0xffffc00f

08001154 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e03b      	b.n	80011de <HAL_DMA_DeInit+0x8a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2101      	movs	r1, #1
 8001172:	438a      	bics	r2, r1
 8001174:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2200      	movs	r2, #0
 8001184:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]

  /* Get DMA Base Address */
  DMA_CalcBaseAndBitshift(hdma);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	0018      	movs	r0, r3
 800119a:	f000 f959 	bl	8001450 <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a6:	2101      	movs	r1, #1
 80011a8:	4091      	lsls	r1, r2
 80011aa:	000a      	movs	r2, r1
 80011ac:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2221      	movs	r2, #33	; 0x21
 80011d0:	2100      	movs	r1, #0
 80011d2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2220      	movs	r2, #32
 80011d8:	2100      	movs	r1, #0
 80011da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	0018      	movs	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b002      	add	sp, #8
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	60f8      	str	r0, [r7, #12]
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011f4:	2317      	movs	r3, #23
 80011f6:	18fb      	adds	r3, r7, r3
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2220      	movs	r2, #32
 8001200:	5c9b      	ldrb	r3, [r3, r2]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d101      	bne.n	800120a <HAL_DMA_Start_IT+0x24>
 8001206:	2302      	movs	r3, #2
 8001208:	e04f      	b.n	80012aa <HAL_DMA_Start_IT+0xc4>
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2220      	movs	r2, #32
 800120e:	2101      	movs	r1, #1
 8001210:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2221      	movs	r2, #33	; 0x21
 8001216:	5c9b      	ldrb	r3, [r3, r2]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b01      	cmp	r3, #1
 800121c:	d13a      	bne.n	8001294 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2221      	movs	r2, #33	; 0x21
 8001222:	2102      	movs	r1, #2
 8001224:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2200      	movs	r2, #0
 800122a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2101      	movs	r1, #1
 8001238:	438a      	bics	r2, r1
 800123a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f000 f8d7 	bl	80013f6 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124c:	2b00      	cmp	r3, #0
 800124e:	d008      	beq.n	8001262 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	210e      	movs	r1, #14
 800125c:	430a      	orrs	r2, r1
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	e00f      	b.n	8001282 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	210a      	movs	r1, #10
 800126e:	430a      	orrs	r2, r1
 8001270:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2104      	movs	r1, #4
 800127e:	438a      	bics	r2, r1
 8001280:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2101      	movs	r1, #1
 800128e:	430a      	orrs	r2, r1
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	e007      	b.n	80012a4 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2220      	movs	r2, #32
 8001298:	2100      	movs	r1, #0
 800129a:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800129c:	2317      	movs	r3, #23
 800129e:	18fb      	adds	r3, r7, r3
 80012a0:	2202      	movs	r2, #2
 80012a2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80012a4:	2317      	movs	r3, #23
 80012a6:	18fb      	adds	r3, r7, r3
 80012a8:	781b      	ldrb	r3, [r3, #0]
}
 80012aa:	0018      	movs	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b006      	add	sp, #24
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b084      	sub	sp, #16
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	2204      	movs	r2, #4
 80012d0:	409a      	lsls	r2, r3
 80012d2:	0013      	movs	r3, r2
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	4013      	ands	r3, r2
 80012d8:	d024      	beq.n	8001324 <HAL_DMA_IRQHandler+0x72>
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	2204      	movs	r2, #4
 80012de:	4013      	ands	r3, r2
 80012e0:	d020      	beq.n	8001324 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2220      	movs	r2, #32
 80012ea:	4013      	ands	r3, r2
 80012ec:	d107      	bne.n	80012fe <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2104      	movs	r1, #4
 80012fa:	438a      	bics	r2, r1
 80012fc:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001306:	2104      	movs	r1, #4
 8001308:	4091      	lsls	r1, r2
 800130a:	000a      	movs	r2, r1
 800130c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001312:	2b00      	cmp	r3, #0
 8001314:	d100      	bne.n	8001318 <HAL_DMA_IRQHandler+0x66>
 8001316:	e06a      	b.n	80013ee <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	0010      	movs	r0, r2
 8001320:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001322:	e064      	b.n	80013ee <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	2202      	movs	r2, #2
 800132a:	409a      	lsls	r2, r3
 800132c:	0013      	movs	r3, r2
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	4013      	ands	r3, r2
 8001332:	d02b      	beq.n	800138c <HAL_DMA_IRQHandler+0xda>
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	2202      	movs	r2, #2
 8001338:	4013      	ands	r3, r2
 800133a:	d027      	beq.n	800138c <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2220      	movs	r2, #32
 8001344:	4013      	ands	r3, r2
 8001346:	d10b      	bne.n	8001360 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	210a      	movs	r1, #10
 8001354:	438a      	bics	r2, r1
 8001356:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2221      	movs	r2, #33	; 0x21
 800135c:	2101      	movs	r1, #1
 800135e:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001368:	2102      	movs	r1, #2
 800136a:	4091      	lsls	r1, r2
 800136c:	000a      	movs	r2, r1
 800136e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2220      	movs	r2, #32
 8001374:	2100      	movs	r1, #0
 8001376:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137c:	2b00      	cmp	r3, #0
 800137e:	d036      	beq.n	80013ee <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	0010      	movs	r0, r2
 8001388:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800138a:	e030      	b.n	80013ee <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	2208      	movs	r2, #8
 8001392:	409a      	lsls	r2, r3
 8001394:	0013      	movs	r3, r2
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	4013      	ands	r3, r2
 800139a:	d028      	beq.n	80013ee <HAL_DMA_IRQHandler+0x13c>
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	2208      	movs	r2, #8
 80013a0:	4013      	ands	r3, r2
 80013a2:	d024      	beq.n	80013ee <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	210e      	movs	r1, #14
 80013b0:	438a      	bics	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013bc:	2101      	movs	r1, #1
 80013be:	4091      	lsls	r1, r2
 80013c0:	000a      	movs	r2, r1
 80013c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2221      	movs	r2, #33	; 0x21
 80013ce:	2101      	movs	r1, #1
 80013d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2220      	movs	r2, #32
 80013d6:	2100      	movs	r1, #0
 80013d8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d005      	beq.n	80013ee <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	0010      	movs	r0, r2
 80013ea:	4798      	blx	r3
    }
  }
}
 80013ec:	e7ff      	b.n	80013ee <HAL_DMA_IRQHandler+0x13c>
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b004      	add	sp, #16
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b084      	sub	sp, #16
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800140c:	2101      	movs	r1, #1
 800140e:	4091      	lsls	r1, r2
 8001410:	000a      	movs	r2, r1
 8001412:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b10      	cmp	r3, #16
 8001422:	d108      	bne.n	8001436 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68ba      	ldr	r2, [r7, #8]
 8001432:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001434:	e007      	b.n	8001446 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	60da      	str	r2, [r3, #12]
}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	46bd      	mov	sp, r7
 800144a:	b004      	add	sp, #16
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a08      	ldr	r2, [pc, #32]	; (8001480 <DMA_CalcBaseAndBitshift+0x30>)
 800145e:	4694      	mov	ip, r2
 8001460:	4463      	add	r3, ip
 8001462:	2114      	movs	r1, #20
 8001464:	0018      	movs	r0, r3
 8001466:	f7fe fe4f 	bl	8000108 <__udivsi3>
 800146a:	0003      	movs	r3, r0
 800146c:	009a      	lsls	r2, r3, #2
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a03      	ldr	r2, [pc, #12]	; (8001484 <DMA_CalcBaseAndBitshift+0x34>)
 8001476:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001478:	46c0      	nop			; (mov r8, r8)
 800147a:	46bd      	mov	sp, r7
 800147c:	b002      	add	sp, #8
 800147e:	bd80      	pop	{r7, pc}
 8001480:	bffdfff8 	.word	0xbffdfff8
 8001484:	40020000 	.word	0x40020000

08001488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001496:	e14f      	b.n	8001738 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2101      	movs	r1, #1
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	4091      	lsls	r1, r2
 80014a2:	000a      	movs	r2, r1
 80014a4:	4013      	ands	r3, r2
 80014a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d100      	bne.n	80014b0 <HAL_GPIO_Init+0x28>
 80014ae:	e140      	b.n	8001732 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2203      	movs	r2, #3
 80014b6:	4013      	ands	r3, r2
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d005      	beq.n	80014c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2203      	movs	r2, #3
 80014c2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d130      	bne.n	800152a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	2203      	movs	r2, #3
 80014d4:	409a      	lsls	r2, r3
 80014d6:	0013      	movs	r3, r2
 80014d8:	43da      	mvns	r2, r3
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	68da      	ldr	r2, [r3, #12]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	409a      	lsls	r2, r3
 80014ea:	0013      	movs	r3, r2
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014fe:	2201      	movs	r2, #1
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	409a      	lsls	r2, r3
 8001504:	0013      	movs	r3, r2
 8001506:	43da      	mvns	r2, r3
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	4013      	ands	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	091b      	lsrs	r3, r3, #4
 8001514:	2201      	movs	r2, #1
 8001516:	401a      	ands	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	409a      	lsls	r2, r3
 800151c:	0013      	movs	r3, r2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2203      	movs	r2, #3
 8001530:	4013      	ands	r3, r2
 8001532:	2b03      	cmp	r3, #3
 8001534:	d017      	beq.n	8001566 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	2203      	movs	r2, #3
 8001542:	409a      	lsls	r2, r3
 8001544:	0013      	movs	r3, r2
 8001546:	43da      	mvns	r2, r3
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	4013      	ands	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	409a      	lsls	r2, r3
 8001558:	0013      	movs	r3, r2
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2203      	movs	r2, #3
 800156c:	4013      	ands	r3, r2
 800156e:	2b02      	cmp	r3, #2
 8001570:	d123      	bne.n	80015ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	08da      	lsrs	r2, r3, #3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3208      	adds	r2, #8
 800157a:	0092      	lsls	r2, r2, #2
 800157c:	58d3      	ldr	r3, [r2, r3]
 800157e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	2207      	movs	r2, #7
 8001584:	4013      	ands	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	220f      	movs	r2, #15
 800158a:	409a      	lsls	r2, r3
 800158c:	0013      	movs	r3, r2
 800158e:	43da      	mvns	r2, r3
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	691a      	ldr	r2, [r3, #16]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2107      	movs	r1, #7
 800159e:	400b      	ands	r3, r1
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	409a      	lsls	r2, r3
 80015a4:	0013      	movs	r3, r2
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	08da      	lsrs	r2, r3, #3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3208      	adds	r2, #8
 80015b4:	0092      	lsls	r2, r2, #2
 80015b6:	6939      	ldr	r1, [r7, #16]
 80015b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	2203      	movs	r2, #3
 80015c6:	409a      	lsls	r2, r3
 80015c8:	0013      	movs	r3, r2
 80015ca:	43da      	mvns	r2, r3
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2203      	movs	r2, #3
 80015d8:	401a      	ands	r2, r3
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	409a      	lsls	r2, r3
 80015e0:	0013      	movs	r3, r2
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	23c0      	movs	r3, #192	; 0xc0
 80015f4:	029b      	lsls	r3, r3, #10
 80015f6:	4013      	ands	r3, r2
 80015f8:	d100      	bne.n	80015fc <HAL_GPIO_Init+0x174>
 80015fa:	e09a      	b.n	8001732 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fc:	4b54      	ldr	r3, [pc, #336]	; (8001750 <HAL_GPIO_Init+0x2c8>)
 80015fe:	699a      	ldr	r2, [r3, #24]
 8001600:	4b53      	ldr	r3, [pc, #332]	; (8001750 <HAL_GPIO_Init+0x2c8>)
 8001602:	2101      	movs	r1, #1
 8001604:	430a      	orrs	r2, r1
 8001606:	619a      	str	r2, [r3, #24]
 8001608:	4b51      	ldr	r3, [pc, #324]	; (8001750 <HAL_GPIO_Init+0x2c8>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	2201      	movs	r2, #1
 800160e:	4013      	ands	r3, r2
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001614:	4a4f      	ldr	r2, [pc, #316]	; (8001754 <HAL_GPIO_Init+0x2cc>)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	3302      	adds	r3, #2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	589b      	ldr	r3, [r3, r2]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	2203      	movs	r2, #3
 8001626:	4013      	ands	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	220f      	movs	r2, #15
 800162c:	409a      	lsls	r2, r3
 800162e:	0013      	movs	r3, r2
 8001630:	43da      	mvns	r2, r3
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	2390      	movs	r3, #144	; 0x90
 800163c:	05db      	lsls	r3, r3, #23
 800163e:	429a      	cmp	r2, r3
 8001640:	d013      	beq.n	800166a <HAL_GPIO_Init+0x1e2>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a44      	ldr	r2, [pc, #272]	; (8001758 <HAL_GPIO_Init+0x2d0>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d00d      	beq.n	8001666 <HAL_GPIO_Init+0x1de>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a43      	ldr	r2, [pc, #268]	; (800175c <HAL_GPIO_Init+0x2d4>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d007      	beq.n	8001662 <HAL_GPIO_Init+0x1da>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a42      	ldr	r2, [pc, #264]	; (8001760 <HAL_GPIO_Init+0x2d8>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d101      	bne.n	800165e <HAL_GPIO_Init+0x1d6>
 800165a:	2303      	movs	r3, #3
 800165c:	e006      	b.n	800166c <HAL_GPIO_Init+0x1e4>
 800165e:	2305      	movs	r3, #5
 8001660:	e004      	b.n	800166c <HAL_GPIO_Init+0x1e4>
 8001662:	2302      	movs	r3, #2
 8001664:	e002      	b.n	800166c <HAL_GPIO_Init+0x1e4>
 8001666:	2301      	movs	r3, #1
 8001668:	e000      	b.n	800166c <HAL_GPIO_Init+0x1e4>
 800166a:	2300      	movs	r3, #0
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	2103      	movs	r1, #3
 8001670:	400a      	ands	r2, r1
 8001672:	0092      	lsls	r2, r2, #2
 8001674:	4093      	lsls	r3, r2
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800167c:	4935      	ldr	r1, [pc, #212]	; (8001754 <HAL_GPIO_Init+0x2cc>)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	089b      	lsrs	r3, r3, #2
 8001682:	3302      	adds	r3, #2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800168a:	4b36      	ldr	r3, [pc, #216]	; (8001764 <HAL_GPIO_Init+0x2dc>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	43da      	mvns	r2, r3
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4013      	ands	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	035b      	lsls	r3, r3, #13
 80016a2:	4013      	ands	r3, r2
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016ae:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <HAL_GPIO_Init+0x2dc>)
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80016b4:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <HAL_GPIO_Init+0x2dc>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	43da      	mvns	r2, r3
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	039b      	lsls	r3, r3, #14
 80016cc:	4013      	ands	r3, r2
 80016ce:	d003      	beq.n	80016d8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016d8:	4b22      	ldr	r3, [pc, #136]	; (8001764 <HAL_GPIO_Init+0x2dc>)
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80016de:	4b21      	ldr	r3, [pc, #132]	; (8001764 <HAL_GPIO_Init+0x2dc>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	43da      	mvns	r2, r3
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4013      	ands	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	029b      	lsls	r3, r3, #10
 80016f6:	4013      	ands	r3, r2
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4313      	orrs	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001702:	4b18      	ldr	r3, [pc, #96]	; (8001764 <HAL_GPIO_Init+0x2dc>)
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001708:	4b16      	ldr	r3, [pc, #88]	; (8001764 <HAL_GPIO_Init+0x2dc>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	43da      	mvns	r2, r3
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	4013      	ands	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	025b      	lsls	r3, r3, #9
 8001720:	4013      	ands	r3, r2
 8001722:	d003      	beq.n	800172c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	4313      	orrs	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800172c:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <HAL_GPIO_Init+0x2dc>)
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	3301      	adds	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	40da      	lsrs	r2, r3
 8001740:	1e13      	subs	r3, r2, #0
 8001742:	d000      	beq.n	8001746 <HAL_GPIO_Init+0x2be>
 8001744:	e6a8      	b.n	8001498 <HAL_GPIO_Init+0x10>
  } 
}
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	46c0      	nop			; (mov r8, r8)
 800174a:	46bd      	mov	sp, r7
 800174c:	b006      	add	sp, #24
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40021000 	.word	0x40021000
 8001754:	40010000 	.word	0x40010000
 8001758:	48000400 	.word	0x48000400
 800175c:	48000800 	.word	0x48000800
 8001760:	48000c00 	.word	0x48000c00
 8001764:	40010400 	.word	0x40010400

08001768 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001776:	e0b1      	b.n	80018dc <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001778:	2201      	movs	r2, #1
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	409a      	lsls	r2, r3
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d100      	bne.n	800178c <HAL_GPIO_DeInit+0x24>
 800178a:	e0a4      	b.n	80018d6 <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800178c:	4a59      	ldr	r2, [pc, #356]	; (80018f4 <HAL_GPIO_DeInit+0x18c>)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	089b      	lsrs	r3, r3, #2
 8001792:	3302      	adds	r3, #2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	589b      	ldr	r3, [r3, r2]
 8001798:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	2203      	movs	r2, #3
 800179e:	4013      	ands	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	220f      	movs	r2, #15
 80017a4:	409a      	lsls	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4013      	ands	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	2390      	movs	r3, #144	; 0x90
 80017b0:	05db      	lsls	r3, r3, #23
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d013      	beq.n	80017de <HAL_GPIO_DeInit+0x76>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a4f      	ldr	r2, [pc, #316]	; (80018f8 <HAL_GPIO_DeInit+0x190>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d00d      	beq.n	80017da <HAL_GPIO_DeInit+0x72>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a4e      	ldr	r2, [pc, #312]	; (80018fc <HAL_GPIO_DeInit+0x194>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d007      	beq.n	80017d6 <HAL_GPIO_DeInit+0x6e>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4d      	ldr	r2, [pc, #308]	; (8001900 <HAL_GPIO_DeInit+0x198>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d101      	bne.n	80017d2 <HAL_GPIO_DeInit+0x6a>
 80017ce:	2303      	movs	r3, #3
 80017d0:	e006      	b.n	80017e0 <HAL_GPIO_DeInit+0x78>
 80017d2:	2305      	movs	r3, #5
 80017d4:	e004      	b.n	80017e0 <HAL_GPIO_DeInit+0x78>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e002      	b.n	80017e0 <HAL_GPIO_DeInit+0x78>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <HAL_GPIO_DeInit+0x78>
 80017de:	2300      	movs	r3, #0
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	2103      	movs	r1, #3
 80017e4:	400a      	ands	r2, r1
 80017e6:	0092      	lsls	r2, r2, #2
 80017e8:	4093      	lsls	r3, r2
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d132      	bne.n	8001856 <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80017f0:	4b44      	ldr	r3, [pc, #272]	; (8001904 <HAL_GPIO_DeInit+0x19c>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	43d9      	mvns	r1, r3
 80017f8:	4b42      	ldr	r3, [pc, #264]	; (8001904 <HAL_GPIO_DeInit+0x19c>)
 80017fa:	400a      	ands	r2, r1
 80017fc:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80017fe:	4b41      	ldr	r3, [pc, #260]	; (8001904 <HAL_GPIO_DeInit+0x19c>)
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	43d9      	mvns	r1, r3
 8001806:	4b3f      	ldr	r3, [pc, #252]	; (8001904 <HAL_GPIO_DeInit+0x19c>)
 8001808:	400a      	ands	r2, r1
 800180a:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800180c:	4b3d      	ldr	r3, [pc, #244]	; (8001904 <HAL_GPIO_DeInit+0x19c>)
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	43d9      	mvns	r1, r3
 8001814:	4b3b      	ldr	r3, [pc, #236]	; (8001904 <HAL_GPIO_DeInit+0x19c>)
 8001816:	400a      	ands	r2, r1
 8001818:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800181a:	4b3a      	ldr	r3, [pc, #232]	; (8001904 <HAL_GPIO_DeInit+0x19c>)
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	43d9      	mvns	r1, r3
 8001822:	4b38      	ldr	r3, [pc, #224]	; (8001904 <HAL_GPIO_DeInit+0x19c>)
 8001824:	400a      	ands	r2, r1
 8001826:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	2203      	movs	r2, #3
 800182c:	4013      	ands	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	220f      	movs	r2, #15
 8001832:	409a      	lsls	r2, r3
 8001834:	0013      	movs	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001838:	4a2e      	ldr	r2, [pc, #184]	; (80018f4 <HAL_GPIO_DeInit+0x18c>)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	089b      	lsrs	r3, r3, #2
 800183e:	3302      	adds	r3, #2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	589a      	ldr	r2, [r3, r2]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	43d9      	mvns	r1, r3
 8001848:	482a      	ldr	r0, [pc, #168]	; (80018f4 <HAL_GPIO_DeInit+0x18c>)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	089b      	lsrs	r3, r3, #2
 800184e:	400a      	ands	r2, r1
 8001850:	3302      	adds	r3, #2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	0052      	lsls	r2, r2, #1
 800185e:	2103      	movs	r1, #3
 8001860:	4091      	lsls	r1, r2
 8001862:	000a      	movs	r2, r1
 8001864:	43d2      	mvns	r2, r2
 8001866:	401a      	ands	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	08da      	lsrs	r2, r3, #3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3208      	adds	r2, #8
 8001874:	0092      	lsls	r2, r2, #2
 8001876:	58d3      	ldr	r3, [r2, r3]
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	2107      	movs	r1, #7
 800187c:	400a      	ands	r2, r1
 800187e:	0092      	lsls	r2, r2, #2
 8001880:	210f      	movs	r1, #15
 8001882:	4091      	lsls	r1, r2
 8001884:	000a      	movs	r2, r1
 8001886:	43d1      	mvns	r1, r2
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	08d2      	lsrs	r2, r2, #3
 800188c:	4019      	ands	r1, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3208      	adds	r2, #8
 8001892:	0092      	lsls	r2, r2, #2
 8001894:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	0052      	lsls	r2, r2, #1
 800189e:	2103      	movs	r1, #3
 80018a0:	4091      	lsls	r1, r2
 80018a2:	000a      	movs	r2, r1
 80018a4:	43d2      	mvns	r2, r2
 80018a6:	401a      	ands	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2101      	movs	r1, #1
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	4091      	lsls	r1, r2
 80018b6:	000a      	movs	r2, r1
 80018b8:	43d2      	mvns	r2, r2
 80018ba:	401a      	ands	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	0052      	lsls	r2, r2, #1
 80018c8:	2103      	movs	r1, #3
 80018ca:	4091      	lsls	r1, r2
 80018cc:	000a      	movs	r2, r1
 80018ce:	43d2      	mvns	r2, r2
 80018d0:	401a      	ands	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	609a      	str	r2, [r3, #8]

    }

    position++;
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	3301      	adds	r3, #1
 80018da:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	40da      	lsrs	r2, r3
 80018e2:	1e13      	subs	r3, r2, #0
 80018e4:	d000      	beq.n	80018e8 <HAL_GPIO_DeInit+0x180>
 80018e6:	e747      	b.n	8001778 <HAL_GPIO_DeInit+0x10>
  }
}
 80018e8:	46c0      	nop			; (mov r8, r8)
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b006      	add	sp, #24
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	40010000 	.word	0x40010000
 80018f8:	48000400 	.word	0x48000400
 80018fc:	48000800 	.word	0x48000800
 8001900:	48000c00 	.word	0x48000c00
 8001904:	40010400 	.word	0x40010400

08001908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	0008      	movs	r0, r1
 8001912:	0011      	movs	r1, r2
 8001914:	1cbb      	adds	r3, r7, #2
 8001916:	1c02      	adds	r2, r0, #0
 8001918:	801a      	strh	r2, [r3, #0]
 800191a:	1c7b      	adds	r3, r7, #1
 800191c:	1c0a      	adds	r2, r1, #0
 800191e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001920:	1c7b      	adds	r3, r7, #1
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d004      	beq.n	8001932 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001928:	1cbb      	adds	r3, r7, #2
 800192a:	881a      	ldrh	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001930:	e003      	b.n	800193a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001932:	1cbb      	adds	r3, r7, #2
 8001934:	881a      	ldrh	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	629a      	str	r2, [r3, #40]	; 0x28
}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	46bd      	mov	sp, r7
 800193e:	b002      	add	sp, #8
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e301      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2201      	movs	r2, #1
 800195c:	4013      	ands	r3, r2
 800195e:	d100      	bne.n	8001962 <HAL_RCC_OscConfig+0x1e>
 8001960:	e08d      	b.n	8001a7e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001962:	4bc3      	ldr	r3, [pc, #780]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	220c      	movs	r2, #12
 8001968:	4013      	ands	r3, r2
 800196a:	2b04      	cmp	r3, #4
 800196c:	d00e      	beq.n	800198c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800196e:	4bc0      	ldr	r3, [pc, #768]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	220c      	movs	r2, #12
 8001974:	4013      	ands	r3, r2
 8001976:	2b08      	cmp	r3, #8
 8001978:	d116      	bne.n	80019a8 <HAL_RCC_OscConfig+0x64>
 800197a:	4bbd      	ldr	r3, [pc, #756]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	025b      	lsls	r3, r3, #9
 8001982:	401a      	ands	r2, r3
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	025b      	lsls	r3, r3, #9
 8001988:	429a      	cmp	r2, r3
 800198a:	d10d      	bne.n	80019a8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800198c:	4bb8      	ldr	r3, [pc, #736]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	029b      	lsls	r3, r3, #10
 8001994:	4013      	ands	r3, r2
 8001996:	d100      	bne.n	800199a <HAL_RCC_OscConfig+0x56>
 8001998:	e070      	b.n	8001a7c <HAL_RCC_OscConfig+0x138>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d000      	beq.n	80019a4 <HAL_RCC_OscConfig+0x60>
 80019a2:	e06b      	b.n	8001a7c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e2d8      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d107      	bne.n	80019c0 <HAL_RCC_OscConfig+0x7c>
 80019b0:	4baf      	ldr	r3, [pc, #700]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4bae      	ldr	r3, [pc, #696]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 80019b6:	2180      	movs	r1, #128	; 0x80
 80019b8:	0249      	lsls	r1, r1, #9
 80019ba:	430a      	orrs	r2, r1
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	e02f      	b.n	8001a20 <HAL_RCC_OscConfig+0xdc>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10c      	bne.n	80019e2 <HAL_RCC_OscConfig+0x9e>
 80019c8:	4ba9      	ldr	r3, [pc, #676]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4ba8      	ldr	r3, [pc, #672]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 80019ce:	49a9      	ldr	r1, [pc, #676]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 80019d0:	400a      	ands	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	4ba6      	ldr	r3, [pc, #664]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4ba5      	ldr	r3, [pc, #660]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 80019da:	49a7      	ldr	r1, [pc, #668]	; (8001c78 <HAL_RCC_OscConfig+0x334>)
 80019dc:	400a      	ands	r2, r1
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	e01e      	b.n	8001a20 <HAL_RCC_OscConfig+0xdc>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b05      	cmp	r3, #5
 80019e8:	d10e      	bne.n	8001a08 <HAL_RCC_OscConfig+0xc4>
 80019ea:	4ba1      	ldr	r3, [pc, #644]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	4ba0      	ldr	r3, [pc, #640]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 80019f0:	2180      	movs	r1, #128	; 0x80
 80019f2:	02c9      	lsls	r1, r1, #11
 80019f4:	430a      	orrs	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	4b9d      	ldr	r3, [pc, #628]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b9c      	ldr	r3, [pc, #624]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 80019fe:	2180      	movs	r1, #128	; 0x80
 8001a00:	0249      	lsls	r1, r1, #9
 8001a02:	430a      	orrs	r2, r1
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	e00b      	b.n	8001a20 <HAL_RCC_OscConfig+0xdc>
 8001a08:	4b99      	ldr	r3, [pc, #612]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b98      	ldr	r3, [pc, #608]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001a0e:	4999      	ldr	r1, [pc, #612]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001a10:	400a      	ands	r2, r1
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	4b96      	ldr	r3, [pc, #600]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b95      	ldr	r3, [pc, #596]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001a1a:	4997      	ldr	r1, [pc, #604]	; (8001c78 <HAL_RCC_OscConfig+0x334>)
 8001a1c:	400a      	ands	r2, r1
 8001a1e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d014      	beq.n	8001a52 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a28:	f7ff fa64 	bl	8000ef4 <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a32:	f7ff fa5f 	bl	8000ef4 <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b64      	cmp	r3, #100	; 0x64
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e28a      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a44:	4b8a      	ldr	r3, [pc, #552]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	029b      	lsls	r3, r3, #10
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0xee>
 8001a50:	e015      	b.n	8001a7e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a52:	f7ff fa4f 	bl	8000ef4 <HAL_GetTick>
 8001a56:	0003      	movs	r3, r0
 8001a58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a5c:	f7ff fa4a 	bl	8000ef4 <HAL_GetTick>
 8001a60:	0002      	movs	r2, r0
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b64      	cmp	r3, #100	; 0x64
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e275      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6e:	4b80      	ldr	r3, [pc, #512]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	029b      	lsls	r3, r3, #10
 8001a76:	4013      	ands	r3, r2
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x118>
 8001a7a:	e000      	b.n	8001a7e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2202      	movs	r2, #2
 8001a84:	4013      	ands	r3, r2
 8001a86:	d100      	bne.n	8001a8a <HAL_RCC_OscConfig+0x146>
 8001a88:	e069      	b.n	8001b5e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a8a:	4b79      	ldr	r3, [pc, #484]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	220c      	movs	r2, #12
 8001a90:	4013      	ands	r3, r2
 8001a92:	d00b      	beq.n	8001aac <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a94:	4b76      	ldr	r3, [pc, #472]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	220c      	movs	r2, #12
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d11c      	bne.n	8001ada <HAL_RCC_OscConfig+0x196>
 8001aa0:	4b73      	ldr	r3, [pc, #460]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	025b      	lsls	r3, r3, #9
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d116      	bne.n	8001ada <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aac:	4b70      	ldr	r3, [pc, #448]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d005      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x17e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d001      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e24b      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac2:	4b6b      	ldr	r3, [pc, #428]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	22f8      	movs	r2, #248	; 0xf8
 8001ac8:	4393      	bics	r3, r2
 8001aca:	0019      	movs	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	00da      	lsls	r2, r3, #3
 8001ad2:	4b67      	ldr	r3, [pc, #412]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad8:	e041      	b.n	8001b5e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d024      	beq.n	8001b2c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae2:	4b63      	ldr	r3, [pc, #396]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4b62      	ldr	r3, [pc, #392]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001ae8:	2101      	movs	r1, #1
 8001aea:	430a      	orrs	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aee:	f7ff fa01 	bl	8000ef4 <HAL_GetTick>
 8001af2:	0003      	movs	r3, r0
 8001af4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af8:	f7ff f9fc 	bl	8000ef4 <HAL_GetTick>
 8001afc:	0002      	movs	r2, r0
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e227      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0a:	4b59      	ldr	r3, [pc, #356]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	4013      	ands	r3, r2
 8001b12:	d0f1      	beq.n	8001af8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b14:	4b56      	ldr	r3, [pc, #344]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	22f8      	movs	r2, #248	; 0xf8
 8001b1a:	4393      	bics	r3, r2
 8001b1c:	0019      	movs	r1, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	00da      	lsls	r2, r3, #3
 8001b24:	4b52      	ldr	r3, [pc, #328]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001b26:	430a      	orrs	r2, r1
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	e018      	b.n	8001b5e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b2c:	4b50      	ldr	r3, [pc, #320]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b4f      	ldr	r3, [pc, #316]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001b32:	2101      	movs	r1, #1
 8001b34:	438a      	bics	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7ff f9dc 	bl	8000ef4 <HAL_GetTick>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b42:	f7ff f9d7 	bl	8000ef4 <HAL_GetTick>
 8001b46:	0002      	movs	r2, r0
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e202      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b54:	4b46      	ldr	r3, [pc, #280]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2202      	movs	r2, #2
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d1f1      	bne.n	8001b42 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2208      	movs	r2, #8
 8001b64:	4013      	ands	r3, r2
 8001b66:	d036      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d019      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b70:	4b3f      	ldr	r3, [pc, #252]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b74:	4b3e      	ldr	r3, [pc, #248]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001b76:	2101      	movs	r1, #1
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7c:	f7ff f9ba 	bl	8000ef4 <HAL_GetTick>
 8001b80:	0003      	movs	r3, r0
 8001b82:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b86:	f7ff f9b5 	bl	8000ef4 <HAL_GetTick>
 8001b8a:	0002      	movs	r2, r0
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e1e0      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b98:	4b35      	ldr	r3, [pc, #212]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d0f1      	beq.n	8001b86 <HAL_RCC_OscConfig+0x242>
 8001ba2:	e018      	b.n	8001bd6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba4:	4b32      	ldr	r3, [pc, #200]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001ba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ba8:	4b31      	ldr	r3, [pc, #196]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001baa:	2101      	movs	r1, #1
 8001bac:	438a      	bics	r2, r1
 8001bae:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb0:	f7ff f9a0 	bl	8000ef4 <HAL_GetTick>
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bba:	f7ff f99b 	bl	8000ef4 <HAL_GetTick>
 8001bbe:	0002      	movs	r2, r0
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e1c6      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bcc:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d1f1      	bne.n	8001bba <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2204      	movs	r2, #4
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d100      	bne.n	8001be2 <HAL_RCC_OscConfig+0x29e>
 8001be0:	e0b4      	b.n	8001d4c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	201f      	movs	r0, #31
 8001be4:	183b      	adds	r3, r7, r0
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bea:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001bec:	69da      	ldr	r2, [r3, #28]
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	055b      	lsls	r3, r3, #21
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d110      	bne.n	8001c18 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf6:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001bf8:	69da      	ldr	r2, [r3, #28]
 8001bfa:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001bfc:	2180      	movs	r1, #128	; 0x80
 8001bfe:	0549      	lsls	r1, r1, #21
 8001c00:	430a      	orrs	r2, r1
 8001c02:	61da      	str	r2, [r3, #28]
 8001c04:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001c06:	69da      	ldr	r2, [r3, #28]
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	055b      	lsls	r3, r3, #21
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c12:	183b      	adds	r3, r7, r0
 8001c14:	2201      	movs	r2, #1
 8001c16:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <HAL_RCC_OscConfig+0x338>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	2380      	movs	r3, #128	; 0x80
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4013      	ands	r3, r2
 8001c22:	d11a      	bne.n	8001c5a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <HAL_RCC_OscConfig+0x338>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <HAL_RCC_OscConfig+0x338>)
 8001c2a:	2180      	movs	r1, #128	; 0x80
 8001c2c:	0049      	lsls	r1, r1, #1
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c32:	f7ff f95f 	bl	8000ef4 <HAL_GetTick>
 8001c36:	0003      	movs	r3, r0
 8001c38:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3c:	f7ff f95a 	bl	8000ef4 <HAL_GetTick>
 8001c40:	0002      	movs	r2, r0
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	; 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e185      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_RCC_OscConfig+0x338>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4013      	ands	r3, r2
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d10e      	bne.n	8001c80 <HAL_RCC_OscConfig+0x33c>
 8001c62:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001c64:	6a1a      	ldr	r2, [r3, #32]
 8001c66:	4b02      	ldr	r3, [pc, #8]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001c68:	2101      	movs	r1, #1
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	621a      	str	r2, [r3, #32]
 8001c6e:	e035      	b.n	8001cdc <HAL_RCC_OscConfig+0x398>
 8001c70:	40021000 	.word	0x40021000
 8001c74:	fffeffff 	.word	0xfffeffff
 8001c78:	fffbffff 	.word	0xfffbffff
 8001c7c:	40007000 	.word	0x40007000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10c      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x35e>
 8001c88:	4bb6      	ldr	r3, [pc, #728]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001c8a:	6a1a      	ldr	r2, [r3, #32]
 8001c8c:	4bb5      	ldr	r3, [pc, #724]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001c8e:	2101      	movs	r1, #1
 8001c90:	438a      	bics	r2, r1
 8001c92:	621a      	str	r2, [r3, #32]
 8001c94:	4bb3      	ldr	r3, [pc, #716]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001c96:	6a1a      	ldr	r2, [r3, #32]
 8001c98:	4bb2      	ldr	r3, [pc, #712]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001c9a:	2104      	movs	r1, #4
 8001c9c:	438a      	bics	r2, r1
 8001c9e:	621a      	str	r2, [r3, #32]
 8001ca0:	e01c      	b.n	8001cdc <HAL_RCC_OscConfig+0x398>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b05      	cmp	r3, #5
 8001ca8:	d10c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x380>
 8001caa:	4bae      	ldr	r3, [pc, #696]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001cac:	6a1a      	ldr	r2, [r3, #32]
 8001cae:	4bad      	ldr	r3, [pc, #692]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001cb0:	2104      	movs	r1, #4
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	621a      	str	r2, [r3, #32]
 8001cb6:	4bab      	ldr	r3, [pc, #684]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001cb8:	6a1a      	ldr	r2, [r3, #32]
 8001cba:	4baa      	ldr	r3, [pc, #680]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	621a      	str	r2, [r3, #32]
 8001cc2:	e00b      	b.n	8001cdc <HAL_RCC_OscConfig+0x398>
 8001cc4:	4ba7      	ldr	r3, [pc, #668]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001cc6:	6a1a      	ldr	r2, [r3, #32]
 8001cc8:	4ba6      	ldr	r3, [pc, #664]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001cca:	2101      	movs	r1, #1
 8001ccc:	438a      	bics	r2, r1
 8001cce:	621a      	str	r2, [r3, #32]
 8001cd0:	4ba4      	ldr	r3, [pc, #656]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001cd2:	6a1a      	ldr	r2, [r3, #32]
 8001cd4:	4ba3      	ldr	r3, [pc, #652]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001cd6:	2104      	movs	r1, #4
 8001cd8:	438a      	bics	r2, r1
 8001cda:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d014      	beq.n	8001d0e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce4:	f7ff f906 	bl	8000ef4 <HAL_GetTick>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cec:	e009      	b.n	8001d02 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cee:	f7ff f901 	bl	8000ef4 <HAL_GetTick>
 8001cf2:	0002      	movs	r2, r0
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	4a9b      	ldr	r2, [pc, #620]	; (8001f68 <HAL_RCC_OscConfig+0x624>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e12b      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d02:	4b98      	ldr	r3, [pc, #608]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	2202      	movs	r2, #2
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x3aa>
 8001d0c:	e013      	b.n	8001d36 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0e:	f7ff f8f1 	bl	8000ef4 <HAL_GetTick>
 8001d12:	0003      	movs	r3, r0
 8001d14:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d16:	e009      	b.n	8001d2c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d18:	f7ff f8ec 	bl	8000ef4 <HAL_GetTick>
 8001d1c:	0002      	movs	r2, r0
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	4a91      	ldr	r2, [pc, #580]	; (8001f68 <HAL_RCC_OscConfig+0x624>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e116      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d2c:	4b8d      	ldr	r3, [pc, #564]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	2202      	movs	r2, #2
 8001d32:	4013      	ands	r3, r2
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d36:	231f      	movs	r3, #31
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d105      	bne.n	8001d4c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d40:	4b88      	ldr	r3, [pc, #544]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001d42:	69da      	ldr	r2, [r3, #28]
 8001d44:	4b87      	ldr	r3, [pc, #540]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001d46:	4989      	ldr	r1, [pc, #548]	; (8001f6c <HAL_RCC_OscConfig+0x628>)
 8001d48:	400a      	ands	r2, r1
 8001d4a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2210      	movs	r2, #16
 8001d52:	4013      	ands	r3, r2
 8001d54:	d063      	beq.n	8001e1e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d12a      	bne.n	8001db4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d5e:	4b81      	ldr	r3, [pc, #516]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d62:	4b80      	ldr	r3, [pc, #512]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001d64:	2104      	movs	r1, #4
 8001d66:	430a      	orrs	r2, r1
 8001d68:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001d6a:	4b7e      	ldr	r3, [pc, #504]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001d6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d6e:	4b7d      	ldr	r3, [pc, #500]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001d70:	2101      	movs	r1, #1
 8001d72:	430a      	orrs	r2, r1
 8001d74:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d76:	f7ff f8bd 	bl	8000ef4 <HAL_GetTick>
 8001d7a:	0003      	movs	r3, r0
 8001d7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d80:	f7ff f8b8 	bl	8000ef4 <HAL_GetTick>
 8001d84:	0002      	movs	r2, r0
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e0e3      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d92:	4b74      	ldr	r3, [pc, #464]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d96:	2202      	movs	r2, #2
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d0f1      	beq.n	8001d80 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d9c:	4b71      	ldr	r3, [pc, #452]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da0:	22f8      	movs	r2, #248	; 0xf8
 8001da2:	4393      	bics	r3, r2
 8001da4:	0019      	movs	r1, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	00da      	lsls	r2, r3, #3
 8001dac:	4b6d      	ldr	r3, [pc, #436]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001dae:	430a      	orrs	r2, r1
 8001db0:	635a      	str	r2, [r3, #52]	; 0x34
 8001db2:	e034      	b.n	8001e1e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	3305      	adds	r3, #5
 8001dba:	d111      	bne.n	8001de0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001dbc:	4b69      	ldr	r3, [pc, #420]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dc0:	4b68      	ldr	r3, [pc, #416]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001dc2:	2104      	movs	r1, #4
 8001dc4:	438a      	bics	r2, r1
 8001dc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001dc8:	4b66      	ldr	r3, [pc, #408]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dcc:	22f8      	movs	r2, #248	; 0xf8
 8001dce:	4393      	bics	r3, r2
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	00da      	lsls	r2, r3, #3
 8001dd8:	4b62      	ldr	r3, [pc, #392]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	635a      	str	r2, [r3, #52]	; 0x34
 8001dde:	e01e      	b.n	8001e1e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001de0:	4b60      	ldr	r3, [pc, #384]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001de4:	4b5f      	ldr	r3, [pc, #380]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001de6:	2104      	movs	r1, #4
 8001de8:	430a      	orrs	r2, r1
 8001dea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001dec:	4b5d      	ldr	r3, [pc, #372]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001df0:	4b5c      	ldr	r3, [pc, #368]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001df2:	2101      	movs	r1, #1
 8001df4:	438a      	bics	r2, r1
 8001df6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df8:	f7ff f87c 	bl	8000ef4 <HAL_GetTick>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e02:	f7ff f877 	bl	8000ef4 <HAL_GetTick>
 8001e06:	0002      	movs	r2, r0
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e0a2      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e14:	4b53      	ldr	r3, [pc, #332]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e18:	2202      	movs	r2, #2
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d1f1      	bne.n	8001e02 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d100      	bne.n	8001e28 <HAL_RCC_OscConfig+0x4e4>
 8001e26:	e097      	b.n	8001f58 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e28:	4b4e      	ldr	r3, [pc, #312]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	220c      	movs	r2, #12
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d100      	bne.n	8001e36 <HAL_RCC_OscConfig+0x4f2>
 8001e34:	e06b      	b.n	8001f0e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d14c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3e:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	4b48      	ldr	r3, [pc, #288]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001e44:	494a      	ldr	r1, [pc, #296]	; (8001f70 <HAL_RCC_OscConfig+0x62c>)
 8001e46:	400a      	ands	r2, r1
 8001e48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7ff f853 	bl	8000ef4 <HAL_GetTick>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e54:	f7ff f84e 	bl	8000ef4 <HAL_GetTick>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e079      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e66:	4b3f      	ldr	r3, [pc, #252]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	2380      	movs	r3, #128	; 0x80
 8001e6c:	049b      	lsls	r3, r3, #18
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e72:	4b3c      	ldr	r3, [pc, #240]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e76:	220f      	movs	r2, #15
 8001e78:	4393      	bics	r3, r2
 8001e7a:	0019      	movs	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e80:	4b38      	ldr	r3, [pc, #224]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001e82:	430a      	orrs	r2, r1
 8001e84:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e86:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	4a3a      	ldr	r2, [pc, #232]	; (8001f74 <HAL_RCC_OscConfig+0x630>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	0019      	movs	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	4b32      	ldr	r3, [pc, #200]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea0:	4b30      	ldr	r3, [pc, #192]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b2f      	ldr	r3, [pc, #188]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001ea6:	2180      	movs	r1, #128	; 0x80
 8001ea8:	0449      	lsls	r1, r1, #17
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eae:	f7ff f821 	bl	8000ef4 <HAL_GetTick>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb8:	f7ff f81c 	bl	8000ef4 <HAL_GetTick>
 8001ebc:	0002      	movs	r2, r0
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e047      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eca:	4b26      	ldr	r3, [pc, #152]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	049b      	lsls	r3, r3, #18
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x574>
 8001ed6:	e03f      	b.n	8001f58 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed8:	4b22      	ldr	r3, [pc, #136]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001ede:	4924      	ldr	r1, [pc, #144]	; (8001f70 <HAL_RCC_OscConfig+0x62c>)
 8001ee0:	400a      	ands	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7ff f806 	bl	8000ef4 <HAL_GetTick>
 8001ee8:	0003      	movs	r3, r0
 8001eea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eee:	f7ff f801 	bl	8000ef4 <HAL_GetTick>
 8001ef2:	0002      	movs	r2, r0
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e02c      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f00:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	049b      	lsls	r3, r3, #18
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d1f0      	bne.n	8001eee <HAL_RCC_OscConfig+0x5aa>
 8001f0c:	e024      	b.n	8001f58 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d101      	bne.n	8001f1a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e01f      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001f1a:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001f20:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f24:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	025b      	lsls	r3, r3, #9
 8001f2c:	401a      	ands	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d10e      	bne.n	8001f54 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	220f      	movs	r2, #15
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d107      	bne.n	8001f54 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	23f0      	movs	r3, #240	; 0xf0
 8001f48:	039b      	lsls	r3, r3, #14
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d001      	beq.n	8001f58 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e000      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	b008      	add	sp, #32
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	40021000 	.word	0x40021000
 8001f68:	00001388 	.word	0x00001388
 8001f6c:	efffffff 	.word	0xefffffff
 8001f70:	feffffff 	.word	0xfeffffff
 8001f74:	ffc2ffff 	.word	0xffc2ffff

08001f78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0b3      	b.n	80020f4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f8c:	4b5b      	ldr	r3, [pc, #364]	; (80020fc <HAL_RCC_ClockConfig+0x184>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2201      	movs	r2, #1
 8001f92:	4013      	ands	r3, r2
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d911      	bls.n	8001fbe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9a:	4b58      	ldr	r3, [pc, #352]	; (80020fc <HAL_RCC_ClockConfig+0x184>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	4393      	bics	r3, r2
 8001fa2:	0019      	movs	r1, r3
 8001fa4:	4b55      	ldr	r3, [pc, #340]	; (80020fc <HAL_RCC_ClockConfig+0x184>)
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fac:	4b53      	ldr	r3, [pc, #332]	; (80020fc <HAL_RCC_ClockConfig+0x184>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d001      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e09a      	b.n	80020f4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d015      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2204      	movs	r2, #4
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d006      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001fd2:	4b4b      	ldr	r3, [pc, #300]	; (8002100 <HAL_RCC_ClockConfig+0x188>)
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	4b4a      	ldr	r3, [pc, #296]	; (8002100 <HAL_RCC_ClockConfig+0x188>)
 8001fd8:	21e0      	movs	r1, #224	; 0xe0
 8001fda:	00c9      	lsls	r1, r1, #3
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe0:	4b47      	ldr	r3, [pc, #284]	; (8002100 <HAL_RCC_ClockConfig+0x188>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	22f0      	movs	r2, #240	; 0xf0
 8001fe6:	4393      	bics	r3, r2
 8001fe8:	0019      	movs	r1, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	4b44      	ldr	r3, [pc, #272]	; (8002100 <HAL_RCC_ClockConfig+0x188>)
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d040      	beq.n	8002080 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d107      	bne.n	8002016 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002006:	4b3e      	ldr	r3, [pc, #248]	; (8002100 <HAL_RCC_ClockConfig+0x188>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	029b      	lsls	r3, r3, #10
 800200e:	4013      	ands	r3, r2
 8002010:	d114      	bne.n	800203c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e06e      	b.n	80020f4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d107      	bne.n	800202e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201e:	4b38      	ldr	r3, [pc, #224]	; (8002100 <HAL_RCC_ClockConfig+0x188>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	049b      	lsls	r3, r3, #18
 8002026:	4013      	ands	r3, r2
 8002028:	d108      	bne.n	800203c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e062      	b.n	80020f4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202e:	4b34      	ldr	r3, [pc, #208]	; (8002100 <HAL_RCC_ClockConfig+0x188>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2202      	movs	r2, #2
 8002034:	4013      	ands	r3, r2
 8002036:	d101      	bne.n	800203c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e05b      	b.n	80020f4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800203c:	4b30      	ldr	r3, [pc, #192]	; (8002100 <HAL_RCC_ClockConfig+0x188>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2203      	movs	r2, #3
 8002042:	4393      	bics	r3, r2
 8002044:	0019      	movs	r1, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <HAL_RCC_ClockConfig+0x188>)
 800204c:	430a      	orrs	r2, r1
 800204e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002050:	f7fe ff50 	bl	8000ef4 <HAL_GetTick>
 8002054:	0003      	movs	r3, r0
 8002056:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002058:	e009      	b.n	800206e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205a:	f7fe ff4b 	bl	8000ef4 <HAL_GetTick>
 800205e:	0002      	movs	r2, r0
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	4a27      	ldr	r2, [pc, #156]	; (8002104 <HAL_RCC_ClockConfig+0x18c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d901      	bls.n	800206e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e042      	b.n	80020f4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206e:	4b24      	ldr	r3, [pc, #144]	; (8002100 <HAL_RCC_ClockConfig+0x188>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	220c      	movs	r2, #12
 8002074:	401a      	ands	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	429a      	cmp	r2, r3
 800207e:	d1ec      	bne.n	800205a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002080:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <HAL_RCC_ClockConfig+0x184>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2201      	movs	r2, #1
 8002086:	4013      	ands	r3, r2
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d211      	bcs.n	80020b2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208e:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <HAL_RCC_ClockConfig+0x184>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2201      	movs	r2, #1
 8002094:	4393      	bics	r3, r2
 8002096:	0019      	movs	r1, r3
 8002098:	4b18      	ldr	r3, [pc, #96]	; (80020fc <HAL_RCC_ClockConfig+0x184>)
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a0:	4b16      	ldr	r3, [pc, #88]	; (80020fc <HAL_RCC_ClockConfig+0x184>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2201      	movs	r2, #1
 80020a6:	4013      	ands	r3, r2
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d001      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e020      	b.n	80020f4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2204      	movs	r2, #4
 80020b8:	4013      	ands	r3, r2
 80020ba:	d009      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020bc:	4b10      	ldr	r3, [pc, #64]	; (8002100 <HAL_RCC_ClockConfig+0x188>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	4a11      	ldr	r2, [pc, #68]	; (8002108 <HAL_RCC_ClockConfig+0x190>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	0019      	movs	r1, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <HAL_RCC_ClockConfig+0x188>)
 80020cc:	430a      	orrs	r2, r1
 80020ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020d0:	f000 f820 	bl	8002114 <HAL_RCC_GetSysClockFreq>
 80020d4:	0001      	movs	r1, r0
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <HAL_RCC_ClockConfig+0x188>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	091b      	lsrs	r3, r3, #4
 80020dc:	220f      	movs	r2, #15
 80020de:	4013      	ands	r3, r2
 80020e0:	4a0a      	ldr	r2, [pc, #40]	; (800210c <HAL_RCC_ClockConfig+0x194>)
 80020e2:	5cd3      	ldrb	r3, [r2, r3]
 80020e4:	000a      	movs	r2, r1
 80020e6:	40da      	lsrs	r2, r3
 80020e8:	4b09      	ldr	r3, [pc, #36]	; (8002110 <HAL_RCC_ClockConfig+0x198>)
 80020ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80020ec:	2000      	movs	r0, #0
 80020ee:	f7fe febb 	bl	8000e68 <HAL_InitTick>
  
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	0018      	movs	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b004      	add	sp, #16
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40022000 	.word	0x40022000
 8002100:	40021000 	.word	0x40021000
 8002104:	00001388 	.word	0x00001388
 8002108:	fffff8ff 	.word	0xfffff8ff
 800210c:	08003e20 	.word	0x08003e20
 8002110:	20000008 	.word	0x20000008

08002114 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	2300      	movs	r3, #0
 8002128:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800212e:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	220c      	movs	r2, #12
 8002138:	4013      	ands	r3, r2
 800213a:	2b04      	cmp	r3, #4
 800213c:	d002      	beq.n	8002144 <HAL_RCC_GetSysClockFreq+0x30>
 800213e:	2b08      	cmp	r3, #8
 8002140:	d003      	beq.n	800214a <HAL_RCC_GetSysClockFreq+0x36>
 8002142:	e02c      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002144:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002146:	613b      	str	r3, [r7, #16]
      break;
 8002148:	e02c      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	0c9b      	lsrs	r3, r3, #18
 800214e:	220f      	movs	r2, #15
 8002150:	4013      	ands	r3, r2
 8002152:	4a19      	ldr	r2, [pc, #100]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002154:	5cd3      	ldrb	r3, [r2, r3]
 8002156:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002158:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	220f      	movs	r2, #15
 800215e:	4013      	ands	r3, r2
 8002160:	4a16      	ldr	r2, [pc, #88]	; (80021bc <HAL_RCC_GetSysClockFreq+0xa8>)
 8002162:	5cd3      	ldrb	r3, [r2, r3]
 8002164:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	2380      	movs	r3, #128	; 0x80
 800216a:	025b      	lsls	r3, r3, #9
 800216c:	4013      	ands	r3, r2
 800216e:	d009      	beq.n	8002184 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	4810      	ldr	r0, [pc, #64]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002174:	f7fd ffc8 	bl	8000108 <__udivsi3>
 8002178:	0003      	movs	r3, r0
 800217a:	001a      	movs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4353      	muls	r3, r2
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	e009      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	000a      	movs	r2, r1
 8002188:	0152      	lsls	r2, r2, #5
 800218a:	1a52      	subs	r2, r2, r1
 800218c:	0193      	lsls	r3, r2, #6
 800218e:	1a9b      	subs	r3, r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	185b      	adds	r3, r3, r1
 8002194:	021b      	lsls	r3, r3, #8
 8002196:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	613b      	str	r3, [r7, #16]
      break;
 800219c:	e002      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800219e:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021a0:	613b      	str	r3, [r7, #16]
      break;
 80021a2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80021a4:	693b      	ldr	r3, [r7, #16]
}
 80021a6:	0018      	movs	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	b006      	add	sp, #24
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	40021000 	.word	0x40021000
 80021b4:	007a1200 	.word	0x007a1200
 80021b8:	08003e38 	.word	0x08003e38
 80021bc:	08003e48 	.word	0x08003e48

080021c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c4:	4b02      	ldr	r3, [pc, #8]	; (80021d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80021c6:	681b      	ldr	r3, [r3, #0]
}
 80021c8:	0018      	movs	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	20000008 	.word	0x20000008

080021d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80021d8:	f7ff fff2 	bl	80021c0 <HAL_RCC_GetHCLKFreq>
 80021dc:	0001      	movs	r1, r0
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	2207      	movs	r2, #7
 80021e6:	4013      	ands	r3, r2
 80021e8:	4a04      	ldr	r2, [pc, #16]	; (80021fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80021ea:	5cd3      	ldrb	r3, [r2, r3]
 80021ec:	40d9      	lsrs	r1, r3
 80021ee:	000b      	movs	r3, r1
}    
 80021f0:	0018      	movs	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	40021000 	.word	0x40021000
 80021fc:	08003e30 	.word	0x08003e30

08002200 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	2380      	movs	r3, #128	; 0x80
 8002216:	025b      	lsls	r3, r3, #9
 8002218:	4013      	ands	r3, r2
 800221a:	d100      	bne.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800221c:	e08e      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800221e:	2017      	movs	r0, #23
 8002220:	183b      	adds	r3, r7, r0
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002226:	4b5f      	ldr	r3, [pc, #380]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002228:	69da      	ldr	r2, [r3, #28]
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	055b      	lsls	r3, r3, #21
 800222e:	4013      	ands	r3, r2
 8002230:	d110      	bne.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002232:	4b5c      	ldr	r3, [pc, #368]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002234:	69da      	ldr	r2, [r3, #28]
 8002236:	4b5b      	ldr	r3, [pc, #364]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002238:	2180      	movs	r1, #128	; 0x80
 800223a:	0549      	lsls	r1, r1, #21
 800223c:	430a      	orrs	r2, r1
 800223e:	61da      	str	r2, [r3, #28]
 8002240:	4b58      	ldr	r3, [pc, #352]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002242:	69da      	ldr	r2, [r3, #28]
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	055b      	lsls	r3, r3, #21
 8002248:	4013      	ands	r3, r2
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800224e:	183b      	adds	r3, r7, r0
 8002250:	2201      	movs	r2, #1
 8002252:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002254:	4b54      	ldr	r3, [pc, #336]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4013      	ands	r3, r2
 800225e:	d11a      	bne.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002260:	4b51      	ldr	r3, [pc, #324]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4b50      	ldr	r3, [pc, #320]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002266:	2180      	movs	r1, #128	; 0x80
 8002268:	0049      	lsls	r1, r1, #1
 800226a:	430a      	orrs	r2, r1
 800226c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226e:	f7fe fe41 	bl	8000ef4 <HAL_GetTick>
 8002272:	0003      	movs	r3, r0
 8002274:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002276:	e008      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002278:	f7fe fe3c 	bl	8000ef4 <HAL_GetTick>
 800227c:	0002      	movs	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b64      	cmp	r3, #100	; 0x64
 8002284:	d901      	bls.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e087      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228a:	4b47      	ldr	r3, [pc, #284]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	4013      	ands	r3, r2
 8002294:	d0f0      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002296:	4b43      	ldr	r3, [pc, #268]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002298:	6a1a      	ldr	r2, [r3, #32]
 800229a:	23c0      	movs	r3, #192	; 0xc0
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4013      	ands	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d034      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	23c0      	movs	r3, #192	; 0xc0
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4013      	ands	r3, r2
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d02c      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022b8:	4b3a      	ldr	r3, [pc, #232]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	4a3b      	ldr	r2, [pc, #236]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022be:	4013      	ands	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022c2:	4b38      	ldr	r3, [pc, #224]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022c4:	6a1a      	ldr	r2, [r3, #32]
 80022c6:	4b37      	ldr	r3, [pc, #220]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022c8:	2180      	movs	r1, #128	; 0x80
 80022ca:	0249      	lsls	r1, r1, #9
 80022cc:	430a      	orrs	r2, r1
 80022ce:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022d0:	4b34      	ldr	r3, [pc, #208]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022d2:	6a1a      	ldr	r2, [r3, #32]
 80022d4:	4b33      	ldr	r3, [pc, #204]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022d6:	4936      	ldr	r1, [pc, #216]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80022d8:	400a      	ands	r2, r1
 80022da:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022dc:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2201      	movs	r2, #1
 80022e6:	4013      	ands	r3, r2
 80022e8:	d013      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ea:	f7fe fe03 	bl	8000ef4 <HAL_GetTick>
 80022ee:	0003      	movs	r3, r0
 80022f0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f2:	e009      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f4:	f7fe fdfe 	bl	8000ef4 <HAL_GetTick>
 80022f8:	0002      	movs	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	4a2d      	ldr	r2, [pc, #180]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e048      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002308:	4b26      	ldr	r3, [pc, #152]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	2202      	movs	r2, #2
 800230e:	4013      	ands	r3, r2
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002312:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	4a25      	ldr	r2, [pc, #148]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002318:	4013      	ands	r3, r2
 800231a:	0019      	movs	r1, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002322:	430a      	orrs	r2, r1
 8002324:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002326:	2317      	movs	r3, #23
 8002328:	18fb      	adds	r3, r7, r3
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d105      	bne.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002330:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002332:	69da      	ldr	r2, [r3, #28]
 8002334:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002336:	4920      	ldr	r1, [pc, #128]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002338:	400a      	ands	r2, r1
 800233a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2201      	movs	r2, #1
 8002342:	4013      	ands	r3, r2
 8002344:	d009      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002346:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	2203      	movs	r2, #3
 800234c:	4393      	bics	r3, r2
 800234e:	0019      	movs	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002356:	430a      	orrs	r2, r1
 8002358:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2220      	movs	r2, #32
 8002360:	4013      	ands	r3, r2
 8002362:	d009      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002364:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	2210      	movs	r2, #16
 800236a:	4393      	bics	r3, r2
 800236c:	0019      	movs	r1, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002374:	430a      	orrs	r2, r1
 8002376:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	2380      	movs	r3, #128	; 0x80
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4013      	ands	r3, r2
 8002382:	d009      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002384:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	2240      	movs	r2, #64	; 0x40
 800238a:	4393      	bics	r3, r2
 800238c:	0019      	movs	r1, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691a      	ldr	r2, [r3, #16]
 8002392:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002394:	430a      	orrs	r2, r1
 8002396:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	0018      	movs	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	b006      	add	sp, #24
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40007000 	.word	0x40007000
 80023ac:	fffffcff 	.word	0xfffffcff
 80023b0:	fffeffff 	.word	0xfffeffff
 80023b4:	00001388 	.word	0x00001388
 80023b8:	efffffff 	.word	0xefffffff

080023bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e042      	b.n	8002454 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	223d      	movs	r2, #61	; 0x3d
 80023d2:	5c9b      	ldrb	r3, [r3, r2]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d107      	bne.n	80023ea <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	223c      	movs	r2, #60	; 0x3c
 80023de:	2100      	movs	r1, #0
 80023e0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	0018      	movs	r0, r3
 80023e6:	f7fe faf1 	bl	80009cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	223d      	movs	r2, #61	; 0x3d
 80023ee:	2102      	movs	r1, #2
 80023f0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3304      	adds	r3, #4
 80023fa:	0019      	movs	r1, r3
 80023fc:	0010      	movs	r0, r2
 80023fe:	f000 fa81 	bl	8002904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2246      	movs	r2, #70	; 0x46
 8002406:	2101      	movs	r1, #1
 8002408:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	223e      	movs	r2, #62	; 0x3e
 800240e:	2101      	movs	r1, #1
 8002410:	5499      	strb	r1, [r3, r2]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	223f      	movs	r2, #63	; 0x3f
 8002416:	2101      	movs	r1, #1
 8002418:	5499      	strb	r1, [r3, r2]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2240      	movs	r2, #64	; 0x40
 800241e:	2101      	movs	r1, #1
 8002420:	5499      	strb	r1, [r3, r2]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2241      	movs	r2, #65	; 0x41
 8002426:	2101      	movs	r1, #1
 8002428:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2242      	movs	r2, #66	; 0x42
 800242e:	2101      	movs	r1, #1
 8002430:	5499      	strb	r1, [r3, r2]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2243      	movs	r2, #67	; 0x43
 8002436:	2101      	movs	r1, #1
 8002438:	5499      	strb	r1, [r3, r2]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2244      	movs	r2, #68	; 0x44
 800243e:	2101      	movs	r1, #1
 8002440:	5499      	strb	r1, [r3, r2]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2245      	movs	r2, #69	; 0x45
 8002446:	2101      	movs	r1, #1
 8002448:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	223d      	movs	r2, #61	; 0x3d
 800244e:	2101      	movs	r1, #1
 8002450:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	0018      	movs	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	b002      	add	sp, #8
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	223d      	movs	r2, #61	; 0x3d
 8002468:	5c9b      	ldrb	r3, [r3, r2]
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b01      	cmp	r3, #1
 800246e:	d001      	beq.n	8002474 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e033      	b.n	80024dc <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	223d      	movs	r2, #61	; 0x3d
 8002478:	2102      	movs	r1, #2
 800247a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <HAL_TIM_Base_Start+0x88>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d00f      	beq.n	80024a6 <HAL_TIM_Base_Start+0x4a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	05db      	lsls	r3, r3, #23
 800248e:	429a      	cmp	r2, r3
 8002490:	d009      	beq.n	80024a6 <HAL_TIM_Base_Start+0x4a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a14      	ldr	r2, [pc, #80]	; (80024e8 <HAL_TIM_Base_Start+0x8c>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d004      	beq.n	80024a6 <HAL_TIM_Base_Start+0x4a>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a12      	ldr	r2, [pc, #72]	; (80024ec <HAL_TIM_Base_Start+0x90>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d111      	bne.n	80024ca <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2207      	movs	r2, #7
 80024ae:	4013      	ands	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2b06      	cmp	r3, #6
 80024b6:	d010      	beq.n	80024da <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2101      	movs	r1, #1
 80024c4:	430a      	orrs	r2, r1
 80024c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c8:	e007      	b.n	80024da <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2101      	movs	r1, #1
 80024d6:	430a      	orrs	r2, r1
 80024d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	0018      	movs	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	b004      	add	sp, #16
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40012c00 	.word	0x40012c00
 80024e8:	40000400 	.word	0x40000400
 80024ec:	40014000 	.word	0x40014000

080024f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	2202      	movs	r2, #2
 8002500:	4013      	ands	r3, r2
 8002502:	2b02      	cmp	r3, #2
 8002504:	d124      	bne.n	8002550 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2202      	movs	r2, #2
 800250e:	4013      	ands	r3, r2
 8002510:	2b02      	cmp	r3, #2
 8002512:	d11d      	bne.n	8002550 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2203      	movs	r2, #3
 800251a:	4252      	negs	r2, r2
 800251c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	2203      	movs	r2, #3
 800252c:	4013      	ands	r3, r2
 800252e:	d004      	beq.n	800253a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	0018      	movs	r0, r3
 8002534:	f000 f9ce 	bl	80028d4 <HAL_TIM_IC_CaptureCallback>
 8002538:	e007      	b.n	800254a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	0018      	movs	r0, r3
 800253e:	f000 f9c1 	bl	80028c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	0018      	movs	r0, r3
 8002546:	f000 f9cd 	bl	80028e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	2204      	movs	r2, #4
 8002558:	4013      	ands	r3, r2
 800255a:	2b04      	cmp	r3, #4
 800255c:	d125      	bne.n	80025aa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2204      	movs	r2, #4
 8002566:	4013      	ands	r3, r2
 8002568:	2b04      	cmp	r3, #4
 800256a:	d11e      	bne.n	80025aa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2205      	movs	r2, #5
 8002572:	4252      	negs	r2, r2
 8002574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2202      	movs	r2, #2
 800257a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699a      	ldr	r2, [r3, #24]
 8002582:	23c0      	movs	r3, #192	; 0xc0
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4013      	ands	r3, r2
 8002588:	d004      	beq.n	8002594 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	0018      	movs	r0, r3
 800258e:	f000 f9a1 	bl	80028d4 <HAL_TIM_IC_CaptureCallback>
 8002592:	e007      	b.n	80025a4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	0018      	movs	r0, r3
 8002598:	f000 f994 	bl	80028c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	0018      	movs	r0, r3
 80025a0:	f000 f9a0 	bl	80028e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	2208      	movs	r2, #8
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d124      	bne.n	8002602 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	2208      	movs	r2, #8
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d11d      	bne.n	8002602 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2209      	movs	r2, #9
 80025cc:	4252      	negs	r2, r2
 80025ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2204      	movs	r2, #4
 80025d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	2203      	movs	r2, #3
 80025de:	4013      	ands	r3, r2
 80025e0:	d004      	beq.n	80025ec <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	0018      	movs	r0, r3
 80025e6:	f000 f975 	bl	80028d4 <HAL_TIM_IC_CaptureCallback>
 80025ea:	e007      	b.n	80025fc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	0018      	movs	r0, r3
 80025f0:	f000 f968 	bl	80028c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	0018      	movs	r0, r3
 80025f8:	f000 f974 	bl	80028e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	2210      	movs	r2, #16
 800260a:	4013      	ands	r3, r2
 800260c:	2b10      	cmp	r3, #16
 800260e:	d125      	bne.n	800265c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	2210      	movs	r2, #16
 8002618:	4013      	ands	r3, r2
 800261a:	2b10      	cmp	r3, #16
 800261c:	d11e      	bne.n	800265c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2211      	movs	r2, #17
 8002624:	4252      	negs	r2, r2
 8002626:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2208      	movs	r2, #8
 800262c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	69da      	ldr	r2, [r3, #28]
 8002634:	23c0      	movs	r3, #192	; 0xc0
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4013      	ands	r3, r2
 800263a:	d004      	beq.n	8002646 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	0018      	movs	r0, r3
 8002640:	f000 f948 	bl	80028d4 <HAL_TIM_IC_CaptureCallback>
 8002644:	e007      	b.n	8002656 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	0018      	movs	r0, r3
 800264a:	f000 f93b 	bl	80028c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	0018      	movs	r0, r3
 8002652:	f000 f947 	bl	80028e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	2201      	movs	r2, #1
 8002664:	4013      	ands	r3, r2
 8002666:	2b01      	cmp	r3, #1
 8002668:	d10f      	bne.n	800268a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	4013      	ands	r3, r2
 8002674:	2b01      	cmp	r3, #1
 8002676:	d108      	bne.n	800268a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2202      	movs	r2, #2
 800267e:	4252      	negs	r2, r2
 8002680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	0018      	movs	r0, r3
 8002686:	f7fe f96f 	bl	8000968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	2280      	movs	r2, #128	; 0x80
 8002692:	4013      	ands	r3, r2
 8002694:	2b80      	cmp	r3, #128	; 0x80
 8002696:	d10f      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	2280      	movs	r2, #128	; 0x80
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b80      	cmp	r3, #128	; 0x80
 80026a4:	d108      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2281      	movs	r2, #129	; 0x81
 80026ac:	4252      	negs	r2, r2
 80026ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	0018      	movs	r0, r3
 80026b4:	f000 faa6 	bl	8002c04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	2240      	movs	r2, #64	; 0x40
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b40      	cmp	r3, #64	; 0x40
 80026c4:	d10f      	bne.n	80026e6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	2240      	movs	r2, #64	; 0x40
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b40      	cmp	r3, #64	; 0x40
 80026d2:	d108      	bne.n	80026e6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2241      	movs	r2, #65	; 0x41
 80026da:	4252      	negs	r2, r2
 80026dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	0018      	movs	r0, r3
 80026e2:	f000 f907 	bl	80028f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	2220      	movs	r2, #32
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b20      	cmp	r3, #32
 80026f2:	d10f      	bne.n	8002714 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	2220      	movs	r2, #32
 80026fc:	4013      	ands	r3, r2
 80026fe:	2b20      	cmp	r3, #32
 8002700:	d108      	bne.n	8002714 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2221      	movs	r2, #33	; 0x21
 8002708:	4252      	negs	r2, r2
 800270a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	0018      	movs	r0, r3
 8002710:	f000 fa70 	bl	8002bf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002714:	46c0      	nop			; (mov r8, r8)
 8002716:	46bd      	mov	sp, r7
 8002718:	b002      	add	sp, #8
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002726:	230f      	movs	r3, #15
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	2200      	movs	r2, #0
 800272c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	223c      	movs	r2, #60	; 0x3c
 8002732:	5c9b      	ldrb	r3, [r3, r2]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_TIM_ConfigClockSource+0x20>
 8002738:	2302      	movs	r3, #2
 800273a:	e0bc      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x19a>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	223c      	movs	r2, #60	; 0x3c
 8002740:	2101      	movs	r1, #1
 8002742:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	223d      	movs	r2, #61	; 0x3d
 8002748:	2102      	movs	r1, #2
 800274a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2277      	movs	r2, #119	; 0x77
 8002758:	4393      	bics	r3, r2
 800275a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4a58      	ldr	r2, [pc, #352]	; (80028c0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002760:	4013      	ands	r3, r2
 8002762:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2280      	movs	r2, #128	; 0x80
 8002772:	0192      	lsls	r2, r2, #6
 8002774:	4293      	cmp	r3, r2
 8002776:	d040      	beq.n	80027fa <HAL_TIM_ConfigClockSource+0xde>
 8002778:	2280      	movs	r2, #128	; 0x80
 800277a:	0192      	lsls	r2, r2, #6
 800277c:	4293      	cmp	r3, r2
 800277e:	d900      	bls.n	8002782 <HAL_TIM_ConfigClockSource+0x66>
 8002780:	e088      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x178>
 8002782:	2280      	movs	r2, #128	; 0x80
 8002784:	0152      	lsls	r2, r2, #5
 8002786:	4293      	cmp	r3, r2
 8002788:	d100      	bne.n	800278c <HAL_TIM_ConfigClockSource+0x70>
 800278a:	e088      	b.n	800289e <HAL_TIM_ConfigClockSource+0x182>
 800278c:	2280      	movs	r2, #128	; 0x80
 800278e:	0152      	lsls	r2, r2, #5
 8002790:	4293      	cmp	r3, r2
 8002792:	d900      	bls.n	8002796 <HAL_TIM_ConfigClockSource+0x7a>
 8002794:	e07e      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x178>
 8002796:	2b70      	cmp	r3, #112	; 0x70
 8002798:	d018      	beq.n	80027cc <HAL_TIM_ConfigClockSource+0xb0>
 800279a:	d900      	bls.n	800279e <HAL_TIM_ConfigClockSource+0x82>
 800279c:	e07a      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x178>
 800279e:	2b60      	cmp	r3, #96	; 0x60
 80027a0:	d04f      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x126>
 80027a2:	d900      	bls.n	80027a6 <HAL_TIM_ConfigClockSource+0x8a>
 80027a4:	e076      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x178>
 80027a6:	2b50      	cmp	r3, #80	; 0x50
 80027a8:	d03b      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x106>
 80027aa:	d900      	bls.n	80027ae <HAL_TIM_ConfigClockSource+0x92>
 80027ac:	e072      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x178>
 80027ae:	2b40      	cmp	r3, #64	; 0x40
 80027b0:	d057      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0x146>
 80027b2:	d900      	bls.n	80027b6 <HAL_TIM_ConfigClockSource+0x9a>
 80027b4:	e06e      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x178>
 80027b6:	2b30      	cmp	r3, #48	; 0x30
 80027b8:	d063      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0x166>
 80027ba:	d86b      	bhi.n	8002894 <HAL_TIM_ConfigClockSource+0x178>
 80027bc:	2b20      	cmp	r3, #32
 80027be:	d060      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0x166>
 80027c0:	d868      	bhi.n	8002894 <HAL_TIM_ConfigClockSource+0x178>
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d05d      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0x166>
 80027c6:	2b10      	cmp	r3, #16
 80027c8:	d05b      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0x166>
 80027ca:	e063      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027dc:	f000 f98c 	bl	8002af8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2277      	movs	r2, #119	; 0x77
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	609a      	str	r2, [r3, #8]
      break;
 80027f8:	e052      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800280a:	f000 f975 	bl	8002af8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2180      	movs	r1, #128	; 0x80
 800281a:	01c9      	lsls	r1, r1, #7
 800281c:	430a      	orrs	r2, r1
 800281e:	609a      	str	r2, [r3, #8]
      break;
 8002820:	e03e      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800282e:	001a      	movs	r2, r3
 8002830:	f000 f8e8 	bl	8002a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2150      	movs	r1, #80	; 0x50
 800283a:	0018      	movs	r0, r3
 800283c:	f000 f942 	bl	8002ac4 <TIM_ITRx_SetConfig>
      break;
 8002840:	e02e      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800284e:	001a      	movs	r2, r3
 8002850:	f000 f906 	bl	8002a60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2160      	movs	r1, #96	; 0x60
 800285a:	0018      	movs	r0, r3
 800285c:	f000 f932 	bl	8002ac4 <TIM_ITRx_SetConfig>
      break;
 8002860:	e01e      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800286e:	001a      	movs	r2, r3
 8002870:	f000 f8c8 	bl	8002a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2140      	movs	r1, #64	; 0x40
 800287a:	0018      	movs	r0, r3
 800287c:	f000 f922 	bl	8002ac4 <TIM_ITRx_SetConfig>
      break;
 8002880:	e00e      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	0019      	movs	r1, r3
 800288c:	0010      	movs	r0, r2
 800288e:	f000 f919 	bl	8002ac4 <TIM_ITRx_SetConfig>
      break;
 8002892:	e005      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002894:	230f      	movs	r3, #15
 8002896:	18fb      	adds	r3, r7, r3
 8002898:	2201      	movs	r2, #1
 800289a:	701a      	strb	r2, [r3, #0]
      break;
 800289c:	e000      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800289e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	223d      	movs	r2, #61	; 0x3d
 80028a4:	2101      	movs	r1, #1
 80028a6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	223c      	movs	r2, #60	; 0x3c
 80028ac:	2100      	movs	r1, #0
 80028ae:	5499      	strb	r1, [r3, r2]

  return status;
 80028b0:	230f      	movs	r3, #15
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	781b      	ldrb	r3, [r3, #0]
}
 80028b6:	0018      	movs	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b004      	add	sp, #16
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	ffff00ff 	.word	0xffff00ff

080028c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028cc:	46c0      	nop			; (mov r8, r8)
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b002      	add	sp, #8
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028dc:	46c0      	nop			; (mov r8, r8)
 80028de:	46bd      	mov	sp, r7
 80028e0:	b002      	add	sp, #8
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028ec:	46c0      	nop			; (mov r8, r8)
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b002      	add	sp, #8
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028fc:	46c0      	nop			; (mov r8, r8)
 80028fe:	46bd      	mov	sp, r7
 8002900:	b002      	add	sp, #8
 8002902:	bd80      	pop	{r7, pc}

08002904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a34      	ldr	r2, [pc, #208]	; (80029e8 <TIM_Base_SetConfig+0xe4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d008      	beq.n	800292e <TIM_Base_SetConfig+0x2a>
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	05db      	lsls	r3, r3, #23
 8002922:	429a      	cmp	r2, r3
 8002924:	d003      	beq.n	800292e <TIM_Base_SetConfig+0x2a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a30      	ldr	r2, [pc, #192]	; (80029ec <TIM_Base_SetConfig+0xe8>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d108      	bne.n	8002940 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2270      	movs	r2, #112	; 0x70
 8002932:	4393      	bics	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4313      	orrs	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a29      	ldr	r2, [pc, #164]	; (80029e8 <TIM_Base_SetConfig+0xe4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d018      	beq.n	800297a <TIM_Base_SetConfig+0x76>
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	2380      	movs	r3, #128	; 0x80
 800294c:	05db      	lsls	r3, r3, #23
 800294e:	429a      	cmp	r2, r3
 8002950:	d013      	beq.n	800297a <TIM_Base_SetConfig+0x76>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a25      	ldr	r2, [pc, #148]	; (80029ec <TIM_Base_SetConfig+0xe8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00f      	beq.n	800297a <TIM_Base_SetConfig+0x76>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a24      	ldr	r2, [pc, #144]	; (80029f0 <TIM_Base_SetConfig+0xec>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00b      	beq.n	800297a <TIM_Base_SetConfig+0x76>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a23      	ldr	r2, [pc, #140]	; (80029f4 <TIM_Base_SetConfig+0xf0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d007      	beq.n	800297a <TIM_Base_SetConfig+0x76>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a22      	ldr	r2, [pc, #136]	; (80029f8 <TIM_Base_SetConfig+0xf4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d003      	beq.n	800297a <TIM_Base_SetConfig+0x76>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a21      	ldr	r2, [pc, #132]	; (80029fc <TIM_Base_SetConfig+0xf8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d108      	bne.n	800298c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4a20      	ldr	r2, [pc, #128]	; (8002a00 <TIM_Base_SetConfig+0xfc>)
 800297e:	4013      	ands	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4313      	orrs	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2280      	movs	r2, #128	; 0x80
 8002990:	4393      	bics	r3, r2
 8002992:	001a      	movs	r2, r3
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	4313      	orrs	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a0c      	ldr	r2, [pc, #48]	; (80029e8 <TIM_Base_SetConfig+0xe4>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d00b      	beq.n	80029d2 <TIM_Base_SetConfig+0xce>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a0d      	ldr	r2, [pc, #52]	; (80029f4 <TIM_Base_SetConfig+0xf0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d007      	beq.n	80029d2 <TIM_Base_SetConfig+0xce>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a0c      	ldr	r2, [pc, #48]	; (80029f8 <TIM_Base_SetConfig+0xf4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d003      	beq.n	80029d2 <TIM_Base_SetConfig+0xce>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a0b      	ldr	r2, [pc, #44]	; (80029fc <TIM_Base_SetConfig+0xf8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d103      	bne.n	80029da <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	615a      	str	r2, [r3, #20]
}
 80029e0:	46c0      	nop			; (mov r8, r8)
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b004      	add	sp, #16
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40012c00 	.word	0x40012c00
 80029ec:	40000400 	.word	0x40000400
 80029f0:	40002000 	.word	0x40002000
 80029f4:	40014000 	.word	0x40014000
 80029f8:	40014400 	.word	0x40014400
 80029fc:	40014800 	.word	0x40014800
 8002a00:	fffffcff 	.word	0xfffffcff

08002a04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	4393      	bics	r3, r2
 8002a1e:	001a      	movs	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	22f0      	movs	r2, #240	; 0xf0
 8002a2e:	4393      	bics	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	220a      	movs	r2, #10
 8002a40:	4393      	bics	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	621a      	str	r2, [r3, #32]
}
 8002a58:	46c0      	nop			; (mov r8, r8)
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	b006      	add	sp, #24
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	2210      	movs	r2, #16
 8002a72:	4393      	bics	r3, r2
 8002a74:	001a      	movs	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	4a0d      	ldr	r2, [pc, #52]	; (8002ac0 <TIM_TI2_ConfigInputStage+0x60>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	031b      	lsls	r3, r3, #12
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	22a0      	movs	r2, #160	; 0xa0
 8002a9c:	4393      	bics	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	621a      	str	r2, [r3, #32]
}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b006      	add	sp, #24
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	ffff0fff 	.word	0xffff0fff

08002ac4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2270      	movs	r2, #112	; 0x70
 8002ad8:	4393      	bics	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	2207      	movs	r2, #7
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	609a      	str	r2, [r3, #8]
}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b004      	add	sp, #16
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	4a09      	ldr	r2, [pc, #36]	; (8002b34 <TIM_ETR_SetConfig+0x3c>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	021a      	lsls	r2, r3, #8
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	609a      	str	r2, [r3, #8]
}
 8002b2c:	46c0      	nop			; (mov r8, r8)
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b006      	add	sp, #24
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	ffff00ff 	.word	0xffff00ff

08002b38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	223c      	movs	r2, #60	; 0x3c
 8002b46:	5c9b      	ldrb	r3, [r3, r2]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e047      	b.n	8002be0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	223c      	movs	r2, #60	; 0x3c
 8002b54:	2101      	movs	r1, #1
 8002b56:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	223d      	movs	r2, #61	; 0x3d
 8002b5c:	2102      	movs	r1, #2
 8002b5e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2270      	movs	r2, #112	; 0x70
 8002b74:	4393      	bics	r3, r2
 8002b76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a16      	ldr	r2, [pc, #88]	; (8002be8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d00f      	beq.n	8002bb4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	05db      	lsls	r3, r3, #23
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d009      	beq.n	8002bb4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a11      	ldr	r2, [pc, #68]	; (8002bec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d004      	beq.n	8002bb4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a10      	ldr	r2, [pc, #64]	; (8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d10c      	bne.n	8002bce <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2280      	movs	r2, #128	; 0x80
 8002bb8:	4393      	bics	r3, r2
 8002bba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	223d      	movs	r2, #61	; 0x3d
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	223c      	movs	r2, #60	; 0x3c
 8002bda:	2100      	movs	r1, #0
 8002bdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	0018      	movs	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b004      	add	sp, #16
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40012c00 	.word	0x40012c00
 8002bec:	40000400 	.word	0x40000400
 8002bf0:	40014000 	.word	0x40014000

08002bf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bfc:	46c0      	nop			; (mov r8, r8)
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b002      	add	sp, #8
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c0c:	46c0      	nop			; (mov r8, r8)
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b002      	add	sp, #8
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e044      	b.n	8002cb0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d107      	bne.n	8002c3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2278      	movs	r2, #120	; 0x78
 8002c32:	2100      	movs	r1, #0
 8002c34:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f7fd ff01 	bl	8000a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2224      	movs	r2, #36	; 0x24
 8002c42:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2101      	movs	r1, #1
 8002c50:	438a      	bics	r2, r1
 8002c52:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	0018      	movs	r0, r3
 8002c58:	f000 f978 	bl	8002f4c <UART_SetConfig>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e024      	b.n	8002cb0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	0018      	movs	r0, r3
 8002c72:	f000 faab 	bl	80031cc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	490d      	ldr	r1, [pc, #52]	; (8002cb8 <HAL_UART_Init+0xa4>)
 8002c82:	400a      	ands	r2, r1
 8002c84:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	212a      	movs	r1, #42	; 0x2a
 8002c92:	438a      	bics	r2, r1
 8002c94:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f000 fb43 	bl	8003334 <UART_CheckIdleState>
 8002cae:	0003      	movs	r3, r0
}
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b002      	add	sp, #8
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	ffffb7ff 	.word	0xffffb7ff

08002cbc <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e030      	b.n	8002d30 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2224      	movs	r2, #36	; 0x24
 8002cd2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2101      	movs	r1, #1
 8002ce0:	438a      	bics	r2, r1
 8002ce2:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f7fd ffa6 	bl	8000c50 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2284      	movs	r2, #132	; 0x84
 8002d08:	2100      	movs	r1, #0
 8002d0a:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2280      	movs	r2, #128	; 0x80
 8002d16:	2100      	movs	r1, #0
 8002d18:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2278      	movs	r2, #120	; 0x78
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	0018      	movs	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	b002      	add	sp, #8
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	1dbb      	adds	r3, r7, #6
 8002d44:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d4a:	2b20      	cmp	r3, #32
 8002d4c:	d000      	beq.n	8002d50 <HAL_UART_Transmit_DMA+0x18>
 8002d4e:	e077      	b.n	8002e40 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_UART_Transmit_DMA+0x26>
 8002d56:	1dbb      	adds	r3, r7, #6
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e06f      	b.n	8002e42 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	015b      	lsls	r3, r3, #5
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d109      	bne.n	8002d82 <HAL_UART_Transmit_DMA+0x4a>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d105      	bne.n	8002d82 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d001      	beq.n	8002d82 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e05f      	b.n	8002e42 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1dba      	adds	r2, r7, #6
 8002d8c:	2150      	movs	r1, #80	; 0x50
 8002d8e:	8812      	ldrh	r2, [r2, #0]
 8002d90:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	1dba      	adds	r2, r7, #6
 8002d96:	2152      	movs	r1, #82	; 0x52
 8002d98:	8812      	ldrh	r2, [r2, #0]
 8002d9a:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2284      	movs	r2, #132	; 0x84
 8002da0:	2100      	movs	r1, #0
 8002da2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2221      	movs	r2, #33	; 0x21
 8002da8:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d027      	beq.n	8002e02 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db6:	4a25      	ldr	r2, [pc, #148]	; (8002e4c <HAL_UART_Transmit_DMA+0x114>)
 8002db8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbe:	4a24      	ldr	r2, [pc, #144]	; (8002e50 <HAL_UART_Transmit_DMA+0x118>)
 8002dc0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc6:	4a23      	ldr	r2, [pc, #140]	; (8002e54 <HAL_UART_Transmit_DMA+0x11c>)
 8002dc8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dce:	2200      	movs	r2, #0
 8002dd0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dda:	0019      	movs	r1, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	3328      	adds	r3, #40	; 0x28
 8002de2:	001a      	movs	r2, r3
 8002de4:	1dbb      	adds	r3, r7, #6
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	f7fe f9fd 	bl	80011e6 <HAL_DMA_Start_IT>
 8002dec:	1e03      	subs	r3, r0, #0
 8002dee:	d008      	beq.n	8002e02 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2284      	movs	r2, #132	; 0x84
 8002df4:	2110      	movs	r1, #16
 8002df6:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e01f      	b.n	8002e42 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2240      	movs	r2, #64	; 0x40
 8002e08:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e0e:	613b      	str	r3, [r7, #16]
  return(result);
 8002e10:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002e12:	61fb      	str	r3, [r7, #28]
 8002e14:	2301      	movs	r3, #1
 8002e16:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f383 8810 	msr	PRIMASK, r3
}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2180      	movs	r1, #128	; 0x80
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	f383 8810 	msr	PRIMASK, r3
}
 8002e3a:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	e000      	b.n	8002e42 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002e40:	2302      	movs	r3, #2
  }
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b008      	add	sp, #32
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	080037a9 	.word	0x080037a9
 8002e50:	0800383d 	.word	0x0800383d
 8002e54:	080039cb 	.word	0x080039cb

08002e58 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b088      	sub	sp, #32
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	1dbb      	adds	r3, r7, #6
 8002e64:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2280      	movs	r2, #128	; 0x80
 8002e6a:	589b      	ldr	r3, [r3, r2]
 8002e6c:	2b20      	cmp	r3, #32
 8002e6e:	d145      	bne.n	8002efc <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_UART_Receive_DMA+0x26>
 8002e76:	1dbb      	adds	r3, r7, #6
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e03d      	b.n	8002efe <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	2380      	movs	r3, #128	; 0x80
 8002e88:	015b      	lsls	r3, r3, #5
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d109      	bne.n	8002ea2 <HAL_UART_Receive_DMA+0x4a>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d105      	bne.n	8002ea2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d001      	beq.n	8002ea2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e02d      	b.n	8002efe <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	041b      	lsls	r3, r3, #16
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d019      	beq.n	8002eea <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8002eba:	613b      	str	r3, [r7, #16]
  return(result);
 8002ebc:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002ebe:	61fb      	str	r3, [r7, #28]
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f383 8810 	msr	PRIMASK, r3
}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2180      	movs	r1, #128	; 0x80
 8002ed8:	04c9      	lsls	r1, r1, #19
 8002eda:	430a      	orrs	r2, r1
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	f383 8810 	msr	PRIMASK, r3
}
 8002ee8:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002eea:	1dbb      	adds	r3, r7, #6
 8002eec:	881a      	ldrh	r2, [r3, #0]
 8002eee:	68b9      	ldr	r1, [r7, #8]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f000 fb30 	bl	8003558 <UART_Start_Receive_DMA>
 8002ef8:	0003      	movs	r3, r0
 8002efa:	e000      	b.n	8002efe <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002efc:	2302      	movs	r3, #2
  }
}
 8002efe:	0018      	movs	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	b008      	add	sp, #32
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b002      	add	sp, #8
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	46bd      	mov	sp, r7
 8002f22:	b002      	add	sp, #8
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	46bd      	mov	sp, r7
 8002f32:	b002      	add	sp, #8
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	000a      	movs	r2, r1
 8002f40:	1cbb      	adds	r3, r7, #2
 8002f42:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f44:	46c0      	nop			; (mov r8, r8)
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b002      	add	sp, #8
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f54:	231e      	movs	r3, #30
 8002f56:	18fb      	adds	r3, r7, r3
 8002f58:	2200      	movs	r2, #0
 8002f5a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a8d      	ldr	r2, [pc, #564]	; (80031b0 <UART_SetConfig+0x264>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	0019      	movs	r1, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	4a88      	ldr	r2, [pc, #544]	; (80031b4 <UART_SetConfig+0x268>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	0019      	movs	r1, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	4a7f      	ldr	r2, [pc, #508]	; (80031b8 <UART_SetConfig+0x26c>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	0019      	movs	r1, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a7b      	ldr	r2, [pc, #492]	; (80031bc <UART_SetConfig+0x270>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d127      	bne.n	8003022 <UART_SetConfig+0xd6>
 8002fd2:	4b7b      	ldr	r3, [pc, #492]	; (80031c0 <UART_SetConfig+0x274>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	2203      	movs	r2, #3
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b03      	cmp	r3, #3
 8002fdc:	d00d      	beq.n	8002ffa <UART_SetConfig+0xae>
 8002fde:	d81b      	bhi.n	8003018 <UART_SetConfig+0xcc>
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d014      	beq.n	800300e <UART_SetConfig+0xc2>
 8002fe4:	d818      	bhi.n	8003018 <UART_SetConfig+0xcc>
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <UART_SetConfig+0xa4>
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d00a      	beq.n	8003004 <UART_SetConfig+0xb8>
 8002fee:	e013      	b.n	8003018 <UART_SetConfig+0xcc>
 8002ff0:	231f      	movs	r3, #31
 8002ff2:	18fb      	adds	r3, r7, r3
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	701a      	strb	r2, [r3, #0]
 8002ff8:	e021      	b.n	800303e <UART_SetConfig+0xf2>
 8002ffa:	231f      	movs	r3, #31
 8002ffc:	18fb      	adds	r3, r7, r3
 8002ffe:	2202      	movs	r2, #2
 8003000:	701a      	strb	r2, [r3, #0]
 8003002:	e01c      	b.n	800303e <UART_SetConfig+0xf2>
 8003004:	231f      	movs	r3, #31
 8003006:	18fb      	adds	r3, r7, r3
 8003008:	2204      	movs	r2, #4
 800300a:	701a      	strb	r2, [r3, #0]
 800300c:	e017      	b.n	800303e <UART_SetConfig+0xf2>
 800300e:	231f      	movs	r3, #31
 8003010:	18fb      	adds	r3, r7, r3
 8003012:	2208      	movs	r2, #8
 8003014:	701a      	strb	r2, [r3, #0]
 8003016:	e012      	b.n	800303e <UART_SetConfig+0xf2>
 8003018:	231f      	movs	r3, #31
 800301a:	18fb      	adds	r3, r7, r3
 800301c:	2210      	movs	r2, #16
 800301e:	701a      	strb	r2, [r3, #0]
 8003020:	e00d      	b.n	800303e <UART_SetConfig+0xf2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a67      	ldr	r2, [pc, #412]	; (80031c4 <UART_SetConfig+0x278>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d104      	bne.n	8003036 <UART_SetConfig+0xea>
 800302c:	231f      	movs	r3, #31
 800302e:	18fb      	adds	r3, r7, r3
 8003030:	2200      	movs	r2, #0
 8003032:	701a      	strb	r2, [r3, #0]
 8003034:	e003      	b.n	800303e <UART_SetConfig+0xf2>
 8003036:	231f      	movs	r3, #31
 8003038:	18fb      	adds	r3, r7, r3
 800303a:	2210      	movs	r2, #16
 800303c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69da      	ldr	r2, [r3, #28]
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	021b      	lsls	r3, r3, #8
 8003046:	429a      	cmp	r2, r3
 8003048:	d15c      	bne.n	8003104 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800304a:	231f      	movs	r3, #31
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b08      	cmp	r3, #8
 8003052:	d015      	beq.n	8003080 <UART_SetConfig+0x134>
 8003054:	dc18      	bgt.n	8003088 <UART_SetConfig+0x13c>
 8003056:	2b04      	cmp	r3, #4
 8003058:	d00d      	beq.n	8003076 <UART_SetConfig+0x12a>
 800305a:	dc15      	bgt.n	8003088 <UART_SetConfig+0x13c>
 800305c:	2b00      	cmp	r3, #0
 800305e:	d002      	beq.n	8003066 <UART_SetConfig+0x11a>
 8003060:	2b02      	cmp	r3, #2
 8003062:	d005      	beq.n	8003070 <UART_SetConfig+0x124>
 8003064:	e010      	b.n	8003088 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003066:	f7ff f8b5 	bl	80021d4 <HAL_RCC_GetPCLK1Freq>
 800306a:	0003      	movs	r3, r0
 800306c:	61bb      	str	r3, [r7, #24]
        break;
 800306e:	e012      	b.n	8003096 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003070:	4b55      	ldr	r3, [pc, #340]	; (80031c8 <UART_SetConfig+0x27c>)
 8003072:	61bb      	str	r3, [r7, #24]
        break;
 8003074:	e00f      	b.n	8003096 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003076:	f7ff f84d 	bl	8002114 <HAL_RCC_GetSysClockFreq>
 800307a:	0003      	movs	r3, r0
 800307c:	61bb      	str	r3, [r7, #24]
        break;
 800307e:	e00a      	b.n	8003096 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003080:	2380      	movs	r3, #128	; 0x80
 8003082:	021b      	lsls	r3, r3, #8
 8003084:	61bb      	str	r3, [r7, #24]
        break;
 8003086:	e006      	b.n	8003096 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800308c:	231e      	movs	r3, #30
 800308e:	18fb      	adds	r3, r7, r3
 8003090:	2201      	movs	r2, #1
 8003092:	701a      	strb	r2, [r3, #0]
        break;
 8003094:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d100      	bne.n	800309e <UART_SetConfig+0x152>
 800309c:	e07a      	b.n	8003194 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	005a      	lsls	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	085b      	lsrs	r3, r3, #1
 80030a8:	18d2      	adds	r2, r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	0019      	movs	r1, r3
 80030b0:	0010      	movs	r0, r2
 80030b2:	f7fd f829 	bl	8000108 <__udivsi3>
 80030b6:	0003      	movs	r3, r0
 80030b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	2b0f      	cmp	r3, #15
 80030be:	d91c      	bls.n	80030fa <UART_SetConfig+0x1ae>
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	2380      	movs	r3, #128	; 0x80
 80030c4:	025b      	lsls	r3, r3, #9
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d217      	bcs.n	80030fa <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	200e      	movs	r0, #14
 80030d0:	183b      	adds	r3, r7, r0
 80030d2:	210f      	movs	r1, #15
 80030d4:	438a      	bics	r2, r1
 80030d6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	085b      	lsrs	r3, r3, #1
 80030dc:	b29b      	uxth	r3, r3
 80030de:	2207      	movs	r2, #7
 80030e0:	4013      	ands	r3, r2
 80030e2:	b299      	uxth	r1, r3
 80030e4:	183b      	adds	r3, r7, r0
 80030e6:	183a      	adds	r2, r7, r0
 80030e8:	8812      	ldrh	r2, [r2, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	183a      	adds	r2, r7, r0
 80030f4:	8812      	ldrh	r2, [r2, #0]
 80030f6:	60da      	str	r2, [r3, #12]
 80030f8:	e04c      	b.n	8003194 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80030fa:	231e      	movs	r3, #30
 80030fc:	18fb      	adds	r3, r7, r3
 80030fe:	2201      	movs	r2, #1
 8003100:	701a      	strb	r2, [r3, #0]
 8003102:	e047      	b.n	8003194 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003104:	231f      	movs	r3, #31
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b08      	cmp	r3, #8
 800310c:	d015      	beq.n	800313a <UART_SetConfig+0x1ee>
 800310e:	dc18      	bgt.n	8003142 <UART_SetConfig+0x1f6>
 8003110:	2b04      	cmp	r3, #4
 8003112:	d00d      	beq.n	8003130 <UART_SetConfig+0x1e4>
 8003114:	dc15      	bgt.n	8003142 <UART_SetConfig+0x1f6>
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <UART_SetConfig+0x1d4>
 800311a:	2b02      	cmp	r3, #2
 800311c:	d005      	beq.n	800312a <UART_SetConfig+0x1de>
 800311e:	e010      	b.n	8003142 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003120:	f7ff f858 	bl	80021d4 <HAL_RCC_GetPCLK1Freq>
 8003124:	0003      	movs	r3, r0
 8003126:	61bb      	str	r3, [r7, #24]
        break;
 8003128:	e012      	b.n	8003150 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800312a:	4b27      	ldr	r3, [pc, #156]	; (80031c8 <UART_SetConfig+0x27c>)
 800312c:	61bb      	str	r3, [r7, #24]
        break;
 800312e:	e00f      	b.n	8003150 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003130:	f7fe fff0 	bl	8002114 <HAL_RCC_GetSysClockFreq>
 8003134:	0003      	movs	r3, r0
 8003136:	61bb      	str	r3, [r7, #24]
        break;
 8003138:	e00a      	b.n	8003150 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800313a:	2380      	movs	r3, #128	; 0x80
 800313c:	021b      	lsls	r3, r3, #8
 800313e:	61bb      	str	r3, [r7, #24]
        break;
 8003140:	e006      	b.n	8003150 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003146:	231e      	movs	r3, #30
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]
        break;
 800314e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d01e      	beq.n	8003194 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	085a      	lsrs	r2, r3, #1
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	18d2      	adds	r2, r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	0019      	movs	r1, r3
 8003166:	0010      	movs	r0, r2
 8003168:	f7fc ffce 	bl	8000108 <__udivsi3>
 800316c:	0003      	movs	r3, r0
 800316e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	2b0f      	cmp	r3, #15
 8003174:	d90a      	bls.n	800318c <UART_SetConfig+0x240>
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	2380      	movs	r3, #128	; 0x80
 800317a:	025b      	lsls	r3, r3, #9
 800317c:	429a      	cmp	r2, r3
 800317e:	d205      	bcs.n	800318c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	b29a      	uxth	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	60da      	str	r2, [r3, #12]
 800318a:	e003      	b.n	8003194 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800318c:	231e      	movs	r3, #30
 800318e:	18fb      	adds	r3, r7, r3
 8003190:	2201      	movs	r2, #1
 8003192:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80031a0:	231e      	movs	r3, #30
 80031a2:	18fb      	adds	r3, r7, r3
 80031a4:	781b      	ldrb	r3, [r3, #0]
}
 80031a6:	0018      	movs	r0, r3
 80031a8:	46bd      	mov	sp, r7
 80031aa:	b008      	add	sp, #32
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	ffff69f3 	.word	0xffff69f3
 80031b4:	ffffcfff 	.word	0xffffcfff
 80031b8:	fffff4ff 	.word	0xfffff4ff
 80031bc:	40013800 	.word	0x40013800
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40004400 	.word	0x40004400
 80031c8:	007a1200 	.word	0x007a1200

080031cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	2201      	movs	r2, #1
 80031da:	4013      	ands	r3, r2
 80031dc:	d00b      	beq.n	80031f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	4a4a      	ldr	r2, [pc, #296]	; (8003310 <UART_AdvFeatureConfig+0x144>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	0019      	movs	r1, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	2202      	movs	r2, #2
 80031fc:	4013      	ands	r3, r2
 80031fe:	d00b      	beq.n	8003218 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	4a43      	ldr	r2, [pc, #268]	; (8003314 <UART_AdvFeatureConfig+0x148>)
 8003208:	4013      	ands	r3, r2
 800320a:	0019      	movs	r1, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	2204      	movs	r2, #4
 800321e:	4013      	ands	r3, r2
 8003220:	d00b      	beq.n	800323a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	4a3b      	ldr	r2, [pc, #236]	; (8003318 <UART_AdvFeatureConfig+0x14c>)
 800322a:	4013      	ands	r3, r2
 800322c:	0019      	movs	r1, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	2208      	movs	r2, #8
 8003240:	4013      	ands	r3, r2
 8003242:	d00b      	beq.n	800325c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	4a34      	ldr	r2, [pc, #208]	; (800331c <UART_AdvFeatureConfig+0x150>)
 800324c:	4013      	ands	r3, r2
 800324e:	0019      	movs	r1, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	2210      	movs	r2, #16
 8003262:	4013      	ands	r3, r2
 8003264:	d00b      	beq.n	800327e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	4a2c      	ldr	r2, [pc, #176]	; (8003320 <UART_AdvFeatureConfig+0x154>)
 800326e:	4013      	ands	r3, r2
 8003270:	0019      	movs	r1, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	2220      	movs	r2, #32
 8003284:	4013      	ands	r3, r2
 8003286:	d00b      	beq.n	80032a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	4a25      	ldr	r2, [pc, #148]	; (8003324 <UART_AdvFeatureConfig+0x158>)
 8003290:	4013      	ands	r3, r2
 8003292:	0019      	movs	r1, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	2240      	movs	r2, #64	; 0x40
 80032a6:	4013      	ands	r3, r2
 80032a8:	d01d      	beq.n	80032e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	4a1d      	ldr	r2, [pc, #116]	; (8003328 <UART_AdvFeatureConfig+0x15c>)
 80032b2:	4013      	ands	r3, r2
 80032b4:	0019      	movs	r1, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032c6:	2380      	movs	r3, #128	; 0x80
 80032c8:	035b      	lsls	r3, r3, #13
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d10b      	bne.n	80032e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	4a15      	ldr	r2, [pc, #84]	; (800332c <UART_AdvFeatureConfig+0x160>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	0019      	movs	r1, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	2280      	movs	r2, #128	; 0x80
 80032ec:	4013      	ands	r3, r2
 80032ee:	d00b      	beq.n	8003308 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	4a0e      	ldr	r2, [pc, #56]	; (8003330 <UART_AdvFeatureConfig+0x164>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	0019      	movs	r1, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	605a      	str	r2, [r3, #4]
  }
}
 8003308:	46c0      	nop			; (mov r8, r8)
 800330a:	46bd      	mov	sp, r7
 800330c:	b002      	add	sp, #8
 800330e:	bd80      	pop	{r7, pc}
 8003310:	fffdffff 	.word	0xfffdffff
 8003314:	fffeffff 	.word	0xfffeffff
 8003318:	fffbffff 	.word	0xfffbffff
 800331c:	ffff7fff 	.word	0xffff7fff
 8003320:	ffffefff 	.word	0xffffefff
 8003324:	ffffdfff 	.word	0xffffdfff
 8003328:	ffefffff 	.word	0xffefffff
 800332c:	ff9fffff 	.word	0xff9fffff
 8003330:	fff7ffff 	.word	0xfff7ffff

08003334 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b092      	sub	sp, #72	; 0x48
 8003338:	af02      	add	r7, sp, #8
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2284      	movs	r2, #132	; 0x84
 8003340:	2100      	movs	r1, #0
 8003342:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003344:	f7fd fdd6 	bl	8000ef4 <HAL_GetTick>
 8003348:	0003      	movs	r3, r0
 800334a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2208      	movs	r2, #8
 8003354:	4013      	ands	r3, r2
 8003356:	2b08      	cmp	r3, #8
 8003358:	d12c      	bne.n	80033b4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800335a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800335c:	2280      	movs	r2, #128	; 0x80
 800335e:	0391      	lsls	r1, r2, #14
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	4a46      	ldr	r2, [pc, #280]	; (800347c <UART_CheckIdleState+0x148>)
 8003364:	9200      	str	r2, [sp, #0]
 8003366:	2200      	movs	r2, #0
 8003368:	f000 f88c 	bl	8003484 <UART_WaitOnFlagUntilTimeout>
 800336c:	1e03      	subs	r3, r0, #0
 800336e:	d021      	beq.n	80033b4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003370:	f3ef 8310 	mrs	r3, PRIMASK
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003378:	63bb      	str	r3, [r7, #56]	; 0x38
 800337a:	2301      	movs	r3, #1
 800337c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003380:	f383 8810 	msr	PRIMASK, r3
}
 8003384:	46c0      	nop			; (mov r8, r8)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2180      	movs	r1, #128	; 0x80
 8003392:	438a      	bics	r2, r1
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003398:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339c:	f383 8810 	msr	PRIMASK, r3
}
 80033a0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2220      	movs	r2, #32
 80033a6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2278      	movs	r2, #120	; 0x78
 80033ac:	2100      	movs	r1, #0
 80033ae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e05f      	b.n	8003474 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2204      	movs	r2, #4
 80033bc:	4013      	ands	r3, r2
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d146      	bne.n	8003450 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033c4:	2280      	movs	r2, #128	; 0x80
 80033c6:	03d1      	lsls	r1, r2, #15
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	4a2c      	ldr	r2, [pc, #176]	; (800347c <UART_CheckIdleState+0x148>)
 80033cc:	9200      	str	r2, [sp, #0]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f000 f858 	bl	8003484 <UART_WaitOnFlagUntilTimeout>
 80033d4:	1e03      	subs	r3, r0, #0
 80033d6:	d03b      	beq.n	8003450 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033d8:	f3ef 8310 	mrs	r3, PRIMASK
 80033dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80033de:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033e0:	637b      	str	r3, [r7, #52]	; 0x34
 80033e2:	2301      	movs	r3, #1
 80033e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f383 8810 	msr	PRIMASK, r3
}
 80033ec:	46c0      	nop			; (mov r8, r8)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4921      	ldr	r1, [pc, #132]	; (8003480 <UART_CheckIdleState+0x14c>)
 80033fa:	400a      	ands	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003400:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f383 8810 	msr	PRIMASK, r3
}
 8003408:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800340a:	f3ef 8310 	mrs	r3, PRIMASK
 800340e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003410:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003412:	633b      	str	r3, [r7, #48]	; 0x30
 8003414:	2301      	movs	r3, #1
 8003416:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f383 8810 	msr	PRIMASK, r3
}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2101      	movs	r1, #1
 800342c:	438a      	bics	r2, r1
 800342e:	609a      	str	r2, [r3, #8]
 8003430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003432:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	f383 8810 	msr	PRIMASK, r3
}
 800343a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2280      	movs	r2, #128	; 0x80
 8003440:	2120      	movs	r1, #32
 8003442:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2278      	movs	r2, #120	; 0x78
 8003448:	2100      	movs	r1, #0
 800344a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e011      	b.n	8003474 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2280      	movs	r2, #128	; 0x80
 800345a:	2120      	movs	r1, #32
 800345c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2278      	movs	r2, #120	; 0x78
 800346e:	2100      	movs	r1, #0
 8003470:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	0018      	movs	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	b010      	add	sp, #64	; 0x40
 800347a:	bd80      	pop	{r7, pc}
 800347c:	01ffffff 	.word	0x01ffffff
 8003480:	fffffedf 	.word	0xfffffedf

08003484 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	1dfb      	adds	r3, r7, #7
 8003492:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003494:	e04b      	b.n	800352e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	3301      	adds	r3, #1
 800349a:	d048      	beq.n	800352e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349c:	f7fd fd2a 	bl	8000ef4 <HAL_GetTick>
 80034a0:	0002      	movs	r2, r0
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d302      	bcc.n	80034b2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e04b      	b.n	800354e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2204      	movs	r2, #4
 80034be:	4013      	ands	r3, r2
 80034c0:	d035      	beq.n	800352e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	2208      	movs	r2, #8
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d111      	bne.n	80034f4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2208      	movs	r2, #8
 80034d6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	0018      	movs	r0, r3
 80034dc:	f000 f900 	bl	80036e0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2284      	movs	r2, #132	; 0x84
 80034e4:	2108      	movs	r1, #8
 80034e6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2278      	movs	r2, #120	; 0x78
 80034ec:	2100      	movs	r1, #0
 80034ee:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e02c      	b.n	800354e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69da      	ldr	r2, [r3, #28]
 80034fa:	2380      	movs	r3, #128	; 0x80
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	401a      	ands	r2, r3
 8003500:	2380      	movs	r3, #128	; 0x80
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	429a      	cmp	r2, r3
 8003506:	d112      	bne.n	800352e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2280      	movs	r2, #128	; 0x80
 800350e:	0112      	lsls	r2, r2, #4
 8003510:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	0018      	movs	r0, r3
 8003516:	f000 f8e3 	bl	80036e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2284      	movs	r2, #132	; 0x84
 800351e:	2120      	movs	r1, #32
 8003520:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2278      	movs	r2, #120	; 0x78
 8003526:	2100      	movs	r1, #0
 8003528:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e00f      	b.n	800354e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	4013      	ands	r3, r2
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	425a      	negs	r2, r3
 800353e:	4153      	adcs	r3, r2
 8003540:	b2db      	uxtb	r3, r3
 8003542:	001a      	movs	r2, r3
 8003544:	1dfb      	adds	r3, r7, #7
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	429a      	cmp	r2, r3
 800354a:	d0a4      	beq.n	8003496 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	0018      	movs	r0, r3
 8003550:	46bd      	mov	sp, r7
 8003552:	b004      	add	sp, #16
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b090      	sub	sp, #64	; 0x40
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	1dbb      	adds	r3, r7, #6
 8003564:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	1dba      	adds	r2, r7, #6
 8003570:	2158      	movs	r1, #88	; 0x58
 8003572:	8812      	ldrh	r2, [r2, #0]
 8003574:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2284      	movs	r2, #132	; 0x84
 800357a:	2100      	movs	r1, #0
 800357c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2280      	movs	r2, #128	; 0x80
 8003582:	2122      	movs	r1, #34	; 0x22
 8003584:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800358a:	2b00      	cmp	r3, #0
 800358c:	d028      	beq.n	80035e0 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003592:	4a3e      	ldr	r2, [pc, #248]	; (800368c <UART_Start_Receive_DMA+0x134>)
 8003594:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800359a:	4a3d      	ldr	r2, [pc, #244]	; (8003690 <UART_Start_Receive_DMA+0x138>)
 800359c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a2:	4a3c      	ldr	r2, [pc, #240]	; (8003694 <UART_Start_Receive_DMA+0x13c>)
 80035a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035aa:	2200      	movs	r2, #0
 80035ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3324      	adds	r3, #36	; 0x24
 80035b8:	0019      	movs	r1, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035be:	001a      	movs	r2, r3
 80035c0:	1dbb      	adds	r3, r7, #6
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	f7fd fe0f 	bl	80011e6 <HAL_DMA_Start_IT>
 80035c8:	1e03      	subs	r3, r0, #0
 80035ca:	d009      	beq.n	80035e0 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2284      	movs	r2, #132	; 0x84
 80035d0:	2110      	movs	r1, #16
 80035d2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2280      	movs	r2, #128	; 0x80
 80035d8:	2120      	movs	r1, #32
 80035da:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e050      	b.n	8003682 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d019      	beq.n	800361c <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035e8:	f3ef 8310 	mrs	r3, PRIMASK
 80035ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80035ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035f2:	2301      	movs	r3, #1
 80035f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f8:	f383 8810 	msr	PRIMASK, r3
}
 80035fc:	46c0      	nop			; (mov r8, r8)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2180      	movs	r1, #128	; 0x80
 800360a:	0049      	lsls	r1, r1, #1
 800360c:	430a      	orrs	r2, r1
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003612:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003616:	f383 8810 	msr	PRIMASK, r3
}
 800361a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800361c:	f3ef 8310 	mrs	r3, PRIMASK
 8003620:	613b      	str	r3, [r7, #16]
  return(result);
 8003622:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003624:	63bb      	str	r3, [r7, #56]	; 0x38
 8003626:	2301      	movs	r3, #1
 8003628:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f383 8810 	msr	PRIMASK, r3
}
 8003630:	46c0      	nop			; (mov r8, r8)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2101      	movs	r1, #1
 800363e:	430a      	orrs	r2, r1
 8003640:	609a      	str	r2, [r3, #8]
 8003642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003644:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f383 8810 	msr	PRIMASK, r3
}
 800364c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800364e:	f3ef 8310 	mrs	r3, PRIMASK
 8003652:	61fb      	str	r3, [r7, #28]
  return(result);
 8003654:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003656:	637b      	str	r3, [r7, #52]	; 0x34
 8003658:	2301      	movs	r3, #1
 800365a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	f383 8810 	msr	PRIMASK, r3
}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2140      	movs	r1, #64	; 0x40
 8003670:	430a      	orrs	r2, r1
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	f383 8810 	msr	PRIMASK, r3
}
 800367e:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	0018      	movs	r0, r3
 8003684:	46bd      	mov	sp, r7
 8003686:	b010      	add	sp, #64	; 0x40
 8003688:	bd80      	pop	{r7, pc}
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	0800385d 	.word	0x0800385d
 8003690:	08003989 	.word	0x08003989
 8003694:	080039cb 	.word	0x080039cb

08003698 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036a0:	f3ef 8310 	mrs	r3, PRIMASK
 80036a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80036a6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	2301      	movs	r3, #1
 80036ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f383 8810 	msr	PRIMASK, r3
}
 80036b4:	46c0      	nop			; (mov r8, r8)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	21c0      	movs	r1, #192	; 0xc0
 80036c2:	438a      	bics	r2, r1
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f383 8810 	msr	PRIMASK, r3
}
 80036d0:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2220      	movs	r2, #32
 80036d6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80036d8:	46c0      	nop			; (mov r8, r8)
 80036da:	46bd      	mov	sp, r7
 80036dc:	b006      	add	sp, #24
 80036de:	bd80      	pop	{r7, pc}

080036e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08e      	sub	sp, #56	; 0x38
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036e8:	f3ef 8310 	mrs	r3, PRIMASK
 80036ec:	617b      	str	r3, [r7, #20]
  return(result);
 80036ee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036f0:	637b      	str	r3, [r7, #52]	; 0x34
 80036f2:	2301      	movs	r3, #1
 80036f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	f383 8810 	msr	PRIMASK, r3
}
 80036fc:	46c0      	nop			; (mov r8, r8)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4926      	ldr	r1, [pc, #152]	; (80037a4 <UART_EndRxTransfer+0xc4>)
 800370a:	400a      	ands	r2, r1
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003710:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	f383 8810 	msr	PRIMASK, r3
}
 8003718:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800371a:	f3ef 8310 	mrs	r3, PRIMASK
 800371e:	623b      	str	r3, [r7, #32]
  return(result);
 8003720:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003722:	633b      	str	r3, [r7, #48]	; 0x30
 8003724:	2301      	movs	r3, #1
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	f383 8810 	msr	PRIMASK, r3
}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2101      	movs	r1, #1
 800373c:	438a      	bics	r2, r1
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003742:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003746:	f383 8810 	msr	PRIMASK, r3
}
 800374a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003750:	2b01      	cmp	r3, #1
 8003752:	d118      	bne.n	8003786 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003754:	f3ef 8310 	mrs	r3, PRIMASK
 8003758:	60bb      	str	r3, [r7, #8]
  return(result);
 800375a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800375c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800375e:	2301      	movs	r3, #1
 8003760:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f383 8810 	msr	PRIMASK, r3
}
 8003768:	46c0      	nop			; (mov r8, r8)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2110      	movs	r1, #16
 8003776:	438a      	bics	r2, r1
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f383 8810 	msr	PRIMASK, r3
}
 8003784:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2280      	movs	r2, #128	; 0x80
 800378a:	2120      	movs	r1, #32
 800378c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	669a      	str	r2, [r3, #104]	; 0x68
}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	46bd      	mov	sp, r7
 800379e:	b00e      	add	sp, #56	; 0x38
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	fffffedf 	.word	0xfffffedf

080037a8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08c      	sub	sp, #48	; 0x30
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	2b20      	cmp	r3, #32
 80037bc:	d035      	beq.n	800382a <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 80037be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c0:	2252      	movs	r2, #82	; 0x52
 80037c2:	2100      	movs	r1, #0
 80037c4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037c6:	f3ef 8310 	mrs	r3, PRIMASK
 80037ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80037cc:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80037ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80037d0:	2301      	movs	r3, #1
 80037d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f383 8810 	msr	PRIMASK, r3
}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2180      	movs	r1, #128	; 0x80
 80037e8:	438a      	bics	r2, r1
 80037ea:	609a      	str	r2, [r3, #8]
 80037ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f383 8810 	msr	PRIMASK, r3
}
 80037f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037f8:	f3ef 8310 	mrs	r3, PRIMASK
 80037fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80037fe:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
 8003802:	2301      	movs	r3, #1
 8003804:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	f383 8810 	msr	PRIMASK, r3
}
 800380c:	46c0      	nop			; (mov r8, r8)
 800380e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2140      	movs	r1, #64	; 0x40
 800381a:	430a      	orrs	r2, r1
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	f383 8810 	msr	PRIMASK, r3
}
 8003828:	e004      	b.n	8003834 <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800382a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382c:	0018      	movs	r0, r3
 800382e:	f7fc fdbb 	bl	80003a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	46c0      	nop			; (mov r8, r8)
 8003836:	46bd      	mov	sp, r7
 8003838:	b00c      	add	sp, #48	; 0x30
 800383a:	bd80      	pop	{r7, pc}

0800383c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	0018      	movs	r0, r3
 800384e:	f7ff fb5a 	bl	8002f06 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	46bd      	mov	sp, r7
 8003856:	b004      	add	sp, #16
 8003858:	bd80      	pop	{r7, pc}
	...

0800385c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b094      	sub	sp, #80	; 0x50
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b20      	cmp	r3, #32
 8003870:	d06f      	beq.n	8003952 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8003872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003874:	225a      	movs	r2, #90	; 0x5a
 8003876:	2100      	movs	r1, #0
 8003878:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800387a:	f3ef 8310 	mrs	r3, PRIMASK
 800387e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003880:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003882:	64bb      	str	r3, [r7, #72]	; 0x48
 8003884:	2301      	movs	r3, #1
 8003886:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f383 8810 	msr	PRIMASK, r3
}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	493a      	ldr	r1, [pc, #232]	; (8003984 <UART_DMAReceiveCplt+0x128>)
 800389c:	400a      	ands	r2, r1
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	f383 8810 	msr	PRIMASK, r3
}
 80038aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ac:	f3ef 8310 	mrs	r3, PRIMASK
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b4:	647b      	str	r3, [r7, #68]	; 0x44
 80038b6:	2301      	movs	r3, #1
 80038b8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038bc:	f383 8810 	msr	PRIMASK, r3
}
 80038c0:	46c0      	nop			; (mov r8, r8)
 80038c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2101      	movs	r1, #1
 80038ce:	438a      	bics	r2, r1
 80038d0:	609a      	str	r2, [r3, #8]
 80038d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d8:	f383 8810 	msr	PRIMASK, r3
}
 80038dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038de:	f3ef 8310 	mrs	r3, PRIMASK
 80038e2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80038e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038e6:	643b      	str	r3, [r7, #64]	; 0x40
 80038e8:	2301      	movs	r3, #1
 80038ea:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ee:	f383 8810 	msr	PRIMASK, r3
}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2140      	movs	r1, #64	; 0x40
 8003900:	438a      	bics	r2, r1
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003906:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390a:	f383 8810 	msr	PRIMASK, r3
}
 800390e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003912:	2280      	movs	r2, #128	; 0x80
 8003914:	2120      	movs	r1, #32
 8003916:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800391a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800391c:	2b01      	cmp	r3, #1
 800391e:	d118      	bne.n	8003952 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003920:	f3ef 8310 	mrs	r3, PRIMASK
 8003924:	60fb      	str	r3, [r7, #12]
  return(result);
 8003926:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003928:	63fb      	str	r3, [r7, #60]	; 0x3c
 800392a:	2301      	movs	r3, #1
 800392c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f383 8810 	msr	PRIMASK, r3
}
 8003934:	46c0      	nop			; (mov r8, r8)
 8003936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2110      	movs	r1, #16
 8003942:	438a      	bics	r2, r1
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003948:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f383 8810 	msr	PRIMASK, r3
}
 8003950:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003954:	2200      	movs	r2, #0
 8003956:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800395a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800395c:	2b01      	cmp	r3, #1
 800395e:	d108      	bne.n	8003972 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003962:	2258      	movs	r2, #88	; 0x58
 8003964:	5a9a      	ldrh	r2, [r3, r2]
 8003966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003968:	0011      	movs	r1, r2
 800396a:	0018      	movs	r0, r3
 800396c:	f7ff fae3 	bl	8002f36 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003970:	e003      	b.n	800397a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003974:	0018      	movs	r0, r3
 8003976:	f7fc fc53 	bl	8000220 <HAL_UART_RxCpltCallback>
}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	46bd      	mov	sp, r7
 800397e:	b014      	add	sp, #80	; 0x50
 8003980:	bd80      	pop	{r7, pc}
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	fffffeff 	.word	0xfffffeff

08003988 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2201      	movs	r2, #1
 800399a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d10a      	bne.n	80039ba <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2258      	movs	r2, #88	; 0x58
 80039a8:	5a9b      	ldrh	r3, [r3, r2]
 80039aa:	085b      	lsrs	r3, r3, #1
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	0011      	movs	r1, r2
 80039b2:	0018      	movs	r0, r3
 80039b4:	f7ff fabf 	bl	8002f36 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80039b8:	e003      	b.n	80039c2 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	0018      	movs	r0, r3
 80039be:	f7ff faaa 	bl	8002f16 <HAL_UART_RxHalfCpltCallback>
}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	46bd      	mov	sp, r7
 80039c6:	b004      	add	sp, #16
 80039c8:	bd80      	pop	{r7, pc}

080039ca <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b086      	sub	sp, #24
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039dc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2280      	movs	r2, #128	; 0x80
 80039e2:	589b      	ldr	r3, [r3, r2]
 80039e4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	2280      	movs	r2, #128	; 0x80
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b80      	cmp	r3, #128	; 0x80
 80039f2:	d10a      	bne.n	8003a0a <UART_DMAError+0x40>
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	2b21      	cmp	r3, #33	; 0x21
 80039f8:	d107      	bne.n	8003a0a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2252      	movs	r2, #82	; 0x52
 80039fe:	2100      	movs	r1, #0
 8003a00:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	0018      	movs	r0, r3
 8003a06:	f7ff fe47 	bl	8003698 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2240      	movs	r2, #64	; 0x40
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b40      	cmp	r3, #64	; 0x40
 8003a16:	d10a      	bne.n	8003a2e <UART_DMAError+0x64>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2b22      	cmp	r3, #34	; 0x22
 8003a1c:	d107      	bne.n	8003a2e <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	225a      	movs	r2, #90	; 0x5a
 8003a22:	2100      	movs	r1, #0
 8003a24:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f7ff fe59 	bl	80036e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2284      	movs	r2, #132	; 0x84
 8003a32:	589b      	ldr	r3, [r3, r2]
 8003a34:	2210      	movs	r2, #16
 8003a36:	431a      	orrs	r2, r3
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	2184      	movs	r1, #132	; 0x84
 8003a3c:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	0018      	movs	r0, r3
 8003a42:	f7ff fa70 	bl	8002f26 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b006      	add	sp, #24
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e05b      	b.n	8003b20 <HAL_RS485Ex_Init+0xd0>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d107      	bne.n	8003a80 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2278      	movs	r2, #120	; 0x78
 8003a74:	2100      	movs	r1, #0
 8003a76:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f7fc ffe0 	bl	8000a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2224      	movs	r2, #36	; 0x24
 8003a84:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2101      	movs	r1, #1
 8003a92:	438a      	bics	r2, r1
 8003a94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f7ff fa57 	bl	8002f4c <UART_SetConfig>
 8003a9e:	0003      	movs	r3, r0
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e03b      	b.n	8003b20 <HAL_RS485Ex_Init+0xd0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_RS485Ex_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f7ff fb8a 	bl	80031cc <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2180      	movs	r1, #128	; 0x80
 8003ac4:	01c9      	lsls	r1, r1, #7
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	4a15      	ldr	r2, [pc, #84]	; (8003b28 <HAL_RS485Ex_Init+0xd8>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	0019      	movs	r1, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	055b      	lsls	r3, r3, #21
 8003ae4:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	041b      	lsls	r3, r3, #16
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a0d      	ldr	r2, [pc, #52]	; (8003b2c <HAL_RS485Ex_Init+0xdc>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	0019      	movs	r1, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2101      	movs	r1, #1
 8003b12:	430a      	orrs	r2, r1
 8003b14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	0018      	movs	r0, r3
 8003b1a:	f7ff fc0b 	bl	8003334 <UART_CheckIdleState>
 8003b1e:	0003      	movs	r3, r0
}
 8003b20:	0018      	movs	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	b006      	add	sp, #24
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	ffff7fff 	.word	0xffff7fff
 8003b2c:	fc00ffff 	.word	0xfc00ffff

08003b30 <malloc>:
 8003b30:	b510      	push	{r4, lr}
 8003b32:	4b03      	ldr	r3, [pc, #12]	; (8003b40 <malloc+0x10>)
 8003b34:	0001      	movs	r1, r0
 8003b36:	6818      	ldr	r0, [r3, #0]
 8003b38:	f000 f830 	bl	8003b9c <_malloc_r>
 8003b3c:	bd10      	pop	{r4, pc}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	20000060 	.word	0x20000060

08003b44 <free>:
 8003b44:	b510      	push	{r4, lr}
 8003b46:	4b03      	ldr	r3, [pc, #12]	; (8003b54 <free+0x10>)
 8003b48:	0001      	movs	r1, r0
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	f000 f908 	bl	8003d60 <_free_r>
 8003b50:	bd10      	pop	{r4, pc}
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	20000060 	.word	0x20000060

08003b58 <sbrk_aligned>:
 8003b58:	b570      	push	{r4, r5, r6, lr}
 8003b5a:	4e0f      	ldr	r6, [pc, #60]	; (8003b98 <sbrk_aligned+0x40>)
 8003b5c:	000d      	movs	r5, r1
 8003b5e:	6831      	ldr	r1, [r6, #0]
 8003b60:	0004      	movs	r4, r0
 8003b62:	2900      	cmp	r1, #0
 8003b64:	d102      	bne.n	8003b6c <sbrk_aligned+0x14>
 8003b66:	f000 f8b3 	bl	8003cd0 <_sbrk_r>
 8003b6a:	6030      	str	r0, [r6, #0]
 8003b6c:	0029      	movs	r1, r5
 8003b6e:	0020      	movs	r0, r4
 8003b70:	f000 f8ae 	bl	8003cd0 <_sbrk_r>
 8003b74:	1c43      	adds	r3, r0, #1
 8003b76:	d00a      	beq.n	8003b8e <sbrk_aligned+0x36>
 8003b78:	2303      	movs	r3, #3
 8003b7a:	1cc5      	adds	r5, r0, #3
 8003b7c:	439d      	bics	r5, r3
 8003b7e:	42a8      	cmp	r0, r5
 8003b80:	d007      	beq.n	8003b92 <sbrk_aligned+0x3a>
 8003b82:	1a29      	subs	r1, r5, r0
 8003b84:	0020      	movs	r0, r4
 8003b86:	f000 f8a3 	bl	8003cd0 <_sbrk_r>
 8003b8a:	3001      	adds	r0, #1
 8003b8c:	d101      	bne.n	8003b92 <sbrk_aligned+0x3a>
 8003b8e:	2501      	movs	r5, #1
 8003b90:	426d      	negs	r5, r5
 8003b92:	0028      	movs	r0, r5
 8003b94:	bd70      	pop	{r4, r5, r6, pc}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	20000314 	.word	0x20000314

08003b9c <_malloc_r>:
 8003b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	1ccb      	adds	r3, r1, #3
 8003ba2:	4393      	bics	r3, r2
 8003ba4:	3308      	adds	r3, #8
 8003ba6:	0006      	movs	r6, r0
 8003ba8:	001f      	movs	r7, r3
 8003baa:	2b0c      	cmp	r3, #12
 8003bac:	d238      	bcs.n	8003c20 <_malloc_r+0x84>
 8003bae:	270c      	movs	r7, #12
 8003bb0:	42b9      	cmp	r1, r7
 8003bb2:	d837      	bhi.n	8003c24 <_malloc_r+0x88>
 8003bb4:	0030      	movs	r0, r6
 8003bb6:	f000 f873 	bl	8003ca0 <__malloc_lock>
 8003bba:	4b38      	ldr	r3, [pc, #224]	; (8003c9c <_malloc_r+0x100>)
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	001c      	movs	r4, r3
 8003bc2:	2c00      	cmp	r4, #0
 8003bc4:	d133      	bne.n	8003c2e <_malloc_r+0x92>
 8003bc6:	0039      	movs	r1, r7
 8003bc8:	0030      	movs	r0, r6
 8003bca:	f7ff ffc5 	bl	8003b58 <sbrk_aligned>
 8003bce:	0004      	movs	r4, r0
 8003bd0:	1c43      	adds	r3, r0, #1
 8003bd2:	d15e      	bne.n	8003c92 <_malloc_r+0xf6>
 8003bd4:	9b00      	ldr	r3, [sp, #0]
 8003bd6:	681c      	ldr	r4, [r3, #0]
 8003bd8:	0025      	movs	r5, r4
 8003bda:	2d00      	cmp	r5, #0
 8003bdc:	d14e      	bne.n	8003c7c <_malloc_r+0xe0>
 8003bde:	2c00      	cmp	r4, #0
 8003be0:	d051      	beq.n	8003c86 <_malloc_r+0xea>
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	0029      	movs	r1, r5
 8003be6:	18e3      	adds	r3, r4, r3
 8003be8:	0030      	movs	r0, r6
 8003bea:	9301      	str	r3, [sp, #4]
 8003bec:	f000 f870 	bl	8003cd0 <_sbrk_r>
 8003bf0:	9b01      	ldr	r3, [sp, #4]
 8003bf2:	4283      	cmp	r3, r0
 8003bf4:	d147      	bne.n	8003c86 <_malloc_r+0xea>
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	0030      	movs	r0, r6
 8003bfa:	1aff      	subs	r7, r7, r3
 8003bfc:	0039      	movs	r1, r7
 8003bfe:	f7ff ffab 	bl	8003b58 <sbrk_aligned>
 8003c02:	3001      	adds	r0, #1
 8003c04:	d03f      	beq.n	8003c86 <_malloc_r+0xea>
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	19db      	adds	r3, r3, r7
 8003c0a:	6023      	str	r3, [r4, #0]
 8003c0c:	9b00      	ldr	r3, [sp, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d040      	beq.n	8003c96 <_malloc_r+0xfa>
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	42a2      	cmp	r2, r4
 8003c18:	d133      	bne.n	8003c82 <_malloc_r+0xe6>
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	605a      	str	r2, [r3, #4]
 8003c1e:	e014      	b.n	8003c4a <_malloc_r+0xae>
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	dac5      	bge.n	8003bb0 <_malloc_r+0x14>
 8003c24:	230c      	movs	r3, #12
 8003c26:	2500      	movs	r5, #0
 8003c28:	6033      	str	r3, [r6, #0]
 8003c2a:	0028      	movs	r0, r5
 8003c2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c2e:	6821      	ldr	r1, [r4, #0]
 8003c30:	1bc9      	subs	r1, r1, r7
 8003c32:	d420      	bmi.n	8003c76 <_malloc_r+0xda>
 8003c34:	290b      	cmp	r1, #11
 8003c36:	d918      	bls.n	8003c6a <_malloc_r+0xce>
 8003c38:	19e2      	adds	r2, r4, r7
 8003c3a:	6027      	str	r7, [r4, #0]
 8003c3c:	42a3      	cmp	r3, r4
 8003c3e:	d112      	bne.n	8003c66 <_malloc_r+0xca>
 8003c40:	9b00      	ldr	r3, [sp, #0]
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	6863      	ldr	r3, [r4, #4]
 8003c46:	6011      	str	r1, [r2, #0]
 8003c48:	6053      	str	r3, [r2, #4]
 8003c4a:	0030      	movs	r0, r6
 8003c4c:	0025      	movs	r5, r4
 8003c4e:	f000 f82f 	bl	8003cb0 <__malloc_unlock>
 8003c52:	2207      	movs	r2, #7
 8003c54:	350b      	adds	r5, #11
 8003c56:	1d23      	adds	r3, r4, #4
 8003c58:	4395      	bics	r5, r2
 8003c5a:	1aea      	subs	r2, r5, r3
 8003c5c:	429d      	cmp	r5, r3
 8003c5e:	d0e4      	beq.n	8003c2a <_malloc_r+0x8e>
 8003c60:	1b5b      	subs	r3, r3, r5
 8003c62:	50a3      	str	r3, [r4, r2]
 8003c64:	e7e1      	b.n	8003c2a <_malloc_r+0x8e>
 8003c66:	605a      	str	r2, [r3, #4]
 8003c68:	e7ec      	b.n	8003c44 <_malloc_r+0xa8>
 8003c6a:	6862      	ldr	r2, [r4, #4]
 8003c6c:	42a3      	cmp	r3, r4
 8003c6e:	d1d5      	bne.n	8003c1c <_malloc_r+0x80>
 8003c70:	9b00      	ldr	r3, [sp, #0]
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	e7e9      	b.n	8003c4a <_malloc_r+0xae>
 8003c76:	0023      	movs	r3, r4
 8003c78:	6864      	ldr	r4, [r4, #4]
 8003c7a:	e7a2      	b.n	8003bc2 <_malloc_r+0x26>
 8003c7c:	002c      	movs	r4, r5
 8003c7e:	686d      	ldr	r5, [r5, #4]
 8003c80:	e7ab      	b.n	8003bda <_malloc_r+0x3e>
 8003c82:	0013      	movs	r3, r2
 8003c84:	e7c4      	b.n	8003c10 <_malloc_r+0x74>
 8003c86:	230c      	movs	r3, #12
 8003c88:	0030      	movs	r0, r6
 8003c8a:	6033      	str	r3, [r6, #0]
 8003c8c:	f000 f810 	bl	8003cb0 <__malloc_unlock>
 8003c90:	e7cb      	b.n	8003c2a <_malloc_r+0x8e>
 8003c92:	6027      	str	r7, [r4, #0]
 8003c94:	e7d9      	b.n	8003c4a <_malloc_r+0xae>
 8003c96:	605b      	str	r3, [r3, #4]
 8003c98:	deff      	udf	#255	; 0xff
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	20000310 	.word	0x20000310

08003ca0 <__malloc_lock>:
 8003ca0:	b510      	push	{r4, lr}
 8003ca2:	4802      	ldr	r0, [pc, #8]	; (8003cac <__malloc_lock+0xc>)
 8003ca4:	f000 f850 	bl	8003d48 <__retarget_lock_acquire_recursive>
 8003ca8:	bd10      	pop	{r4, pc}
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	20000454 	.word	0x20000454

08003cb0 <__malloc_unlock>:
 8003cb0:	b510      	push	{r4, lr}
 8003cb2:	4802      	ldr	r0, [pc, #8]	; (8003cbc <__malloc_unlock+0xc>)
 8003cb4:	f000 f849 	bl	8003d4a <__retarget_lock_release_recursive>
 8003cb8:	bd10      	pop	{r4, pc}
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	20000454 	.word	0x20000454

08003cc0 <memset>:
 8003cc0:	0003      	movs	r3, r0
 8003cc2:	1882      	adds	r2, r0, r2
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d100      	bne.n	8003cca <memset+0xa>
 8003cc8:	4770      	bx	lr
 8003cca:	7019      	strb	r1, [r3, #0]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	e7f9      	b.n	8003cc4 <memset+0x4>

08003cd0 <_sbrk_r>:
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	b570      	push	{r4, r5, r6, lr}
 8003cd4:	4d06      	ldr	r5, [pc, #24]	; (8003cf0 <_sbrk_r+0x20>)
 8003cd6:	0004      	movs	r4, r0
 8003cd8:	0008      	movs	r0, r1
 8003cda:	602b      	str	r3, [r5, #0]
 8003cdc:	f7fd f84a 	bl	8000d74 <_sbrk>
 8003ce0:	1c43      	adds	r3, r0, #1
 8003ce2:	d103      	bne.n	8003cec <_sbrk_r+0x1c>
 8003ce4:	682b      	ldr	r3, [r5, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d000      	beq.n	8003cec <_sbrk_r+0x1c>
 8003cea:	6023      	str	r3, [r4, #0]
 8003cec:	bd70      	pop	{r4, r5, r6, pc}
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	20000450 	.word	0x20000450

08003cf4 <__errno>:
 8003cf4:	4b01      	ldr	r3, [pc, #4]	; (8003cfc <__errno+0x8>)
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	4770      	bx	lr
 8003cfa:	46c0      	nop			; (mov r8, r8)
 8003cfc:	20000060 	.word	0x20000060

08003d00 <__libc_init_array>:
 8003d00:	b570      	push	{r4, r5, r6, lr}
 8003d02:	2600      	movs	r6, #0
 8003d04:	4c0c      	ldr	r4, [pc, #48]	; (8003d38 <__libc_init_array+0x38>)
 8003d06:	4d0d      	ldr	r5, [pc, #52]	; (8003d3c <__libc_init_array+0x3c>)
 8003d08:	1b64      	subs	r4, r4, r5
 8003d0a:	10a4      	asrs	r4, r4, #2
 8003d0c:	42a6      	cmp	r6, r4
 8003d0e:	d109      	bne.n	8003d24 <__libc_init_array+0x24>
 8003d10:	2600      	movs	r6, #0
 8003d12:	f000 f86f 	bl	8003df4 <_init>
 8003d16:	4c0a      	ldr	r4, [pc, #40]	; (8003d40 <__libc_init_array+0x40>)
 8003d18:	4d0a      	ldr	r5, [pc, #40]	; (8003d44 <__libc_init_array+0x44>)
 8003d1a:	1b64      	subs	r4, r4, r5
 8003d1c:	10a4      	asrs	r4, r4, #2
 8003d1e:	42a6      	cmp	r6, r4
 8003d20:	d105      	bne.n	8003d2e <__libc_init_array+0x2e>
 8003d22:	bd70      	pop	{r4, r5, r6, pc}
 8003d24:	00b3      	lsls	r3, r6, #2
 8003d26:	58eb      	ldr	r3, [r5, r3]
 8003d28:	4798      	blx	r3
 8003d2a:	3601      	adds	r6, #1
 8003d2c:	e7ee      	b.n	8003d0c <__libc_init_array+0xc>
 8003d2e:	00b3      	lsls	r3, r6, #2
 8003d30:	58eb      	ldr	r3, [r5, r3]
 8003d32:	4798      	blx	r3
 8003d34:	3601      	adds	r6, #1
 8003d36:	e7f2      	b.n	8003d1e <__libc_init_array+0x1e>
 8003d38:	08003e58 	.word	0x08003e58
 8003d3c:	08003e58 	.word	0x08003e58
 8003d40:	08003e5c 	.word	0x08003e5c
 8003d44:	08003e58 	.word	0x08003e58

08003d48 <__retarget_lock_acquire_recursive>:
 8003d48:	4770      	bx	lr

08003d4a <__retarget_lock_release_recursive>:
 8003d4a:	4770      	bx	lr

08003d4c <memcpy>:
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	b510      	push	{r4, lr}
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d100      	bne.n	8003d56 <memcpy+0xa>
 8003d54:	bd10      	pop	{r4, pc}
 8003d56:	5ccc      	ldrb	r4, [r1, r3]
 8003d58:	54c4      	strb	r4, [r0, r3]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	e7f8      	b.n	8003d50 <memcpy+0x4>
	...

08003d60 <_free_r>:
 8003d60:	b570      	push	{r4, r5, r6, lr}
 8003d62:	0005      	movs	r5, r0
 8003d64:	2900      	cmp	r1, #0
 8003d66:	d010      	beq.n	8003d8a <_free_r+0x2a>
 8003d68:	1f0c      	subs	r4, r1, #4
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	da00      	bge.n	8003d72 <_free_r+0x12>
 8003d70:	18e4      	adds	r4, r4, r3
 8003d72:	0028      	movs	r0, r5
 8003d74:	f7ff ff94 	bl	8003ca0 <__malloc_lock>
 8003d78:	4a1d      	ldr	r2, [pc, #116]	; (8003df0 <_free_r+0x90>)
 8003d7a:	6813      	ldr	r3, [r2, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d105      	bne.n	8003d8c <_free_r+0x2c>
 8003d80:	6063      	str	r3, [r4, #4]
 8003d82:	6014      	str	r4, [r2, #0]
 8003d84:	0028      	movs	r0, r5
 8003d86:	f7ff ff93 	bl	8003cb0 <__malloc_unlock>
 8003d8a:	bd70      	pop	{r4, r5, r6, pc}
 8003d8c:	42a3      	cmp	r3, r4
 8003d8e:	d908      	bls.n	8003da2 <_free_r+0x42>
 8003d90:	6820      	ldr	r0, [r4, #0]
 8003d92:	1821      	adds	r1, r4, r0
 8003d94:	428b      	cmp	r3, r1
 8003d96:	d1f3      	bne.n	8003d80 <_free_r+0x20>
 8003d98:	6819      	ldr	r1, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	1809      	adds	r1, r1, r0
 8003d9e:	6021      	str	r1, [r4, #0]
 8003da0:	e7ee      	b.n	8003d80 <_free_r+0x20>
 8003da2:	001a      	movs	r2, r3
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <_free_r+0x4e>
 8003daa:	42a3      	cmp	r3, r4
 8003dac:	d9f9      	bls.n	8003da2 <_free_r+0x42>
 8003dae:	6811      	ldr	r1, [r2, #0]
 8003db0:	1850      	adds	r0, r2, r1
 8003db2:	42a0      	cmp	r0, r4
 8003db4:	d10b      	bne.n	8003dce <_free_r+0x6e>
 8003db6:	6820      	ldr	r0, [r4, #0]
 8003db8:	1809      	adds	r1, r1, r0
 8003dba:	1850      	adds	r0, r2, r1
 8003dbc:	6011      	str	r1, [r2, #0]
 8003dbe:	4283      	cmp	r3, r0
 8003dc0:	d1e0      	bne.n	8003d84 <_free_r+0x24>
 8003dc2:	6818      	ldr	r0, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	1841      	adds	r1, r0, r1
 8003dc8:	6011      	str	r1, [r2, #0]
 8003dca:	6053      	str	r3, [r2, #4]
 8003dcc:	e7da      	b.n	8003d84 <_free_r+0x24>
 8003dce:	42a0      	cmp	r0, r4
 8003dd0:	d902      	bls.n	8003dd8 <_free_r+0x78>
 8003dd2:	230c      	movs	r3, #12
 8003dd4:	602b      	str	r3, [r5, #0]
 8003dd6:	e7d5      	b.n	8003d84 <_free_r+0x24>
 8003dd8:	6820      	ldr	r0, [r4, #0]
 8003dda:	1821      	adds	r1, r4, r0
 8003ddc:	428b      	cmp	r3, r1
 8003dde:	d103      	bne.n	8003de8 <_free_r+0x88>
 8003de0:	6819      	ldr	r1, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	1809      	adds	r1, r1, r0
 8003de6:	6021      	str	r1, [r4, #0]
 8003de8:	6063      	str	r3, [r4, #4]
 8003dea:	6054      	str	r4, [r2, #4]
 8003dec:	e7ca      	b.n	8003d84 <_free_r+0x24>
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	20000310 	.word	0x20000310

08003df4 <_init>:
 8003df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dfa:	bc08      	pop	{r3}
 8003dfc:	469e      	mov	lr, r3
 8003dfe:	4770      	bx	lr

08003e00 <_fini>:
 8003e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e06:	bc08      	pop	{r3}
 8003e08:	469e      	mov	lr, r3
 8003e0a:	4770      	bx	lr
