
RDM-DMX-Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08005360  08005360  00015360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053ac  080053ac  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080053ac  080053ac  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053ac  080053ac  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053ac  080053ac  000153ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053b0  080053b0  000153b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080053b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000804  20000064  08005418  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000868  08005418  00020868  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000deff  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000209d  00000000  00000000  0002dfce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc0  00000000  00000000  00030070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a19  00000000  00000000  00030d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000021b3  00000000  00000000  00031749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000faf3  00000000  00000000  000338fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000719dd  00000000  00000000  000433ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003108  00000000  00000000  000b4dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000b7ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000064 	.word	0x20000064
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005348 	.word	0x08005348

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000068 	.word	0x20000068
 8000104:	08005348 	.word	0x08005348

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_UART_RxCpltCallback>:
void stopTiming(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    if(huart == GUI_addr){
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	4b69      	ldr	r3, [pc, #420]	; (80003d0 <HAL_UART_RxCpltCallback+0x1b0>)
 800022c:	429a      	cmp	r2, r3
 800022e:	d000      	beq.n	8000232 <HAL_UART_RxCpltCallback+0x12>
 8000230:	e097      	b.n	8000362 <HAL_UART_RxCpltCallback+0x142>
    	TIM2->CNT = 0; // Zera o timer que reseta uart em eventos de travamento
 8000232:	2380      	movs	r3, #128	; 0x80
 8000234:	05db      	lsls	r3, r3, #23
 8000236:	2200      	movs	r2, #0
 8000238:	625a      	str	r2, [r3, #36]	; 0x24
    	if (currentFrame.data == NULL) {
 800023a:	4b66      	ldr	r3, [pc, #408]	; (80003d4 <HAL_UART_RxCpltCallback+0x1b4>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d151      	bne.n	80002e6 <HAL_UART_RxCpltCallback+0xc6>
			// Cabeçalho e tamanho dos dados detectados, continua a leitura dos dados
			if ((uartBuffer[0] == header_sequence[0]) &&
 8000242:	4b65      	ldr	r3, [pc, #404]	; (80003d8 <HAL_UART_RxCpltCallback+0x1b8>)
 8000244:	781a      	ldrb	r2, [r3, #0]
 8000246:	4b65      	ldr	r3, [pc, #404]	; (80003dc <HAL_UART_RxCpltCallback+0x1bc>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	429a      	cmp	r2, r3
 800024c:	d13c      	bne.n	80002c8 <HAL_UART_RxCpltCallback+0xa8>
				(uartBuffer[1] == header_sequence[1]) &&
 800024e:	4b62      	ldr	r3, [pc, #392]	; (80003d8 <HAL_UART_RxCpltCallback+0x1b8>)
 8000250:	785a      	ldrb	r2, [r3, #1]
 8000252:	4b62      	ldr	r3, [pc, #392]	; (80003dc <HAL_UART_RxCpltCallback+0x1bc>)
 8000254:	785b      	ldrb	r3, [r3, #1]
			if ((uartBuffer[0] == header_sequence[0]) &&
 8000256:	429a      	cmp	r2, r3
 8000258:	d136      	bne.n	80002c8 <HAL_UART_RxCpltCallback+0xa8>
				(uartBuffer[2] == header_sequence[2])) {
 800025a:	4b5f      	ldr	r3, [pc, #380]	; (80003d8 <HAL_UART_RxCpltCallback+0x1b8>)
 800025c:	789a      	ldrb	r2, [r3, #2]
 800025e:	4b5f      	ldr	r3, [pc, #380]	; (80003dc <HAL_UART_RxCpltCallback+0x1bc>)
 8000260:	789b      	ldrb	r3, [r3, #2]
				(uartBuffer[1] == header_sequence[1]) &&
 8000262:	429a      	cmp	r2, r3
 8000264:	d130      	bne.n	80002c8 <HAL_UART_RxCpltCallback+0xa8>

				// Cabeçalho detectado, continua a leitura do tamanho dos dados
				currentFrame.capacity = (uint16_t)((uartBuffer[3] << 8) | uartBuffer[4]);
 8000266:	4b5c      	ldr	r3, [pc, #368]	; (80003d8 <HAL_UART_RxCpltCallback+0x1b8>)
 8000268:	78db      	ldrb	r3, [r3, #3]
 800026a:	021b      	lsls	r3, r3, #8
 800026c:	b21a      	sxth	r2, r3
 800026e:	4b5a      	ldr	r3, [pc, #360]	; (80003d8 <HAL_UART_RxCpltCallback+0x1b8>)
 8000270:	791b      	ldrb	r3, [r3, #4]
 8000272:	b21b      	sxth	r3, r3
 8000274:	4313      	orrs	r3, r2
 8000276:	b21b      	sxth	r3, r3
 8000278:	b29a      	uxth	r2, r3
 800027a:	4b56      	ldr	r3, [pc, #344]	; (80003d4 <HAL_UART_RxCpltCallback+0x1b4>)
 800027c:	809a      	strh	r2, [r3, #4]
				currentFrame.data = (uint8_t *)malloc(currentFrame.capacity);
 800027e:	4b55      	ldr	r3, [pc, #340]	; (80003d4 <HAL_UART_RxCpltCallback+0x1b4>)
 8000280:	889b      	ldrh	r3, [r3, #4]
 8000282:	0018      	movs	r0, r3
 8000284:	f004 fefe 	bl	8005084 <malloc>
 8000288:	0003      	movs	r3, r0
 800028a:	001a      	movs	r2, r3
 800028c:	4b51      	ldr	r3, [pc, #324]	; (80003d4 <HAL_UART_RxCpltCallback+0x1b4>)
 800028e:	601a      	str	r2, [r3, #0]
				if (currentFrame.data != NULL) {
 8000290:	4b50      	ldr	r3, [pc, #320]	; (80003d4 <HAL_UART_RxCpltCallback+0x1b4>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d008      	beq.n	80002aa <HAL_UART_RxCpltCallback+0x8a>
					// Continua a recepção dos dados e rodapé
					HAL_UART_Receive_DMA(huart, currentFrame.data, currentFrame.capacity);
 8000298:	4b4e      	ldr	r3, [pc, #312]	; (80003d4 <HAL_UART_RxCpltCallback+0x1b4>)
 800029a:	6819      	ldr	r1, [r3, #0]
 800029c:	4b4d      	ldr	r3, [pc, #308]	; (80003d4 <HAL_UART_RxCpltCallback+0x1b4>)
 800029e:	889a      	ldrh	r2, [r3, #4]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	0018      	movs	r0, r3
 80002a4:	f003 fb03 	bl	80038ae <HAL_UART_Receive_DMA>
				if (currentFrame.data != NULL) {
 80002a8:	e05b      	b.n	8000362 <HAL_UART_RxCpltCallback+0x142>
				} else {
					// Falha na alocação de memória, lidar com isso conforme necessário
					free(currentFrame.data);
 80002aa:	4b4a      	ldr	r3, [pc, #296]	; (80003d4 <HAL_UART_RxCpltCallback+0x1b4>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	0018      	movs	r0, r3
 80002b0:	f004 fef2 	bl	8005098 <free>
					currentFrame.data = NULL;
 80002b4:	4b47      	ldr	r3, [pc, #284]	; (80003d4 <HAL_UART_RxCpltCallback+0x1b4>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
					HAL_UART_Receive_DMA(huart, uartBuffer, HEADER_BUFFER_SIZE);
 80002ba:	4947      	ldr	r1, [pc, #284]	; (80003d8 <HAL_UART_RxCpltCallback+0x1b8>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2205      	movs	r2, #5
 80002c0:	0018      	movs	r0, r3
 80002c2:	f003 faf4 	bl	80038ae <HAL_UART_Receive_DMA>
				if (currentFrame.data != NULL) {
 80002c6:	e04c      	b.n	8000362 <HAL_UART_RxCpltCallback+0x142>
				}

			} else{ // O cabeçalho está errado e precisar esperar a recepção de novos dados
				free(currentFrame.data);
 80002c8:	4b42      	ldr	r3, [pc, #264]	; (80003d4 <HAL_UART_RxCpltCallback+0x1b4>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	0018      	movs	r0, r3
 80002ce:	f004 fee3 	bl	8005098 <free>
				currentFrame.data = NULL;
 80002d2:	4b40      	ldr	r3, [pc, #256]	; (80003d4 <HAL_UART_RxCpltCallback+0x1b4>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
				HAL_UART_Receive_DMA(huart, uartBuffer, HEADER_BUFFER_SIZE);
 80002d8:	493f      	ldr	r1, [pc, #252]	; (80003d8 <HAL_UART_RxCpltCallback+0x1b8>)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2205      	movs	r2, #5
 80002de:	0018      	movs	r0, r3
 80002e0:	f003 fae5 	bl	80038ae <HAL_UART_Receive_DMA>
 80002e4:	e03d      	b.n	8000362 <HAL_UART_RxCpltCallback+0x142>
			}

		} else {
			uint16_t DataSize = currentFrame.capacity;
 80002e6:	210e      	movs	r1, #14
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	4a3a      	ldr	r2, [pc, #232]	; (80003d4 <HAL_UART_RxCpltCallback+0x1b4>)
 80002ec:	8892      	ldrh	r2, [r2, #4]
 80002ee:	801a      	strh	r2, [r3, #0]
			// Se o rodapé estiver correto, processa o frame
			if ((currentFrame.data[DataSize-3] == tail_sequence[0]) &&
 80002f0:	4b38      	ldr	r3, [pc, #224]	; (80003d4 <HAL_UART_RxCpltCallback+0x1b4>)
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	881b      	ldrh	r3, [r3, #0]
 80002f8:	3b03      	subs	r3, #3
 80002fa:	18d3      	adds	r3, r2, r3
 80002fc:	781a      	ldrb	r2, [r3, #0]
 80002fe:	4b38      	ldr	r3, [pc, #224]	; (80003e0 <HAL_UART_RxCpltCallback+0x1c0>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	429a      	cmp	r2, r3
 8000304:	d119      	bne.n	800033a <HAL_UART_RxCpltCallback+0x11a>
				(currentFrame.data[DataSize-2] == tail_sequence[1]) &&
 8000306:	4b33      	ldr	r3, [pc, #204]	; (80003d4 <HAL_UART_RxCpltCallback+0x1b4>)
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	187b      	adds	r3, r7, r1
 800030c:	881b      	ldrh	r3, [r3, #0]
 800030e:	3b02      	subs	r3, #2
 8000310:	18d3      	adds	r3, r2, r3
 8000312:	781a      	ldrb	r2, [r3, #0]
 8000314:	4b32      	ldr	r3, [pc, #200]	; (80003e0 <HAL_UART_RxCpltCallback+0x1c0>)
 8000316:	785b      	ldrb	r3, [r3, #1]
			if ((currentFrame.data[DataSize-3] == tail_sequence[0]) &&
 8000318:	429a      	cmp	r2, r3
 800031a:	d10e      	bne.n	800033a <HAL_UART_RxCpltCallback+0x11a>
				(currentFrame.data[DataSize-1] == tail_sequence[2])) {
 800031c:	4b2d      	ldr	r3, [pc, #180]	; (80003d4 <HAL_UART_RxCpltCallback+0x1b4>)
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	187b      	adds	r3, r7, r1
 8000322:	881b      	ldrh	r3, [r3, #0]
 8000324:	3b01      	subs	r3, #1
 8000326:	18d3      	adds	r3, r2, r3
 8000328:	781a      	ldrb	r2, [r3, #0]
 800032a:	4b2d      	ldr	r3, [pc, #180]	; (80003e0 <HAL_UART_RxCpltCallback+0x1c0>)
 800032c:	789b      	ldrb	r3, [r3, #2]
				(currentFrame.data[DataSize-2] == tail_sequence[1]) &&
 800032e:	429a      	cmp	r2, r3
 8000330:	d103      	bne.n	800033a <HAL_UART_RxCpltCallback+0x11a>

				process_frame = 1; //Processa o frame
 8000332:	4b2c      	ldr	r3, [pc, #176]	; (80003e4 <HAL_UART_RxCpltCallback+0x1c4>)
 8000334:	2201      	movs	r2, #1
 8000336:	701a      	strb	r2, [r3, #0]
 8000338:	e00d      	b.n	8000356 <HAL_UART_RxCpltCallback+0x136>

			} else {
				// Se tiver errado, ignora os dados recebidos e espera recepção de novas dados
				free(currentFrame.data);
 800033a:	4b26      	ldr	r3, [pc, #152]	; (80003d4 <HAL_UART_RxCpltCallback+0x1b4>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	0018      	movs	r0, r3
 8000340:	f004 feaa 	bl	8005098 <free>
				currentFrame.data = NULL;
 8000344:	4b23      	ldr	r3, [pc, #140]	; (80003d4 <HAL_UART_RxCpltCallback+0x1b4>)
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
				HAL_UART_Receive_DMA(huart, uartBuffer, HEADER_BUFFER_SIZE);
 800034a:	4923      	ldr	r1, [pc, #140]	; (80003d8 <HAL_UART_RxCpltCallback+0x1b8>)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2205      	movs	r2, #5
 8000350:	0018      	movs	r0, r3
 8000352:	f003 faac 	bl	80038ae <HAL_UART_Receive_DMA>
			}

			HAL_UART_Receive_DMA(huart, uartBuffer, HEADER_BUFFER_SIZE);
 8000356:	4920      	ldr	r1, [pc, #128]	; (80003d8 <HAL_UART_RxCpltCallback+0x1b8>)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2205      	movs	r2, #5
 800035c:	0018      	movs	r0, r3
 800035e:	f003 faa6 	bl	80038ae <HAL_UART_Receive_DMA>
		}
    }

    if (huart == LIGHTING_addr){
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	4b20      	ldr	r3, [pc, #128]	; (80003e8 <HAL_UART_RxCpltCallback+0x1c8>)
 8000366:	429a      	cmp	r2, r3
 8000368:	d12d      	bne.n	80003c6 <HAL_UART_RxCpltCallback+0x1a6>

		/* Recebe os primeiros 3 bytes do frame.
		 * Se for DMX espera receber 256 bytes
		 * Se for RDM espera receber o tamanho designado para o frame */

		if(huart->ErrorCode != 0){
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	2284      	movs	r2, #132	; 0x84
 800036e:	589b      	ldr	r3, [r3, r2]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d008      	beq.n	8000386 <HAL_UART_RxCpltCallback+0x166>
			HAL_UART_DeInit(huart);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	0018      	movs	r0, r3
 8000378:	f003 f994 	bl	80036a4 <HAL_UART_DeInit>
			HAL_UART_Init(huart);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	0018      	movs	r0, r3
 8000380:	f003 f93c 	bl	80035fc <HAL_UART_Init>
				// Envia o frame para a interface grafica

			}
		}
	}
}
 8000384:	e01f      	b.n	80003c6 <HAL_UART_RxCpltCallback+0x1a6>
			if (UART2_on_Start){
 8000386:	4b19      	ldr	r3, [pc, #100]	; (80003ec <HAL_UART_RxCpltCallback+0x1cc>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d018      	beq.n	80003c0 <HAL_UART_RxCpltCallback+0x1a0>
				UART2_on_Start = 0;
 800038e:	4b17      	ldr	r3, [pc, #92]	; (80003ec <HAL_UART_RxCpltCallback+0x1cc>)
 8000390:	2200      	movs	r2, #0
 8000392:	701a      	strb	r2, [r3, #0]
				if (UART2_Begin_rxBuffer[0] == 0xCC){
 8000394:	4b16      	ldr	r3, [pc, #88]	; (80003f0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2bcc      	cmp	r3, #204	; 0xcc
 800039a:	d10d      	bne.n	80003b8 <HAL_UART_RxCpltCallback+0x198>
					uint16_t Frame_Size = UART2_rxBuffer_Size - 3;
 800039c:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <HAL_UART_RxCpltCallback+0x1d4>)
 800039e:	881a      	ldrh	r2, [r3, #0]
 80003a0:	210c      	movs	r1, #12
 80003a2:	187b      	adds	r3, r7, r1
 80003a4:	3a03      	subs	r2, #3
 80003a6:	801a      	strh	r2, [r3, #0]
					HAL_UART_Receive_IT(huart, UART2_rxBuffer, Frame_Size);
 80003a8:	187b      	adds	r3, r7, r1
 80003aa:	881a      	ldrh	r2, [r3, #0]
 80003ac:	4912      	ldr	r1, [pc, #72]	; (80003f8 <HAL_UART_RxCpltCallback+0x1d8>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	0018      	movs	r0, r3
 80003b2:	f003 fa25 	bl	8003800 <HAL_UART_Receive_IT>
}
 80003b6:	e006      	b.n	80003c6 <HAL_UART_RxCpltCallback+0x1a6>
					HAL_NVIC_EnableIRQ(EXTI0_1_IRQn); //Libera para receber um novo frame
 80003b8:	2005      	movs	r0, #5
 80003ba:	f000 ffd0 	bl	800135e <HAL_NVIC_EnableIRQ>
}
 80003be:	e002      	b.n	80003c6 <HAL_UART_RxCpltCallback+0x1a6>
				HAL_NVIC_EnableIRQ(EXTI0_1_IRQn); //Libera para receber um novo frame
 80003c0:	2005      	movs	r0, #5
 80003c2:	f000 ffcc 	bl	800135e <HAL_NVIC_EnableIRQ>
}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	46bd      	mov	sp, r7
 80003ca:	b004      	add	sp, #16
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	20000158 	.word	0x20000158
 80003d4:	200002f4 	.word	0x200002f4
 80003d8:	200002fc 	.word	0x200002fc
 80003dc:	20000000 	.word	0x20000000
 80003e0:	20000004 	.word	0x20000004
 80003e4:	2000030a 	.word	0x2000030a
 80003e8:	200001e0 	.word	0x200001e0
 80003ec:	2000030e 	.word	0x2000030e
 80003f0:	20000710 	.word	0x20000710
 80003f4:	2000030c 	.word	0x2000030c
 80003f8:	20000310 	.word	0x20000310

080003fc <HAL_UART_TxCpltCallback>:

// Função para lidar com a transmissão concluída
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
	if (huart == &huart2){
 8000404:	687a      	ldr	r2, [r7, #4]
 8000406:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <HAL_UART_TxCpltCallback+0x48>)
 8000408:	429a      	cmp	r2, r3
 800040a:	d117      	bne.n	800043c <HAL_UART_TxCpltCallback+0x40>
		 // Este callback será chamado quando a transmissão for concluída
		DMX_Set_DE_LOW();  		 // Desabilitar o barramento DMX para escrita (Necessidade do RS485)
 800040c:	2390      	movs	r3, #144	; 0x90
 800040e:	05db      	lsls	r3, r3, #23
 8000410:	2200      	movs	r2, #0
 8000412:	2102      	movs	r1, #2
 8000414:	0018      	movs	r0, r3
 8000416:	f001 fc6d 	bl	8001cf4 <HAL_GPIO_WritePin>
		dmx_state = STATE_IDLE;  // Transição para o estado de IDLE
 800041a:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <HAL_UART_TxCpltCallback+0x4c>)
 800041c:	2200      	movs	r2, #0
 800041e:	701a      	strb	r2, [r3, #0]

		// Libera o buffer de recebimento de dados
		DMX_buffer_toSend_Size = 0;
 8000420:	4b0a      	ldr	r3, [pc, #40]	; (800044c <HAL_UART_TxCpltCallback+0x50>)
 8000422:	2200      	movs	r2, #0
 8000424:	801a      	strh	r2, [r3, #0]
		free(DMX_buffer_toSend);
 8000426:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <HAL_UART_TxCpltCallback+0x54>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	0018      	movs	r0, r3
 800042c:	f004 fe34 	bl	8005098 <free>
		DMX_buffer_toSend = NULL;
 8000430:	4b07      	ldr	r3, [pc, #28]	; (8000450 <HAL_UART_TxCpltCallback+0x54>)
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
		data_already_send = 1; // Flag para indicar que os dados foram enviados
 8000436:	4b07      	ldr	r3, [pc, #28]	; (8000454 <HAL_UART_TxCpltCallback+0x58>)
 8000438:	2201      	movs	r2, #1
 800043a:	701a      	strb	r2, [r3, #0]

	}
}
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	b002      	add	sp, #8
 8000442:	bd80      	pop	{r7, pc}
 8000444:	200001e0 	.word	0x200001e0
 8000448:	200002f0 	.word	0x200002f0
 800044c:	20000308 	.word	0x20000308
 8000450:	20000304 	.word	0x20000304
 8000454:	20000007 	.word	0x20000007

08000458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800045e:	f000 fe37 	bl	80010d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000462:	f000 f87b 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000466:	f000 fa2d 	bl	80008c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800046a:	f000 fa05 	bl	8000878 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800046e:	f000 f99f 	bl	80007b0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000472:	f000 f9cf 	bl	8000814 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000476:	f000 f8d3 	bl	8000620 <MX_TIM2_Init>
  MX_TIM17_Init();
 800047a:	f000 f971 	bl	8000760 <MX_TIM17_Init>
  MX_TIM14_Init();
 800047e:	f000 f923 	bl	80006c8 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  #define GUI_addr &huart1
  #define LIGHTING_addr &huart2

  uint8_t dataReceived;
  uint8_t GUI_receiveFinished = 0;
 8000482:	2317      	movs	r3, #23
 8000484:	18fb      	adds	r3, r7, r3
 8000486:	2200      	movs	r2, #0
 8000488:	701a      	strb	r2, [r3, #0]
  uint8_t GUI_receive = 1;
 800048a:	2316      	movs	r3, #22
 800048c:	18fb      	adds	r3, r7, r3
 800048e:	2201      	movs	r2, #1
 8000490:	701a      	strb	r2, [r3, #0]
  uint32_t currentTime;

  unsigned char viewDMX[20];

  DMX_UART_Init();
 8000492:	f000 f9bf 	bl	8000814 <MX_USART2_UART_Init>
  HAL_TIM_Base_Start(&htim17);
 8000496:	4b27      	ldr	r3, [pc, #156]	; (8000534 <main+0xdc>)
 8000498:	0018      	movs	r0, r3
 800049a:	f002 f9d5 	bl	8002848 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 800049e:	4b26      	ldr	r3, [pc, #152]	; (8000538 <main+0xe0>)
 80004a0:	0018      	movs	r0, r3
 80004a2:	f002 fa1b 	bl	80028dc <HAL_TIM_Base_Start_IT>

  // Inicializa a DMA para a recepção UART
  HAL_UART_Receive_DMA(&huart1, uartBuffer, HEADER_BUFFER_SIZE);
 80004a6:	4925      	ldr	r1, [pc, #148]	; (800053c <main+0xe4>)
 80004a8:	4b25      	ldr	r3, [pc, #148]	; (8000540 <main+0xe8>)
 80004aa:	2205      	movs	r2, #5
 80004ac:	0018      	movs	r0, r3
 80004ae:	f003 f9fe 	bl	80038ae <HAL_UART_Receive_DMA>

//	if(process_frame == 0 && &huart1.Lock == HAL_UNLOCKED){
//		HAL_UART_Receive_DMA(&huart1, uartBuffer, HEADER_BUFFER_SIZE);
//	}

	if(process_frame && data_already_send){
 80004b2:	4b24      	ldr	r3, [pc, #144]	; (8000544 <main+0xec>)
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d0fb      	beq.n	80004b2 <main+0x5a>
 80004ba:	4b23      	ldr	r3, [pc, #140]	; (8000548 <main+0xf0>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d0f7      	beq.n	80004b2 <main+0x5a>
		// Libera a memória anteriormente alocada se necessário
		if (DMX_buffer_toSend != NULL)
 80004c2:	4b22      	ldr	r3, [pc, #136]	; (800054c <main+0xf4>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d004      	beq.n	80004d4 <main+0x7c>
			free(DMX_buffer_toSend);
 80004ca:	4b20      	ldr	r3, [pc, #128]	; (800054c <main+0xf4>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	0018      	movs	r0, r3
 80004d0:	f004 fde2 	bl	8005098 <free>

		DMX_buffer_toSend_Size = currentFrame.capacity - 3;
 80004d4:	4b1e      	ldr	r3, [pc, #120]	; (8000550 <main+0xf8>)
 80004d6:	889b      	ldrh	r3, [r3, #4]
 80004d8:	3b03      	subs	r3, #3
 80004da:	b29a      	uxth	r2, r3
 80004dc:	4b1d      	ldr	r3, [pc, #116]	; (8000554 <main+0xfc>)
 80004de:	801a      	strh	r2, [r3, #0]
		DMX_buffer_toSend = (uint8_t *)malloc(DMX_buffer_toSend_Size);
 80004e0:	4b1c      	ldr	r3, [pc, #112]	; (8000554 <main+0xfc>)
 80004e2:	881b      	ldrh	r3, [r3, #0]
 80004e4:	0018      	movs	r0, r3
 80004e6:	f004 fdcd 	bl	8005084 <malloc>
 80004ea:	0003      	movs	r3, r0
 80004ec:	001a      	movs	r2, r3
 80004ee:	4b17      	ldr	r3, [pc, #92]	; (800054c <main+0xf4>)
 80004f0:	601a      	str	r2, [r3, #0]

		// Verifica se a alocação de memória foi bem-sucedida antes de copiar os dados
		if (DMX_buffer_toSend != NULL) {
 80004f2:	4b16      	ldr	r3, [pc, #88]	; (800054c <main+0xf4>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d010      	beq.n	800051c <main+0xc4>
			memcpy(DMX_buffer_toSend, currentFrame.data, DMX_buffer_toSend_Size);
 80004fa:	4b14      	ldr	r3, [pc, #80]	; (800054c <main+0xf4>)
 80004fc:	6818      	ldr	r0, [r3, #0]
 80004fe:	4b14      	ldr	r3, [pc, #80]	; (8000550 <main+0xf8>)
 8000500:	6819      	ldr	r1, [r3, #0]
 8000502:	4b14      	ldr	r3, [pc, #80]	; (8000554 <main+0xfc>)
 8000504:	881b      	ldrh	r3, [r3, #0]
 8000506:	001a      	movs	r2, r3
 8000508:	f004 feca 	bl	80052a0 <memcpy>
			dmx_state = STATE_PREPARE;
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <main+0x100>)
 800050e:	2201      	movs	r2, #1
 8000510:	701a      	strb	r2, [r3, #0]
			data_already_send = 0;
 8000512:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <main+0xf0>)
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]
			DMX_SendHandler();
 8000518:	f000 faa4 	bl	8000a64 <DMX_SendHandler>
		} else {
			// Lida com a falha na alocação de memória, se necessário
		}

		process_frame = 0;
 800051c:	4b09      	ldr	r3, [pc, #36]	; (8000544 <main+0xec>)
 800051e:	2200      	movs	r2, #0
 8000520:	701a      	strb	r2, [r3, #0]

    	// Prepara nova recepção
    	free(currentFrame.data);
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <main+0xf8>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	0018      	movs	r0, r3
 8000528:	f004 fdb6 	bl	8005098 <free>
    	currentFrame.data = NULL;
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <main+0xf8>)
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
	if(process_frame && data_already_send){
 8000532:	e7be      	b.n	80004b2 <main+0x5a>
 8000534:	20000110 	.word	0x20000110
 8000538:	20000080 	.word	0x20000080
 800053c:	200002fc 	.word	0x200002fc
 8000540:	20000158 	.word	0x20000158
 8000544:	2000030a 	.word	0x2000030a
 8000548:	20000007 	.word	0x20000007
 800054c:	20000304 	.word	0x20000304
 8000550:	200002f4 	.word	0x200002f4
 8000554:	20000308 	.word	0x20000308
 8000558:	200002f0 	.word	0x200002f0

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b097      	sub	sp, #92	; 0x5c
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	2428      	movs	r4, #40	; 0x28
 8000564:	193b      	adds	r3, r7, r4
 8000566:	0018      	movs	r0, r3
 8000568:	2330      	movs	r3, #48	; 0x30
 800056a:	001a      	movs	r2, r3
 800056c:	2100      	movs	r1, #0
 800056e:	f004 fe51 	bl	8005214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000572:	2318      	movs	r3, #24
 8000574:	18fb      	adds	r3, r7, r3
 8000576:	0018      	movs	r0, r3
 8000578:	2310      	movs	r3, #16
 800057a:	001a      	movs	r2, r3
 800057c:	2100      	movs	r1, #0
 800057e:	f004 fe49 	bl	8005214 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	0018      	movs	r0, r3
 8000586:	2314      	movs	r3, #20
 8000588:	001a      	movs	r2, r3
 800058a:	2100      	movs	r1, #0
 800058c:	f004 fe42 	bl	8005214 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000590:	0021      	movs	r1, r4
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2202      	movs	r2, #2
 8000596:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2201      	movs	r2, #1
 800059c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2210      	movs	r2, #16
 80005a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2202      	movs	r2, #2
 80005a8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2200      	movs	r2, #0
 80005ae:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	22a0      	movs	r2, #160	; 0xa0
 80005b4:	0392      	lsls	r2, r2, #14
 80005b6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2200      	movs	r2, #0
 80005bc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	0018      	movs	r0, r3
 80005c2:	f001 fbb5 	bl	8001d30 <HAL_RCC_OscConfig>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ca:	f000 fae7 	bl	8000b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	2118      	movs	r1, #24
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2207      	movs	r2, #7
 80005d4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2202      	movs	r2, #2
 80005da:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2101      	movs	r1, #1
 80005ec:	0018      	movs	r0, r3
 80005ee:	f001 feb9 	bl	8002364 <HAL_RCC_ClockConfig>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005f6:	f000 fad1 	bl	8000b9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2201      	movs	r2, #1
 80005fe:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	0018      	movs	r0, r3
 800060a:	f001 ffef 	bl	80025ec <HAL_RCCEx_PeriphCLKConfig>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000612:	f000 fac3 	bl	8000b9c <Error_Handler>
  }
}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	b017      	add	sp, #92	; 0x5c
 800061c:	bd90      	pop	{r4, r7, pc}
	...

08000620 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000626:	2308      	movs	r3, #8
 8000628:	18fb      	adds	r3, r7, r3
 800062a:	0018      	movs	r0, r3
 800062c:	2310      	movs	r3, #16
 800062e:	001a      	movs	r2, r3
 8000630:	2100      	movs	r1, #0
 8000632:	f004 fdef 	bl	8005214 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000636:	003b      	movs	r3, r7
 8000638:	0018      	movs	r0, r3
 800063a:	2308      	movs	r3, #8
 800063c:	001a      	movs	r2, r3
 800063e:	2100      	movs	r1, #0
 8000640:	f004 fde8 	bl	8005214 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000644:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <MX_TIM2_Init+0xa0>)
 8000646:	2280      	movs	r2, #128	; 0x80
 8000648:	05d2      	lsls	r2, r2, #23
 800064a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 800064c:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <MX_TIM2_Init+0xa0>)
 800064e:	222f      	movs	r2, #47	; 0x2f
 8000650:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000652:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <MX_TIM2_Init+0xa0>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000;
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <MX_TIM2_Init+0xa0>)
 800065a:	4a1a      	ldr	r2, [pc, #104]	; (80006c4 <MX_TIM2_Init+0xa4>)
 800065c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800065e:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <MX_TIM2_Init+0xa0>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000664:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_TIM2_Init+0xa0>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <MX_TIM2_Init+0xa0>)
 800066c:	0018      	movs	r0, r3
 800066e:	f002 f89b 	bl	80027a8 <HAL_TIM_Base_Init>
 8000672:	1e03      	subs	r3, r0, #0
 8000674:	d001      	beq.n	800067a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000676:	f000 fa91 	bl	8000b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800067a:	2108      	movs	r1, #8
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2280      	movs	r2, #128	; 0x80
 8000680:	0152      	lsls	r2, r2, #5
 8000682:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000684:	187a      	adds	r2, r7, r1
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_TIM2_Init+0xa0>)
 8000688:	0011      	movs	r1, r2
 800068a:	0018      	movs	r0, r3
 800068c:	f002 fb3e 	bl	8002d0c <HAL_TIM_ConfigClockSource>
 8000690:	1e03      	subs	r3, r0, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000694:	f000 fa82 	bl	8000b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000698:	003b      	movs	r3, r7
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800069e:	003b      	movs	r3, r7
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006a4:	003a      	movs	r2, r7
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_TIM2_Init+0xa0>)
 80006a8:	0011      	movs	r1, r2
 80006aa:	0018      	movs	r0, r3
 80006ac:	f002 ff38 	bl	8003520 <HAL_TIMEx_MasterConfigSynchronization>
 80006b0:	1e03      	subs	r3, r0, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80006b4:	f000 fa72 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b006      	add	sp, #24
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000080 	.word	0x20000080
 80006c4:	000186a0 	.word	0x000186a0

080006c8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	0018      	movs	r0, r3
 80006d2:	231c      	movs	r3, #28
 80006d4:	001a      	movs	r2, r3
 80006d6:	2100      	movs	r1, #0
 80006d8:	f004 fd9c 	bl	8005214 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80006dc:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <MX_TIM14_Init+0x8c>)
 80006de:	4a1e      	ldr	r2, [pc, #120]	; (8000758 <MX_TIM14_Init+0x90>)
 80006e0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 80006e2:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <MX_TIM14_Init+0x8c>)
 80006e4:	222f      	movs	r2, #47	; 0x2f
 80006e6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e8:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <MX_TIM14_Init+0x8c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <MX_TIM14_Init+0x8c>)
 80006f0:	4a1a      	ldr	r2, [pc, #104]	; (800075c <MX_TIM14_Init+0x94>)
 80006f2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f4:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_TIM14_Init+0x8c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fa:	4b16      	ldr	r3, [pc, #88]	; (8000754 <MX_TIM14_Init+0x8c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_TIM14_Init+0x8c>)
 8000702:	0018      	movs	r0, r3
 8000704:	f002 f850 	bl	80027a8 <HAL_TIM_Base_Init>
 8000708:	1e03      	subs	r3, r0, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 800070c:	f000 fa46 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8000710:	4b10      	ldr	r3, [pc, #64]	; (8000754 <MX_TIM14_Init+0x8c>)
 8000712:	0018      	movs	r0, r3
 8000714:	f002 f934 	bl	8002980 <HAL_TIM_OC_Init>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 800071c:	f000 fa3e 	bl	8000b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2200      	movs	r2, #0
 800072a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000738:	1d39      	adds	r1, r7, #4
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_TIM14_Init+0x8c>)
 800073c:	2200      	movs	r2, #0
 800073e:	0018      	movs	r0, r3
 8000740:	f002 fa8c 	bl	8002c5c <HAL_TIM_OC_ConfigChannel>
 8000744:	1e03      	subs	r3, r0, #0
 8000746:	d001      	beq.n	800074c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000748:	f000 fa28 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	b008      	add	sp, #32
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200000c8 	.word	0x200000c8
 8000758:	40002000 	.word	0x40002000
 800075c:	0000ffff 	.word	0x0000ffff

08000760 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_TIM17_Init+0x44>)
 8000766:	4a10      	ldr	r2, [pc, #64]	; (80007a8 <MX_TIM17_Init+0x48>)
 8000768:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48-1;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_TIM17_Init+0x44>)
 800076c:	222f      	movs	r2, #47	; 0x2f
 800076e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_TIM17_Init+0x44>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 0xffff;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_TIM17_Init+0x44>)
 8000778:	4a0c      	ldr	r2, [pc, #48]	; (80007ac <MX_TIM17_Init+0x4c>)
 800077a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_TIM17_Init+0x44>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_TIM17_Init+0x44>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_TIM17_Init+0x44>)
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <MX_TIM17_Init+0x44>)
 8000790:	0018      	movs	r0, r3
 8000792:	f002 f809 	bl	80027a8 <HAL_TIM_Base_Init>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 800079a:	f000 f9ff 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000110 	.word	0x20000110
 80007a8:	40014800 	.word	0x40014800
 80007ac:	0000ffff 	.word	0x0000ffff

080007b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007b6:	4a15      	ldr	r2, [pc, #84]	; (800080c <MX_USART1_UART_Init+0x5c>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007bc:	4a14      	ldr	r2, [pc, #80]	; (8000810 <MX_USART1_UART_Init+0x60>)
 80007be:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007c8:	2280      	movs	r2, #128	; 0x80
 80007ca:	0192      	lsls	r2, r2, #6
 80007cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007f4:	0018      	movs	r0, r3
 80007f6:	f002 ff01 	bl	80035fc <HAL_UART_Init>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007fe:	f000 f9cd 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000158 	.word	0x20000158
 800080c:	40013800 	.word	0x40013800
 8000810:	0007a120 	.word	0x0007a120

08000814 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000818:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_USART2_UART_Init+0x58>)
 800081a:	4a15      	ldr	r2, [pc, #84]	; (8000870 <MX_USART2_UART_Init+0x5c>)
 800081c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 250000;
 800081e:	4b13      	ldr	r3, [pc, #76]	; (800086c <MX_USART2_UART_Init+0x58>)
 8000820:	4a14      	ldr	r2, [pc, #80]	; (8000874 <MX_USART2_UART_Init+0x60>)
 8000822:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_USART2_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_USART2_UART_Init+0x58>)
 800082c:	2280      	movs	r2, #128	; 0x80
 800082e:	0192      	lsls	r2, r2, #6
 8000830:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_USART2_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_USART2_UART_Init+0x58>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_USART2_UART_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_USART2_UART_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_USART2_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_USART2_UART_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000856:	4b05      	ldr	r3, [pc, #20]	; (800086c <MX_USART2_UART_Init+0x58>)
 8000858:	0018      	movs	r0, r3
 800085a:	f002 fecf 	bl	80035fc <HAL_UART_Init>
 800085e:	1e03      	subs	r3, r0, #0
 8000860:	d001      	beq.n	8000866 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000862:	f000 f99b 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200001e0 	.word	0x200001e0
 8000870:	40004400 	.word	0x40004400
 8000874:	0003d090 	.word	0x0003d090

08000878 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_DMA_Init+0x48>)
 8000880:	695a      	ldr	r2, [r3, #20]
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_DMA_Init+0x48>)
 8000884:	2101      	movs	r1, #1
 8000886:	430a      	orrs	r2, r1
 8000888:	615a      	str	r2, [r3, #20]
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <MX_DMA_Init+0x48>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	2201      	movs	r2, #1
 8000890:	4013      	ands	r3, r2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	200a      	movs	r0, #10
 800089c:	f000 fd4a 	bl	8001334 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80008a0:	200a      	movs	r0, #10
 80008a2:	f000 fd5c 	bl	800135e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	200b      	movs	r0, #11
 80008ac:	f000 fd42 	bl	8001334 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80008b0:	200b      	movs	r0, #11
 80008b2:	f000 fd54 	bl	800135e <HAL_NVIC_EnableIRQ>

}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b002      	add	sp, #8
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	40021000 	.word	0x40021000

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b089      	sub	sp, #36	; 0x24
 80008c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	240c      	movs	r4, #12
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	0018      	movs	r0, r3
 80008d0:	2314      	movs	r3, #20
 80008d2:	001a      	movs	r2, r3
 80008d4:	2100      	movs	r1, #0
 80008d6:	f004 fc9d 	bl	8005214 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008da:	4b44      	ldr	r3, [pc, #272]	; (80009ec <MX_GPIO_Init+0x128>)
 80008dc:	695a      	ldr	r2, [r3, #20]
 80008de:	4b43      	ldr	r3, [pc, #268]	; (80009ec <MX_GPIO_Init+0x128>)
 80008e0:	2180      	movs	r1, #128	; 0x80
 80008e2:	0309      	lsls	r1, r1, #12
 80008e4:	430a      	orrs	r2, r1
 80008e6:	615a      	str	r2, [r3, #20]
 80008e8:	4b40      	ldr	r3, [pc, #256]	; (80009ec <MX_GPIO_Init+0x128>)
 80008ea:	695a      	ldr	r2, [r3, #20]
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	031b      	lsls	r3, r3, #12
 80008f0:	4013      	ands	r3, r2
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b3d      	ldr	r3, [pc, #244]	; (80009ec <MX_GPIO_Init+0x128>)
 80008f8:	695a      	ldr	r2, [r3, #20]
 80008fa:	4b3c      	ldr	r3, [pc, #240]	; (80009ec <MX_GPIO_Init+0x128>)
 80008fc:	2180      	movs	r1, #128	; 0x80
 80008fe:	0289      	lsls	r1, r1, #10
 8000900:	430a      	orrs	r2, r1
 8000902:	615a      	str	r2, [r3, #20]
 8000904:	4b39      	ldr	r3, [pc, #228]	; (80009ec <MX_GPIO_Init+0x128>)
 8000906:	695a      	ldr	r2, [r3, #20]
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	029b      	lsls	r3, r3, #10
 800090c:	4013      	ands	r3, r2
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Timing_test_Pin|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000912:	4937      	ldr	r1, [pc, #220]	; (80009f0 <MX_GPIO_Init+0x12c>)
 8000914:	4b37      	ldr	r3, [pc, #220]	; (80009f4 <MX_GPIO_Init+0x130>)
 8000916:	2200      	movs	r2, #0
 8000918:	0018      	movs	r0, r3
 800091a:	f001 f9eb 	bl	8001cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DMX_DE_GPIO_Port, DMX_DE_Pin, GPIO_PIN_RESET);
 800091e:	2390      	movs	r3, #144	; 0x90
 8000920:	05db      	lsls	r3, r3, #23
 8000922:	2200      	movs	r2, #0
 8000924:	2102      	movs	r1, #2
 8000926:	0018      	movs	r0, r3
 8000928:	f001 f9e4 	bl	8001cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Timing_test_Pin */
  GPIO_InitStruct.Pin = Timing_test_Pin;
 800092c:	193b      	adds	r3, r7, r4
 800092e:	2201      	movs	r2, #1
 8000930:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	193b      	adds	r3, r7, r4
 8000934:	2201      	movs	r2, #1
 8000936:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	193b      	adds	r3, r7, r4
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093e:	193b      	adds	r3, r7, r4
 8000940:	2203      	movs	r2, #3
 8000942:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Timing_test_GPIO_Port, &GPIO_InitStruct);
 8000944:	193b      	adds	r3, r7, r4
 8000946:	4a2b      	ldr	r2, [pc, #172]	; (80009f4 <MX_GPIO_Init+0x130>)
 8000948:	0019      	movs	r1, r3
 800094a:	0010      	movs	r0, r2
 800094c:	f000 ff92 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pin : Break_detection_Pin */
  GPIO_InitStruct.Pin = Break_detection_Pin;
 8000950:	0021      	movs	r1, r4
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2202      	movs	r2, #2
 8000956:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	22c4      	movs	r2, #196	; 0xc4
 800095c:	0392      	lsls	r2, r2, #14
 800095e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	000c      	movs	r4, r1
 8000962:	193b      	adds	r3, r7, r4
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Break_detection_GPIO_Port, &GPIO_InitStruct);
 8000968:	193b      	adds	r3, r7, r4
 800096a:	4a22      	ldr	r2, [pc, #136]	; (80009f4 <MX_GPIO_Init+0x130>)
 800096c:	0019      	movs	r1, r3
 800096e:	0010      	movs	r0, r2
 8000970:	f000 ff80 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000974:	193b      	adds	r3, r7, r4
 8000976:	2201      	movs	r2, #1
 8000978:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800097a:	193b      	adds	r3, r7, r4
 800097c:	2290      	movs	r2, #144	; 0x90
 800097e:	0352      	lsls	r2, r2, #13
 8000980:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	193b      	adds	r3, r7, r4
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000988:	193a      	adds	r2, r7, r4
 800098a:	2390      	movs	r3, #144	; 0x90
 800098c:	05db      	lsls	r3, r3, #23
 800098e:	0011      	movs	r1, r2
 8000990:	0018      	movs	r0, r3
 8000992:	f000 ff6f 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pin : DMX_DE_Pin */
  GPIO_InitStruct.Pin = DMX_DE_Pin;
 8000996:	193b      	adds	r3, r7, r4
 8000998:	2202      	movs	r2, #2
 800099a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	193b      	adds	r3, r7, r4
 800099e:	2201      	movs	r2, #1
 80009a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DMX_DE_GPIO_Port, &GPIO_InitStruct);
 80009ae:	193a      	adds	r2, r7, r4
 80009b0:	2390      	movs	r3, #144	; 0x90
 80009b2:	05db      	lsls	r3, r3, #23
 80009b4:	0011      	movs	r1, r2
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 ff5c 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80009bc:	0021      	movs	r1, r4
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	22c0      	movs	r2, #192	; 0xc0
 80009c2:	0092      	lsls	r2, r2, #2
 80009c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2201      	movs	r2, #1
 80009ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	4a06      	ldr	r2, [pc, #24]	; (80009f4 <MX_GPIO_Init+0x130>)
 80009dc:	0019      	movs	r1, r3
 80009de:	0010      	movs	r0, r2
 80009e0:	f000 ff48 	bl	8001874 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b009      	add	sp, #36	; 0x24
 80009ea:	bd90      	pop	{r4, r7, pc}
 80009ec:	40021000 	.word	0x40021000
 80009f0:	00000301 	.word	0x00000301
 80009f4:	48000800 	.word	0x48000800

080009f8 <DMX_GPIO_Init>:
/*
 * Função que envia o comando DMX seguindo os tempos de MBB, break e MAB exigidos pela norma
 *
 * */

static void DMX_GPIO_Init(void){
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b08d      	sub	sp, #52	; 0x34
 80009fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	2418      	movs	r4, #24
 8000a00:	193b      	adds	r3, r7, r4
 8000a02:	0018      	movs	r0, r3
 8000a04:	2314      	movs	r3, #20
 8000a06:	001a      	movs	r2, r3
 8000a08:	2100      	movs	r1, #0
 8000a0a:	f004 fc03 	bl	8005214 <memset>
	uint16_t receivedIndex = 0;
 8000a0e:	232e      	movs	r3, #46	; 0x2e
 8000a10:	18fb      	adds	r3, r7, r3
 8000a12:	2200      	movs	r2, #0
 8000a14:	801a      	strh	r2, [r3, #0]
	uint8_t GUI_receiveFinished = 0;
 8000a16:	232d      	movs	r3, #45	; 0x2d
 8000a18:	18fb      	adds	r3, r7, r3
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
	uint8_t GUI_receive = 1;
 8000a1e:	232c      	movs	r3, #44	; 0x2c
 8000a20:	18fb      	adds	r3, r7, r3
 8000a22:	2201      	movs	r2, #1
 8000a24:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000a26:	2390      	movs	r3, #144	; 0x90
 8000a28:	05db      	lsls	r3, r3, #23
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f001 f960 	bl	8001cf4 <HAL_GPIO_WritePin>
	uint32_t currentTime;

	// Configure GPIO pin as output
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a34:	0021      	movs	r1, r4
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2204      	movs	r2, #4
 8000a3a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2201      	movs	r2, #1
 8000a40:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	187a      	adds	r2, r7, r1
 8000a50:	2390      	movs	r3, #144	; 0x90
 8000a52:	05db      	lsls	r3, r3, #23
 8000a54:	0011      	movs	r1, r2
 8000a56:	0018      	movs	r0, r3
 8000a58:	f000 ff0c 	bl	8001874 <HAL_GPIO_Init>
	unsigned char viewDMX[20];

}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b00d      	add	sp, #52	; 0x34
 8000a62:	bd90      	pop	{r4, r7, pc}

08000a64 <DMX_SendHandler>:

void DMX_SendHandler(void) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
    switch (dmx_state) {
 8000a68:	4b37      	ldr	r3, [pc, #220]	; (8000b48 <DMX_SendHandler+0xe4>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b04      	cmp	r3, #4
 8000a6e:	d867      	bhi.n	8000b40 <DMX_SendHandler+0xdc>
 8000a70:	009a      	lsls	r2, r3, #2
 8000a72:	4b36      	ldr	r3, [pc, #216]	; (8000b4c <DMX_SendHandler+0xe8>)
 8000a74:	18d3      	adds	r3, r2, r3
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	469f      	mov	pc, r3
        case STATE_IDLE:
            break;

        case STATE_PREPARE:
        	DMX_UART_DeInit;
 8000a7a:	4b35      	ldr	r3, [pc, #212]	; (8000b50 <DMX_SendHandler+0xec>)
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f002 fe11 	bl	80036a4 <HAL_UART_DeInit>
			DMX_GPIO_Init();   // Inicia DMX modo GPIO
 8000a82:	f7ff ffb9 	bl	80009f8 <DMX_GPIO_Init>
        	//DMX_Set_LOW();
        	DMX_Set_DE_HIGH(); // Habilita o barramento DMX para escrita (Necessidade do RS485)
 8000a86:	2390      	movs	r3, #144	; 0x90
 8000a88:	05db      	lsls	r3, r3, #23
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f001 f930 	bl	8001cf4 <HAL_GPIO_WritePin>

        	__HAL_TIM_ENABLE_IT(&htim17, TIM_IT_UPDATE);
 8000a94:	4b2f      	ldr	r3, [pc, #188]	; (8000b54 <DMX_SendHandler+0xf0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	68da      	ldr	r2, [r3, #12]
 8000a9a:	4b2e      	ldr	r3, [pc, #184]	; (8000b54 <DMX_SendHandler+0xf0>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	60da      	str	r2, [r3, #12]
			//TIM17->CNT = 0;
			//TIM17->ARR = 10;
			dmx_state = STATE_MBB;
 8000aa4:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <DMX_SendHandler+0xe4>)
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	701a      	strb	r2, [r3, #0]
			break;
 8000aaa:	e049      	b.n	8000b40 <DMX_SendHandler+0xdc>

        case STATE_MBB:
			DMX_Set_HIGH(); // Setar o MBB
 8000aac:	2390      	movs	r3, #144	; 0x90
 8000aae:	05db      	lsls	r3, r3, #23
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2104      	movs	r1, #4
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f001 f91d 	bl	8001cf4 <HAL_GPIO_WritePin>

			__HAL_TIM_ENABLE_IT(&htim17, TIM_IT_UPDATE);
 8000aba:	4b26      	ldr	r3, [pc, #152]	; (8000b54 <DMX_SendHandler+0xf0>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	68da      	ldr	r2, [r3, #12]
 8000ac0:	4b24      	ldr	r3, [pc, #144]	; (8000b54 <DMX_SendHandler+0xf0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	60da      	str	r2, [r3, #12]
			TIM17->CNT = 0;
 8000aca:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <DMX_SendHandler+0xf4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	625a      	str	r2, [r3, #36]	; 0x24
			TIM17->ARR = TIME_BEFORE_BREAK;
 8000ad0:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <DMX_SendHandler+0xf4>)
 8000ad2:	2205      	movs	r2, #5
 8000ad4:	62da      	str	r2, [r3, #44]	; 0x2c
			dmx_state = STATE_BREAK;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <DMX_SendHandler+0xe4>)
 8000ad8:	2202      	movs	r2, #2
 8000ada:	701a      	strb	r2, [r3, #0]
			break;
 8000adc:	e030      	b.n	8000b40 <DMX_SendHandler+0xdc>

        case STATE_BREAK:
            DMX_Set_LOW();  // Setar o Break
 8000ade:	2390      	movs	r3, #144	; 0x90
 8000ae0:	05db      	lsls	r3, r3, #23
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2104      	movs	r1, #4
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f001 f904 	bl	8001cf4 <HAL_GPIO_WritePin>

            __HAL_TIM_ENABLE_IT(&htim17, TIM_IT_UPDATE);
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <DMX_SendHandler+0xf0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	68da      	ldr	r2, [r3, #12]
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <DMX_SendHandler+0xf0>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2101      	movs	r1, #1
 8000af8:	430a      	orrs	r2, r1
 8000afa:	60da      	str	r2, [r3, #12]
            TIM17->CNT = 0;
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <DMX_SendHandler+0xf4>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	; 0x24
            TIM17->ARR = TIME_BREAK;
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <DMX_SendHandler+0xf4>)
 8000b04:	22fa      	movs	r2, #250	; 0xfa
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
            dmx_state = STATE_DATA;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <DMX_SendHandler+0xe4>)
 8000b0a:	2204      	movs	r2, #4
 8000b0c:	701a      	strb	r2, [r3, #0]
            break;
 8000b0e:	e017      	b.n	8000b40 <DMX_SendHandler+0xdc>


        case STATE_DATA:
        	DMX_GPIO_DeInit(); 	// Desativa o modo GPIO
 8000b10:	2390      	movs	r3, #144	; 0x90
 8000b12:	05db      	lsls	r3, r3, #23
 8000b14:	2104      	movs	r1, #4
 8000b16:	0018      	movs	r0, r3
 8000b18:	f001 f81c 	bl	8001b54 <HAL_GPIO_DeInit>
			DMX_UART_Init();		// Inicia novamente o modo USART
 8000b1c:	f7ff fe7a 	bl	8000814 <MX_USART2_UART_Init>
			dmx_state = STATE_IDLE;
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <DMX_SendHandler+0xe4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(LIGHTING_addr, DMX_buffer_toSend, DMX_buffer_toSend_Size);
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <DMX_SendHandler+0xf8>)
 8000b28:	6819      	ldr	r1, [r3, #0]
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <DMX_SendHandler+0xfc>)
 8000b2c:	881a      	ldrh	r2, [r3, #0]
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <DMX_SendHandler+0xec>)
 8000b30:	0018      	movs	r0, r3
 8000b32:	f002 fdf5 	bl	8003720 <HAL_UART_Transmit_IT>
			// Final da transmissão é feita no callback de transmissão DMA
			HAL_NVIC_EnableIRQ(TIM2_IRQn); // Ativa TIM2 para verificar error na recepção de dados
 8000b36:	200f      	movs	r0, #15
 8000b38:	f000 fc11 	bl	800135e <HAL_NVIC_EnableIRQ>
            break;
 8000b3c:	e000      	b.n	8000b40 <DMX_SendHandler+0xdc>
            break;
 8000b3e:	46c0      	nop			; (mov r8, r8)
    }
}
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	200002f0 	.word	0x200002f0
 8000b4c:	08005360 	.word	0x08005360
 8000b50:	200001e0 	.word	0x200001e0
 8000b54:	20000110 	.word	0x20000110
 8000b58:	40014800 	.word	0x40014800
 8000b5c:	20000304 	.word	0x20000304
 8000b60:	20000308 	.word	0x20000308

08000b64 <HAL_TIM_PeriodElapsedCallback>:
		}
	}
}

// Verifica se ocorreu um erro no recebimento dos dados que pode travar a recepção
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM14) {  // Verifica se o callback é para o timer TIM14
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d108      	bne.n	8000b88 <HAL_TIM_PeriodElapsedCallback+0x24>
		HAL_NVIC_EnableIRQ(EXTI0_1_IRQn); //Libera para receber um novo frame
 8000b76:	2005      	movs	r0, #5
 8000b78:	f000 fbf1 	bl	800135e <HAL_NVIC_EnableIRQ>
		on_break_mark = 1;
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	701a      	strb	r2, [r3, #0]
		on_MAB = 0;
 8000b82:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
	}
}
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b002      	add	sp, #8
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40002000 	.word	0x40002000
 8000b94:	20000714 	.word	0x20000714
 8000b98:	20000713 	.word	0x20000713

08000b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <Error_Handler+0x8>
	...

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_MspInit+0x44>)
 8000bb0:	699a      	ldr	r2, [r3, #24]
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <HAL_MspInit+0x44>)
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	619a      	str	r2, [r3, #24]
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_MspInit+0x44>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <HAL_MspInit+0x44>)
 8000bc8:	69da      	ldr	r2, [r3, #28]
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <HAL_MspInit+0x44>)
 8000bcc:	2180      	movs	r1, #128	; 0x80
 8000bce:	0549      	lsls	r1, r1, #21
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	61da      	str	r2, [r3, #28]
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <HAL_MspInit+0x44>)
 8000bd6:	69da      	ldr	r2, [r3, #28]
 8000bd8:	2380      	movs	r3, #128	; 0x80
 8000bda:	055b      	lsls	r3, r3, #21
 8000bdc:	4013      	ands	r3, r2
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b002      	add	sp, #8
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	40021000 	.word	0x40021000

08000bf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	2380      	movs	r3, #128	; 0x80
 8000bfe:	05db      	lsls	r3, r3, #23
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d114      	bne.n	8000c2e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c04:	4b27      	ldr	r3, [pc, #156]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c06:	69da      	ldr	r2, [r3, #28]
 8000c08:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	61da      	str	r2, [r3, #28]
 8000c10:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c12:	69db      	ldr	r3, [r3, #28]
 8000c14:	2201      	movs	r2, #1
 8000c16:	4013      	ands	r3, r2
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2102      	movs	r1, #2
 8000c20:	200f      	movs	r0, #15
 8000c22:	f000 fb87 	bl	8001334 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c26:	200f      	movs	r0, #15
 8000c28:	f000 fb99 	bl	800135e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000c2c:	e036      	b.n	8000c9c <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM14)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a1d      	ldr	r2, [pc, #116]	; (8000ca8 <HAL_TIM_Base_MspInit+0xb8>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d116      	bne.n	8000c66 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c3a:	69da      	ldr	r2, [r3, #28]
 8000c3c:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c3e:	2180      	movs	r1, #128	; 0x80
 8000c40:	0049      	lsls	r1, r1, #1
 8000c42:	430a      	orrs	r2, r1
 8000c44:	61da      	str	r2, [r3, #28]
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c48:	69da      	ldr	r2, [r3, #28]
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2100      	movs	r1, #0
 8000c58:	2013      	movs	r0, #19
 8000c5a:	f000 fb6b 	bl	8001334 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000c5e:	2013      	movs	r0, #19
 8000c60:	f000 fb7d 	bl	800135e <HAL_NVIC_EnableIRQ>
}
 8000c64:	e01a      	b.n	8000c9c <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM17)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a10      	ldr	r2, [pc, #64]	; (8000cac <HAL_TIM_Base_MspInit+0xbc>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d115      	bne.n	8000c9c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c72:	699a      	ldr	r2, [r3, #24]
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c76:	2180      	movs	r1, #128	; 0x80
 8000c78:	02c9      	lsls	r1, r1, #11
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	619a      	str	r2, [r3, #24]
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c80:	699a      	ldr	r2, [r3, #24]
 8000c82:	2380      	movs	r3, #128	; 0x80
 8000c84:	02db      	lsls	r3, r3, #11
 8000c86:	4013      	ands	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 1, 0);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2101      	movs	r1, #1
 8000c90:	2016      	movs	r0, #22
 8000c92:	f000 fb4f 	bl	8001334 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000c96:	2016      	movs	r0, #22
 8000c98:	f000 fb61 	bl	800135e <HAL_NVIC_EnableIRQ>
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b006      	add	sp, #24
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40002000 	.word	0x40002000
 8000cac:	40014800 	.word	0x40014800

08000cb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb0:	b590      	push	{r4, r7, lr}
 8000cb2:	b08d      	sub	sp, #52	; 0x34
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	241c      	movs	r4, #28
 8000cba:	193b      	adds	r3, r7, r4
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	2314      	movs	r3, #20
 8000cc0:	001a      	movs	r2, r3
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	f004 faa6 	bl	8005214 <memset>
  if(huart->Instance==USART1)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a67      	ldr	r2, [pc, #412]	; (8000e6c <HAL_UART_MspInit+0x1bc>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d162      	bne.n	8000d98 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cd2:	4b67      	ldr	r3, [pc, #412]	; (8000e70 <HAL_UART_MspInit+0x1c0>)
 8000cd4:	699a      	ldr	r2, [r3, #24]
 8000cd6:	4b66      	ldr	r3, [pc, #408]	; (8000e70 <HAL_UART_MspInit+0x1c0>)
 8000cd8:	2180      	movs	r1, #128	; 0x80
 8000cda:	01c9      	lsls	r1, r1, #7
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	619a      	str	r2, [r3, #24]
 8000ce0:	4b63      	ldr	r3, [pc, #396]	; (8000e70 <HAL_UART_MspInit+0x1c0>)
 8000ce2:	699a      	ldr	r2, [r3, #24]
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	01db      	lsls	r3, r3, #7
 8000ce8:	4013      	ands	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
 8000cec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	4b60      	ldr	r3, [pc, #384]	; (8000e70 <HAL_UART_MspInit+0x1c0>)
 8000cf0:	695a      	ldr	r2, [r3, #20]
 8000cf2:	4b5f      	ldr	r3, [pc, #380]	; (8000e70 <HAL_UART_MspInit+0x1c0>)
 8000cf4:	2180      	movs	r1, #128	; 0x80
 8000cf6:	0289      	lsls	r1, r1, #10
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	615a      	str	r2, [r3, #20]
 8000cfc:	4b5c      	ldr	r3, [pc, #368]	; (8000e70 <HAL_UART_MspInit+0x1c0>)
 8000cfe:	695a      	ldr	r2, [r3, #20]
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	029b      	lsls	r3, r3, #10
 8000d04:	4013      	ands	r3, r2
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USB_TX_Pin|USB_RX_Pin;
 8000d0a:	193b      	adds	r3, r7, r4
 8000d0c:	22c0      	movs	r2, #192	; 0xc0
 8000d0e:	00d2      	lsls	r2, r2, #3
 8000d10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	0021      	movs	r1, r4
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	2202      	movs	r2, #2
 8000d18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	2203      	movs	r2, #3
 8000d24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	2201      	movs	r2, #1
 8000d2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2c:	187a      	adds	r2, r7, r1
 8000d2e:	2390      	movs	r3, #144	; 0x90
 8000d30:	05db      	lsls	r3, r3, #23
 8000d32:	0011      	movs	r1, r2
 8000d34:	0018      	movs	r0, r3
 8000d36:	f000 fd9d 	bl	8001874 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000d3a:	4b4e      	ldr	r3, [pc, #312]	; (8000e74 <HAL_UART_MspInit+0x1c4>)
 8000d3c:	4a4e      	ldr	r2, [pc, #312]	; (8000e78 <HAL_UART_MspInit+0x1c8>)
 8000d3e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d40:	4b4c      	ldr	r3, [pc, #304]	; (8000e74 <HAL_UART_MspInit+0x1c4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d46:	4b4b      	ldr	r3, [pc, #300]	; (8000e74 <HAL_UART_MspInit+0x1c4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d4c:	4b49      	ldr	r3, [pc, #292]	; (8000e74 <HAL_UART_MspInit+0x1c4>)
 8000d4e:	2280      	movs	r2, #128	; 0x80
 8000d50:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d52:	4b48      	ldr	r3, [pc, #288]	; (8000e74 <HAL_UART_MspInit+0x1c4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d58:	4b46      	ldr	r3, [pc, #280]	; (8000e74 <HAL_UART_MspInit+0x1c4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000d5e:	4b45      	ldr	r3, [pc, #276]	; (8000e74 <HAL_UART_MspInit+0x1c4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d64:	4b43      	ldr	r3, [pc, #268]	; (8000e74 <HAL_UART_MspInit+0x1c4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d6a:	4b42      	ldr	r3, [pc, #264]	; (8000e74 <HAL_UART_MspInit+0x1c4>)
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f000 fb23 	bl	80013b8 <HAL_DMA_Init>
 8000d72:	1e03      	subs	r3, r0, #0
 8000d74:	d001      	beq.n	8000d7a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000d76:	f7ff ff11 	bl	8000b9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a3d      	ldr	r2, [pc, #244]	; (8000e74 <HAL_UART_MspInit+0x1c4>)
 8000d7e:	675a      	str	r2, [r3, #116]	; 0x74
 8000d80:	4b3c      	ldr	r3, [pc, #240]	; (8000e74 <HAL_UART_MspInit+0x1c4>)
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	201b      	movs	r0, #27
 8000d8c:	f000 fad2 	bl	8001334 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d90:	201b      	movs	r0, #27
 8000d92:	f000 fae4 	bl	800135e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d96:	e065      	b.n	8000e64 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART2)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a37      	ldr	r2, [pc, #220]	; (8000e7c <HAL_UART_MspInit+0x1cc>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d160      	bne.n	8000e64 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000da2:	4b33      	ldr	r3, [pc, #204]	; (8000e70 <HAL_UART_MspInit+0x1c0>)
 8000da4:	69da      	ldr	r2, [r3, #28]
 8000da6:	4b32      	ldr	r3, [pc, #200]	; (8000e70 <HAL_UART_MspInit+0x1c0>)
 8000da8:	2180      	movs	r1, #128	; 0x80
 8000daa:	0289      	lsls	r1, r1, #10
 8000dac:	430a      	orrs	r2, r1
 8000dae:	61da      	str	r2, [r3, #28]
 8000db0:	4b2f      	ldr	r3, [pc, #188]	; (8000e70 <HAL_UART_MspInit+0x1c0>)
 8000db2:	69da      	ldr	r2, [r3, #28]
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	029b      	lsls	r3, r3, #10
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <HAL_UART_MspInit+0x1c0>)
 8000dc0:	695a      	ldr	r2, [r3, #20]
 8000dc2:	4b2b      	ldr	r3, [pc, #172]	; (8000e70 <HAL_UART_MspInit+0x1c0>)
 8000dc4:	2180      	movs	r1, #128	; 0x80
 8000dc6:	0289      	lsls	r1, r1, #10
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	615a      	str	r2, [r3, #20]
 8000dcc:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <HAL_UART_MspInit+0x1c0>)
 8000dce:	695a      	ldr	r2, [r3, #20]
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	029b      	lsls	r3, r3, #10
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DMX_TX_Pin|DMX_RX_Pin;
 8000dda:	211c      	movs	r1, #28
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	220c      	movs	r2, #12
 8000de0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	2202      	movs	r2, #2
 8000de6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2203      	movs	r2, #3
 8000df2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	2201      	movs	r2, #1
 8000df8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	187a      	adds	r2, r7, r1
 8000dfc:	2390      	movs	r3, #144	; 0x90
 8000dfe:	05db      	lsls	r3, r3, #23
 8000e00:	0011      	movs	r1, r2
 8000e02:	0018      	movs	r0, r3
 8000e04:	f000 fd36 	bl	8001874 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000e08:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <HAL_UART_MspInit+0x1d0>)
 8000e0a:	4a1e      	ldr	r2, [pc, #120]	; (8000e84 <HAL_UART_MspInit+0x1d4>)
 8000e0c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <HAL_UART_MspInit+0x1d0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <HAL_UART_MspInit+0x1d0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <HAL_UART_MspInit+0x1d0>)
 8000e1c:	2280      	movs	r2, #128	; 0x80
 8000e1e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_UART_MspInit+0x1d0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <HAL_UART_MspInit+0x1d0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_UART_MspInit+0x1d0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <HAL_UART_MspInit+0x1d0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <HAL_UART_MspInit+0x1d0>)
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f000 fabc 	bl	80013b8 <HAL_DMA_Init>
 8000e40:	1e03      	subs	r3, r0, #0
 8000e42:	d001      	beq.n	8000e48 <HAL_UART_MspInit+0x198>
      Error_Handler();
 8000e44:	f7ff feaa 	bl	8000b9c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <HAL_UART_MspInit+0x1d0>)
 8000e4c:	675a      	str	r2, [r3, #116]	; 0x74
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <HAL_UART_MspInit+0x1d0>)
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2101      	movs	r1, #1
 8000e58:	201c      	movs	r0, #28
 8000e5a:	f000 fa6b 	bl	8001334 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e5e:	201c      	movs	r0, #28
 8000e60:	f000 fa7d 	bl	800135e <HAL_NVIC_EnableIRQ>
}
 8000e64:	46c0      	nop			; (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b00d      	add	sp, #52	; 0x34
 8000e6a:	bd90      	pop	{r4, r7, pc}
 8000e6c:	40013800 	.word	0x40013800
 8000e70:	40021000 	.word	0x40021000
 8000e74:	20000268 	.word	0x20000268
 8000e78:	40020030 	.word	0x40020030
 8000e7c:	40004400 	.word	0x40004400
 8000e80:	200002ac 	.word	0x200002ac
 8000e84:	40020058 	.word	0x40020058

08000e88 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a1b      	ldr	r2, [pc, #108]	; (8000f04 <HAL_UART_MspDeInit+0x7c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d116      	bne.n	8000ec8 <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000e9a:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <HAL_UART_MspDeInit+0x80>)
 8000e9c:	699a      	ldr	r2, [r3, #24]
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <HAL_UART_MspDeInit+0x80>)
 8000ea0:	491a      	ldr	r1, [pc, #104]	; (8000f0c <HAL_UART_MspDeInit+0x84>)
 8000ea2:	400a      	ands	r2, r1
 8000ea4:	619a      	str	r2, [r3, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, USB_TX_Pin|USB_RX_Pin);
 8000ea6:	23c0      	movs	r3, #192	; 0xc0
 8000ea8:	00da      	lsls	r2, r3, #3
 8000eaa:	2390      	movs	r3, #144	; 0x90
 8000eac:	05db      	lsls	r3, r3, #23
 8000eae:	0011      	movs	r1, r2
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f000 fe4f 	bl	8001b54 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f000 fac4 	bl	8001448 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000ec0:	201b      	movs	r0, #27
 8000ec2:	f000 fa5c 	bl	800137e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8000ec6:	e018      	b.n	8000efa <HAL_UART_MspDeInit+0x72>
  else if(huart->Instance==USART2)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a10      	ldr	r2, [pc, #64]	; (8000f10 <HAL_UART_MspDeInit+0x88>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d113      	bne.n	8000efa <HAL_UART_MspDeInit+0x72>
    __HAL_RCC_USART2_CLK_DISABLE();
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <HAL_UART_MspDeInit+0x80>)
 8000ed4:	69da      	ldr	r2, [r3, #28]
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <HAL_UART_MspDeInit+0x80>)
 8000ed8:	490e      	ldr	r1, [pc, #56]	; (8000f14 <HAL_UART_MspDeInit+0x8c>)
 8000eda:	400a      	ands	r2, r1
 8000edc:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, DMX_TX_Pin|DMX_RX_Pin);
 8000ede:	2390      	movs	r3, #144	; 0x90
 8000ee0:	05db      	lsls	r3, r3, #23
 8000ee2:	210c      	movs	r1, #12
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f000 fe35 	bl	8001b54 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f000 faaa 	bl	8001448 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8000ef4:	201c      	movs	r0, #28
 8000ef6:	f000 fa42 	bl	800137e <HAL_NVIC_DisableIRQ>
}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b002      	add	sp, #8
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	40013800 	.word	0x40013800
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	ffffbfff 	.word	0xffffbfff
 8000f10:	40004400 	.word	0x40004400
 8000f14:	fffdffff 	.word	0xfffdffff

08000f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <NMI_Handler+0x4>

08000f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <HardFault_Handler+0x4>

08000f24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f28:	46c0      	nop			; (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f3c:	f000 f910 	bl	8001160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f40:	46c0      	nop			; (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <DMA1_Channel2_3_IRQHandler+0x14>)
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f000 fba6 	bl	80016a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000f54:	46c0      	nop			; (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	20000268 	.word	0x20000268

08000f60 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <DMA1_Channel4_5_IRQHandler+0x14>)
 8000f66:	0018      	movs	r0, r3
 8000f68:	f000 fb9a 	bl	80016a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000f6c:	46c0      	nop			; (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	200002ac 	.word	0x200002ac

08000f78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <TIM2_IRQHandler+0x14>)
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f001 fd56 	bl	8002a30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	20000080 	.word	0x20000080

08000f90 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <TIM14_IRQHandler+0x14>)
 8000f96:	0018      	movs	r0, r3
 8000f98:	f001 fd4a 	bl	8002a30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	200000c8 	.word	0x200000c8

08000fa8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
  // Desabilita temporariamente as interrupções e chama a maquina de estados
  // para enviar a proxima parte do frame DMX
  __HAL_TIM_DISABLE_IT(&htim17, TIM_IT_UPDATE);
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <TIM17_IRQHandler+0x28>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	68da      	ldr	r2, [r3, #12]
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <TIM17_IRQHandler+0x28>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	438a      	bics	r2, r1
 8000fba:	60da      	str	r2, [r3, #12]
  DMX_SendHandler();
 8000fbc:	f7ff fd52 	bl	8000a64 <DMX_SendHandler>

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <TIM17_IRQHandler+0x28>)
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f001 fd34 	bl	8002a30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000fc8:	46c0      	nop			; (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	20000110 	.word	0x20000110

08000fd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fd8:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <USART1_IRQHandler+0x14>)
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f002 fcbe 	bl	800395c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	20000158 	.word	0x20000158

08000fec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <USART2_IRQHandler+0x14>)
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f002 fcb2 	bl	800395c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	200001e0 	.word	0x200001e0

08001004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800100c:	4a14      	ldr	r2, [pc, #80]	; (8001060 <_sbrk+0x5c>)
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <_sbrk+0x60>)
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <_sbrk+0x64>)
 8001022:	4a12      	ldr	r2, [pc, #72]	; (800106c <_sbrk+0x68>)
 8001024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	18d3      	adds	r3, r2, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	429a      	cmp	r2, r3
 8001032:	d207      	bcs.n	8001044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001034:	f004 f908 	bl	8005248 <__errno>
 8001038:	0003      	movs	r3, r0
 800103a:	220c      	movs	r2, #12
 800103c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800103e:	2301      	movs	r3, #1
 8001040:	425b      	negs	r3, r3
 8001042:	e009      	b.n	8001058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <_sbrk+0x64>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	18d2      	adds	r2, r2, r3
 8001052:	4b05      	ldr	r3, [pc, #20]	; (8001068 <_sbrk+0x64>)
 8001054:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	0018      	movs	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	b006      	add	sp, #24
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20002000 	.word	0x20002000
 8001064:	00000400 	.word	0x00000400
 8001068:	20000718 	.word	0x20000718
 800106c:	20000868 	.word	0x20000868

08001070 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001074:	46c0      	nop			; (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800107e:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8001080:	f7ff fff6 	bl	8001070 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001086:	490d      	ldr	r1, [pc, #52]	; (80010bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001088:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <LoopForever+0xe>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800109c:	4c0a      	ldr	r4, [pc, #40]	; (80010c8 <LoopForever+0x16>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010aa:	f004 f8d3 	bl	8005254 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ae:	f7ff f9d3 	bl	8000458 <main>

080010b2 <LoopForever>:

LoopForever:
    b LoopForever
 80010b2:	e7fe      	b.n	80010b2 <LoopForever>
  ldr   r0, =_estack
 80010b4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80010c0:	080053b4 	.word	0x080053b4
  ldr r2, =_sbss
 80010c4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80010c8:	20000868 	.word	0x20000868

080010cc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC1_COMP_IRQHandler>
	...

080010d0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <HAL_Init+0x24>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_Init+0x24>)
 80010da:	2110      	movs	r1, #16
 80010dc:	430a      	orrs	r2, r1
 80010de:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80010e0:	2000      	movs	r0, #0
 80010e2:	f000 f809 	bl	80010f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e6:	f7ff fd5f 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	0018      	movs	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	40022000 	.word	0x40022000

080010f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_InitTick+0x5c>)
 8001102:	681c      	ldr	r4, [r3, #0]
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <HAL_InitTick+0x60>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	0019      	movs	r1, r3
 800110a:	23fa      	movs	r3, #250	; 0xfa
 800110c:	0098      	lsls	r0, r3, #2
 800110e:	f7fe fffb 	bl	8000108 <__udivsi3>
 8001112:	0003      	movs	r3, r0
 8001114:	0019      	movs	r1, r3
 8001116:	0020      	movs	r0, r4
 8001118:	f7fe fff6 	bl	8000108 <__udivsi3>
 800111c:	0003      	movs	r3, r0
 800111e:	0018      	movs	r0, r3
 8001120:	f000 f93d 	bl	800139e <HAL_SYSTICK_Config>
 8001124:	1e03      	subs	r3, r0, #0
 8001126:	d001      	beq.n	800112c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e00f      	b.n	800114c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b03      	cmp	r3, #3
 8001130:	d80b      	bhi.n	800114a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	2301      	movs	r3, #1
 8001136:	425b      	negs	r3, r3
 8001138:	2200      	movs	r2, #0
 800113a:	0018      	movs	r0, r3
 800113c:	f000 f8fa 	bl	8001334 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_InitTick+0x64>)
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	e000      	b.n	800114c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
}
 800114c:	0018      	movs	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	b003      	add	sp, #12
 8001152:	bd90      	pop	{r4, r7, pc}
 8001154:	20000008 	.word	0x20000008
 8001158:	20000010 	.word	0x20000010
 800115c:	2000000c 	.word	0x2000000c

08001160 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <HAL_IncTick+0x1c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	001a      	movs	r2, r3
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_IncTick+0x20>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	18d2      	adds	r2, r2, r3
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_IncTick+0x20>)
 8001172:	601a      	str	r2, [r3, #0]
}
 8001174:	46c0      	nop			; (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	20000010 	.word	0x20000010
 8001180:	2000071c 	.word	0x2000071c

08001184 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b02      	ldr	r3, [pc, #8]	; (8001194 <HAL_GetTick+0x10>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	0018      	movs	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	2000071c 	.word	0x2000071c

08001198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	0002      	movs	r2, r0
 80011a0:	1dfb      	adds	r3, r7, #7
 80011a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011a4:	1dfb      	adds	r3, r7, #7
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b7f      	cmp	r3, #127	; 0x7f
 80011aa:	d809      	bhi.n	80011c0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ac:	1dfb      	adds	r3, r7, #7
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	001a      	movs	r2, r3
 80011b2:	231f      	movs	r3, #31
 80011b4:	401a      	ands	r2, r3
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <__NVIC_EnableIRQ+0x30>)
 80011b8:	2101      	movs	r1, #1
 80011ba:	4091      	lsls	r1, r2
 80011bc:	000a      	movs	r2, r1
 80011be:	601a      	str	r2, [r3, #0]
  }
}
 80011c0:	46c0      	nop			; (mov r8, r8)
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b002      	add	sp, #8
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	e000e100 	.word	0xe000e100

080011cc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	0002      	movs	r2, r0
 80011d4:	1dfb      	adds	r3, r7, #7
 80011d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011d8:	1dfb      	adds	r3, r7, #7
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b7f      	cmp	r3, #127	; 0x7f
 80011de:	d810      	bhi.n	8001202 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e0:	1dfb      	adds	r3, r7, #7
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	001a      	movs	r2, r3
 80011e6:	231f      	movs	r3, #31
 80011e8:	4013      	ands	r3, r2
 80011ea:	4908      	ldr	r1, [pc, #32]	; (800120c <__NVIC_DisableIRQ+0x40>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	409a      	lsls	r2, r3
 80011f0:	0013      	movs	r3, r2
 80011f2:	2280      	movs	r2, #128	; 0x80
 80011f4:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011f6:	f3bf 8f4f 	dsb	sy
}
 80011fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80011fc:	f3bf 8f6f 	isb	sy
}
 8001200:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	46bd      	mov	sp, r7
 8001206:	b002      	add	sp, #8
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	e000e100 	.word	0xe000e100

08001210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	0002      	movs	r2, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	1dfb      	adds	r3, r7, #7
 800121c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800121e:	1dfb      	adds	r3, r7, #7
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b7f      	cmp	r3, #127	; 0x7f
 8001224:	d828      	bhi.n	8001278 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001226:	4a2f      	ldr	r2, [pc, #188]	; (80012e4 <__NVIC_SetPriority+0xd4>)
 8001228:	1dfb      	adds	r3, r7, #7
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b25b      	sxtb	r3, r3
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	33c0      	adds	r3, #192	; 0xc0
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	589b      	ldr	r3, [r3, r2]
 8001236:	1dfa      	adds	r2, r7, #7
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	0011      	movs	r1, r2
 800123c:	2203      	movs	r2, #3
 800123e:	400a      	ands	r2, r1
 8001240:	00d2      	lsls	r2, r2, #3
 8001242:	21ff      	movs	r1, #255	; 0xff
 8001244:	4091      	lsls	r1, r2
 8001246:	000a      	movs	r2, r1
 8001248:	43d2      	mvns	r2, r2
 800124a:	401a      	ands	r2, r3
 800124c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	019b      	lsls	r3, r3, #6
 8001252:	22ff      	movs	r2, #255	; 0xff
 8001254:	401a      	ands	r2, r3
 8001256:	1dfb      	adds	r3, r7, #7
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	0018      	movs	r0, r3
 800125c:	2303      	movs	r3, #3
 800125e:	4003      	ands	r3, r0
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001264:	481f      	ldr	r0, [pc, #124]	; (80012e4 <__NVIC_SetPriority+0xd4>)
 8001266:	1dfb      	adds	r3, r7, #7
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b25b      	sxtb	r3, r3
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	430a      	orrs	r2, r1
 8001270:	33c0      	adds	r3, #192	; 0xc0
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001276:	e031      	b.n	80012dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001278:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <__NVIC_SetPriority+0xd8>)
 800127a:	1dfb      	adds	r3, r7, #7
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	0019      	movs	r1, r3
 8001280:	230f      	movs	r3, #15
 8001282:	400b      	ands	r3, r1
 8001284:	3b08      	subs	r3, #8
 8001286:	089b      	lsrs	r3, r3, #2
 8001288:	3306      	adds	r3, #6
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	18d3      	adds	r3, r2, r3
 800128e:	3304      	adds	r3, #4
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	1dfa      	adds	r2, r7, #7
 8001294:	7812      	ldrb	r2, [r2, #0]
 8001296:	0011      	movs	r1, r2
 8001298:	2203      	movs	r2, #3
 800129a:	400a      	ands	r2, r1
 800129c:	00d2      	lsls	r2, r2, #3
 800129e:	21ff      	movs	r1, #255	; 0xff
 80012a0:	4091      	lsls	r1, r2
 80012a2:	000a      	movs	r2, r1
 80012a4:	43d2      	mvns	r2, r2
 80012a6:	401a      	ands	r2, r3
 80012a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	019b      	lsls	r3, r3, #6
 80012ae:	22ff      	movs	r2, #255	; 0xff
 80012b0:	401a      	ands	r2, r3
 80012b2:	1dfb      	adds	r3, r7, #7
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	0018      	movs	r0, r3
 80012b8:	2303      	movs	r3, #3
 80012ba:	4003      	ands	r3, r0
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012c0:	4809      	ldr	r0, [pc, #36]	; (80012e8 <__NVIC_SetPriority+0xd8>)
 80012c2:	1dfb      	adds	r3, r7, #7
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	001c      	movs	r4, r3
 80012c8:	230f      	movs	r3, #15
 80012ca:	4023      	ands	r3, r4
 80012cc:	3b08      	subs	r3, #8
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	430a      	orrs	r2, r1
 80012d2:	3306      	adds	r3, #6
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	18c3      	adds	r3, r0, r3
 80012d8:	3304      	adds	r3, #4
 80012da:	601a      	str	r2, [r3, #0]
}
 80012dc:	46c0      	nop			; (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	b003      	add	sp, #12
 80012e2:	bd90      	pop	{r4, r7, pc}
 80012e4:	e000e100 	.word	0xe000e100
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	1e5a      	subs	r2, r3, #1
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	045b      	lsls	r3, r3, #17
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d301      	bcc.n	8001304 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001300:	2301      	movs	r3, #1
 8001302:	e010      	b.n	8001326 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <SysTick_Config+0x44>)
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	3a01      	subs	r2, #1
 800130a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130c:	2301      	movs	r3, #1
 800130e:	425b      	negs	r3, r3
 8001310:	2103      	movs	r1, #3
 8001312:	0018      	movs	r0, r3
 8001314:	f7ff ff7c 	bl	8001210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <SysTick_Config+0x44>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SysTick_Config+0x44>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	0018      	movs	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	b002      	add	sp, #8
 800132c:	bd80      	pop	{r7, pc}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	210f      	movs	r1, #15
 8001340:	187b      	adds	r3, r7, r1
 8001342:	1c02      	adds	r2, r0, #0
 8001344:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	187b      	adds	r3, r7, r1
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b25b      	sxtb	r3, r3
 800134e:	0011      	movs	r1, r2
 8001350:	0018      	movs	r0, r3
 8001352:	f7ff ff5d 	bl	8001210 <__NVIC_SetPriority>
}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	46bd      	mov	sp, r7
 800135a:	b004      	add	sp, #16
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	0002      	movs	r2, r0
 8001366:	1dfb      	adds	r3, r7, #7
 8001368:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800136a:	1dfb      	adds	r3, r7, #7
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	b25b      	sxtb	r3, r3
 8001370:	0018      	movs	r0, r3
 8001372:	f7ff ff11 	bl	8001198 <__NVIC_EnableIRQ>
}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	46bd      	mov	sp, r7
 800137a:	b002      	add	sp, #8
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	0002      	movs	r2, r0
 8001386:	1dfb      	adds	r3, r7, #7
 8001388:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800138a:	1dfb      	adds	r3, r7, #7
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	b25b      	sxtb	r3, r3
 8001390:	0018      	movs	r0, r3
 8001392:	f7ff ff1b 	bl	80011cc <__NVIC_DisableIRQ>
}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	46bd      	mov	sp, r7
 800139a:	b002      	add	sp, #8
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	0018      	movs	r0, r3
 80013aa:	f7ff ff9f 	bl	80012ec <SysTick_Config>
 80013ae:	0003      	movs	r3, r0
}
 80013b0:	0018      	movs	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	b002      	add	sp, #8
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e036      	b.n	800143c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2221      	movs	r2, #33	; 0x21
 80013d2:	2102      	movs	r1, #2
 80013d4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4a18      	ldr	r2, [pc, #96]	; (8001444 <HAL_DMA_Init+0x8c>)
 80013e2:	4013      	ands	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80013ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001406:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	4313      	orrs	r3, r2
 8001412:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	0018      	movs	r0, r3
 8001420:	f000 fa0c 	bl	800183c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2221      	movs	r2, #33	; 0x21
 800142e:	2101      	movs	r1, #1
 8001430:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2220      	movs	r2, #32
 8001436:	2100      	movs	r1, #0
 8001438:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	0018      	movs	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	b004      	add	sp, #16
 8001442:	bd80      	pop	{r7, pc}
 8001444:	ffffc00f 	.word	0xffffc00f

08001448 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e03b      	b.n	80014d2 <HAL_DMA_DeInit+0x8a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2101      	movs	r1, #1
 8001466:	438a      	bics	r2, r1
 8001468:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2200      	movs	r2, #0
 8001478:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]

  /* Get DMA Base Address */
  DMA_CalcBaseAndBitshift(hdma);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	0018      	movs	r0, r3
 800148e:	f000 f9d5 	bl	800183c <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800149a:	2101      	movs	r1, #1
 800149c:	4091      	lsls	r1, r2
 800149e:	000a      	movs	r2, r1
 80014a0:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2221      	movs	r2, #33	; 0x21
 80014c4:	2100      	movs	r1, #0
 80014c6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2220      	movs	r2, #32
 80014cc:	2100      	movs	r1, #0
 80014ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	0018      	movs	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b002      	add	sp, #8
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014e8:	2317      	movs	r3, #23
 80014ea:	18fb      	adds	r3, r7, r3
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2220      	movs	r2, #32
 80014f4:	5c9b      	ldrb	r3, [r3, r2]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d101      	bne.n	80014fe <HAL_DMA_Start_IT+0x24>
 80014fa:	2302      	movs	r3, #2
 80014fc:	e04f      	b.n	800159e <HAL_DMA_Start_IT+0xc4>
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2220      	movs	r2, #32
 8001502:	2101      	movs	r1, #1
 8001504:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2221      	movs	r2, #33	; 0x21
 800150a:	5c9b      	ldrb	r3, [r3, r2]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b01      	cmp	r3, #1
 8001510:	d13a      	bne.n	8001588 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2221      	movs	r2, #33	; 0x21
 8001516:	2102      	movs	r1, #2
 8001518:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2200      	movs	r2, #0
 800151e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2101      	movs	r1, #1
 800152c:	438a      	bics	r2, r1
 800152e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f000 f954 	bl	80017e4 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001540:	2b00      	cmp	r3, #0
 8001542:	d008      	beq.n	8001556 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	210e      	movs	r1, #14
 8001550:	430a      	orrs	r2, r1
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	e00f      	b.n	8001576 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	210a      	movs	r1, #10
 8001562:	430a      	orrs	r2, r1
 8001564:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2104      	movs	r1, #4
 8001572:	438a      	bics	r2, r1
 8001574:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2101      	movs	r1, #1
 8001582:	430a      	orrs	r2, r1
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	e007      	b.n	8001598 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2220      	movs	r2, #32
 800158c:	2100      	movs	r1, #0
 800158e:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001590:	2317      	movs	r3, #23
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	2202      	movs	r2, #2
 8001596:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001598:	2317      	movs	r3, #23
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	781b      	ldrb	r3, [r3, #0]
}
 800159e:	0018      	movs	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b006      	add	sp, #24
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2221      	movs	r2, #33	; 0x21
 80015b2:	5c9b      	ldrb	r3, [r3, r2]
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d008      	beq.n	80015cc <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2204      	movs	r2, #4
 80015be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2220      	movs	r2, #32
 80015c4:	2100      	movs	r1, #0
 80015c6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e020      	b.n	800160e <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	210e      	movs	r1, #14
 80015d8:	438a      	bics	r2, r1
 80015da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2101      	movs	r1, #1
 80015e8:	438a      	bics	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f4:	2101      	movs	r1, #1
 80015f6:	4091      	lsls	r1, r2
 80015f8:	000a      	movs	r2, r1
 80015fa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2221      	movs	r2, #33	; 0x21
 8001600:	2101      	movs	r1, #1
 8001602:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2220      	movs	r2, #32
 8001608:	2100      	movs	r1, #0
 800160a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	0018      	movs	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	b002      	add	sp, #8
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b084      	sub	sp, #16
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800161e:	210f      	movs	r1, #15
 8001620:	187b      	adds	r3, r7, r1
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2221      	movs	r2, #33	; 0x21
 800162a:	5c9b      	ldrb	r3, [r3, r2]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d006      	beq.n	8001640 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2204      	movs	r2, #4
 8001636:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001638:	187b      	adds	r3, r7, r1
 800163a:	2201      	movs	r2, #1
 800163c:	701a      	strb	r2, [r3, #0]
 800163e:	e028      	b.n	8001692 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	210e      	movs	r1, #14
 800164c:	438a      	bics	r2, r1
 800164e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2101      	movs	r1, #1
 800165c:	438a      	bics	r2, r1
 800165e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001668:	2101      	movs	r1, #1
 800166a:	4091      	lsls	r1, r2
 800166c:	000a      	movs	r2, r1
 800166e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2221      	movs	r2, #33	; 0x21
 8001674:	2101      	movs	r1, #1
 8001676:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2220      	movs	r2, #32
 800167c:	2100      	movs	r1, #0
 800167e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001684:	2b00      	cmp	r3, #0
 8001686:	d004      	beq.n	8001692 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	0010      	movs	r0, r2
 8001690:	4798      	blx	r3
    }
  }
  return status;
 8001692:	230f      	movs	r3, #15
 8001694:	18fb      	adds	r3, r7, r3
 8001696:	781b      	ldrb	r3, [r3, #0]
}
 8001698:	0018      	movs	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	b004      	add	sp, #16
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	2204      	movs	r2, #4
 80016be:	409a      	lsls	r2, r3
 80016c0:	0013      	movs	r3, r2
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	4013      	ands	r3, r2
 80016c6:	d024      	beq.n	8001712 <HAL_DMA_IRQHandler+0x72>
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	2204      	movs	r2, #4
 80016cc:	4013      	ands	r3, r2
 80016ce:	d020      	beq.n	8001712 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2220      	movs	r2, #32
 80016d8:	4013      	ands	r3, r2
 80016da:	d107      	bne.n	80016ec <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2104      	movs	r1, #4
 80016e8:	438a      	bics	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f4:	2104      	movs	r1, #4
 80016f6:	4091      	lsls	r1, r2
 80016f8:	000a      	movs	r2, r1
 80016fa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	2b00      	cmp	r3, #0
 8001702:	d100      	bne.n	8001706 <HAL_DMA_IRQHandler+0x66>
 8001704:	e06a      	b.n	80017dc <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	0010      	movs	r0, r2
 800170e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001710:	e064      	b.n	80017dc <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	2202      	movs	r2, #2
 8001718:	409a      	lsls	r2, r3
 800171a:	0013      	movs	r3, r2
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	4013      	ands	r3, r2
 8001720:	d02b      	beq.n	800177a <HAL_DMA_IRQHandler+0xda>
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	2202      	movs	r2, #2
 8001726:	4013      	ands	r3, r2
 8001728:	d027      	beq.n	800177a <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2220      	movs	r2, #32
 8001732:	4013      	ands	r3, r2
 8001734:	d10b      	bne.n	800174e <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	210a      	movs	r1, #10
 8001742:	438a      	bics	r2, r1
 8001744:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2221      	movs	r2, #33	; 0x21
 800174a:	2101      	movs	r1, #1
 800174c:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001756:	2102      	movs	r1, #2
 8001758:	4091      	lsls	r1, r2
 800175a:	000a      	movs	r2, r1
 800175c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2220      	movs	r2, #32
 8001762:	2100      	movs	r1, #0
 8001764:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176a:	2b00      	cmp	r3, #0
 800176c:	d036      	beq.n	80017dc <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	0010      	movs	r0, r2
 8001776:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001778:	e030      	b.n	80017dc <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	2208      	movs	r2, #8
 8001780:	409a      	lsls	r2, r3
 8001782:	0013      	movs	r3, r2
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	4013      	ands	r3, r2
 8001788:	d028      	beq.n	80017dc <HAL_DMA_IRQHandler+0x13c>
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2208      	movs	r2, #8
 800178e:	4013      	ands	r3, r2
 8001790:	d024      	beq.n	80017dc <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	210e      	movs	r1, #14
 800179e:	438a      	bics	r2, r1
 80017a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017aa:	2101      	movs	r1, #1
 80017ac:	4091      	lsls	r1, r2
 80017ae:	000a      	movs	r2, r1
 80017b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2221      	movs	r2, #33	; 0x21
 80017bc:	2101      	movs	r1, #1
 80017be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2220      	movs	r2, #32
 80017c4:	2100      	movs	r1, #0
 80017c6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	0010      	movs	r0, r2
 80017d8:	4798      	blx	r3
    }
  }
}
 80017da:	e7ff      	b.n	80017dc <HAL_DMA_IRQHandler+0x13c>
 80017dc:	46c0      	nop			; (mov r8, r8)
 80017de:	46bd      	mov	sp, r7
 80017e0:	b004      	add	sp, #16
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fa:	2101      	movs	r1, #1
 80017fc:	4091      	lsls	r1, r2
 80017fe:	000a      	movs	r2, r1
 8001800:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b10      	cmp	r3, #16
 8001810:	d108      	bne.n	8001824 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001822:	e007      	b.n	8001834 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68ba      	ldr	r2, [r7, #8]
 800182a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	60da      	str	r2, [r3, #12]
}
 8001834:	46c0      	nop			; (mov r8, r8)
 8001836:	46bd      	mov	sp, r7
 8001838:	b004      	add	sp, #16
 800183a:	bd80      	pop	{r7, pc}

0800183c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a08      	ldr	r2, [pc, #32]	; (800186c <DMA_CalcBaseAndBitshift+0x30>)
 800184a:	4694      	mov	ip, r2
 800184c:	4463      	add	r3, ip
 800184e:	2114      	movs	r1, #20
 8001850:	0018      	movs	r0, r3
 8001852:	f7fe fc59 	bl	8000108 <__udivsi3>
 8001856:	0003      	movs	r3, r0
 8001858:	009a      	lsls	r2, r3, #2
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a03      	ldr	r2, [pc, #12]	; (8001870 <DMA_CalcBaseAndBitshift+0x34>)
 8001862:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001864:	46c0      	nop			; (mov r8, r8)
 8001866:	46bd      	mov	sp, r7
 8001868:	b002      	add	sp, #8
 800186a:	bd80      	pop	{r7, pc}
 800186c:	bffdfff8 	.word	0xbffdfff8
 8001870:	40020000 	.word	0x40020000

08001874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001882:	e14f      	b.n	8001b24 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2101      	movs	r1, #1
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	4091      	lsls	r1, r2
 800188e:	000a      	movs	r2, r1
 8001890:	4013      	ands	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d100      	bne.n	800189c <HAL_GPIO_Init+0x28>
 800189a:	e140      	b.n	8001b1e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2203      	movs	r2, #3
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d005      	beq.n	80018b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2203      	movs	r2, #3
 80018ae:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d130      	bne.n	8001916 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	2203      	movs	r2, #3
 80018c0:	409a      	lsls	r2, r3
 80018c2:	0013      	movs	r3, r2
 80018c4:	43da      	mvns	r2, r3
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	409a      	lsls	r2, r3
 80018d6:	0013      	movs	r3, r2
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ea:	2201      	movs	r2, #1
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	409a      	lsls	r2, r3
 80018f0:	0013      	movs	r3, r2
 80018f2:	43da      	mvns	r2, r3
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4013      	ands	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	091b      	lsrs	r3, r3, #4
 8001900:	2201      	movs	r2, #1
 8001902:	401a      	ands	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	409a      	lsls	r2, r3
 8001908:	0013      	movs	r3, r2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2203      	movs	r2, #3
 800191c:	4013      	ands	r3, r2
 800191e:	2b03      	cmp	r3, #3
 8001920:	d017      	beq.n	8001952 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	2203      	movs	r2, #3
 800192e:	409a      	lsls	r2, r3
 8001930:	0013      	movs	r3, r2
 8001932:	43da      	mvns	r2, r3
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	409a      	lsls	r2, r3
 8001944:	0013      	movs	r3, r2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2203      	movs	r2, #3
 8001958:	4013      	ands	r3, r2
 800195a:	2b02      	cmp	r3, #2
 800195c:	d123      	bne.n	80019a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	08da      	lsrs	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3208      	adds	r2, #8
 8001966:	0092      	lsls	r2, r2, #2
 8001968:	58d3      	ldr	r3, [r2, r3]
 800196a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	2207      	movs	r2, #7
 8001970:	4013      	ands	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	220f      	movs	r2, #15
 8001976:	409a      	lsls	r2, r3
 8001978:	0013      	movs	r3, r2
 800197a:	43da      	mvns	r2, r3
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	691a      	ldr	r2, [r3, #16]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	2107      	movs	r1, #7
 800198a:	400b      	ands	r3, r1
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	409a      	lsls	r2, r3
 8001990:	0013      	movs	r3, r2
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	08da      	lsrs	r2, r3, #3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3208      	adds	r2, #8
 80019a0:	0092      	lsls	r2, r2, #2
 80019a2:	6939      	ldr	r1, [r7, #16]
 80019a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	2203      	movs	r2, #3
 80019b2:	409a      	lsls	r2, r3
 80019b4:	0013      	movs	r3, r2
 80019b6:	43da      	mvns	r2, r3
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2203      	movs	r2, #3
 80019c4:	401a      	ands	r2, r3
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	409a      	lsls	r2, r3
 80019cc:	0013      	movs	r3, r2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	23c0      	movs	r3, #192	; 0xc0
 80019e0:	029b      	lsls	r3, r3, #10
 80019e2:	4013      	ands	r3, r2
 80019e4:	d100      	bne.n	80019e8 <HAL_GPIO_Init+0x174>
 80019e6:	e09a      	b.n	8001b1e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e8:	4b54      	ldr	r3, [pc, #336]	; (8001b3c <HAL_GPIO_Init+0x2c8>)
 80019ea:	699a      	ldr	r2, [r3, #24]
 80019ec:	4b53      	ldr	r3, [pc, #332]	; (8001b3c <HAL_GPIO_Init+0x2c8>)
 80019ee:	2101      	movs	r1, #1
 80019f0:	430a      	orrs	r2, r1
 80019f2:	619a      	str	r2, [r3, #24]
 80019f4:	4b51      	ldr	r3, [pc, #324]	; (8001b3c <HAL_GPIO_Init+0x2c8>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	2201      	movs	r2, #1
 80019fa:	4013      	ands	r3, r2
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a00:	4a4f      	ldr	r2, [pc, #316]	; (8001b40 <HAL_GPIO_Init+0x2cc>)
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	089b      	lsrs	r3, r3, #2
 8001a06:	3302      	adds	r3, #2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	589b      	ldr	r3, [r3, r2]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	2203      	movs	r2, #3
 8001a12:	4013      	ands	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	220f      	movs	r2, #15
 8001a18:	409a      	lsls	r2, r3
 8001a1a:	0013      	movs	r3, r2
 8001a1c:	43da      	mvns	r2, r3
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	2390      	movs	r3, #144	; 0x90
 8001a28:	05db      	lsls	r3, r3, #23
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d013      	beq.n	8001a56 <HAL_GPIO_Init+0x1e2>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a44      	ldr	r2, [pc, #272]	; (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d00d      	beq.n	8001a52 <HAL_GPIO_Init+0x1de>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a43      	ldr	r2, [pc, #268]	; (8001b48 <HAL_GPIO_Init+0x2d4>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d007      	beq.n	8001a4e <HAL_GPIO_Init+0x1da>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a42      	ldr	r2, [pc, #264]	; (8001b4c <HAL_GPIO_Init+0x2d8>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d101      	bne.n	8001a4a <HAL_GPIO_Init+0x1d6>
 8001a46:	2303      	movs	r3, #3
 8001a48:	e006      	b.n	8001a58 <HAL_GPIO_Init+0x1e4>
 8001a4a:	2305      	movs	r3, #5
 8001a4c:	e004      	b.n	8001a58 <HAL_GPIO_Init+0x1e4>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e002      	b.n	8001a58 <HAL_GPIO_Init+0x1e4>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <HAL_GPIO_Init+0x1e4>
 8001a56:	2300      	movs	r3, #0
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	2103      	movs	r1, #3
 8001a5c:	400a      	ands	r2, r1
 8001a5e:	0092      	lsls	r2, r2, #2
 8001a60:	4093      	lsls	r3, r2
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a68:	4935      	ldr	r1, [pc, #212]	; (8001b40 <HAL_GPIO_Init+0x2cc>)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	089b      	lsrs	r3, r3, #2
 8001a6e:	3302      	adds	r3, #2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a76:	4b36      	ldr	r3, [pc, #216]	; (8001b50 <HAL_GPIO_Init+0x2dc>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4013      	ands	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	2380      	movs	r3, #128	; 0x80
 8001a8c:	035b      	lsls	r3, r3, #13
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a9a:	4b2d      	ldr	r3, [pc, #180]	; (8001b50 <HAL_GPIO_Init+0x2dc>)
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001aa0:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <HAL_GPIO_Init+0x2dc>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	43da      	mvns	r2, r3
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4013      	ands	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	039b      	lsls	r3, r3, #14
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ac4:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <HAL_GPIO_Init+0x2dc>)
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001aca:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <HAL_GPIO_Init+0x2dc>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	029b      	lsls	r3, r3, #10
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001aee:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <HAL_GPIO_Init+0x2dc>)
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001af4:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <HAL_GPIO_Init+0x2dc>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	43da      	mvns	r2, r3
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	025b      	lsls	r3, r3, #9
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b18:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <HAL_GPIO_Init+0x2dc>)
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3301      	adds	r3, #1
 8001b22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	40da      	lsrs	r2, r3
 8001b2c:	1e13      	subs	r3, r2, #0
 8001b2e:	d000      	beq.n	8001b32 <HAL_GPIO_Init+0x2be>
 8001b30:	e6a8      	b.n	8001884 <HAL_GPIO_Init+0x10>
  } 
}
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	46c0      	nop			; (mov r8, r8)
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b006      	add	sp, #24
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40010000 	.word	0x40010000
 8001b44:	48000400 	.word	0x48000400
 8001b48:	48000800 	.word	0x48000800
 8001b4c:	48000c00 	.word	0x48000c00
 8001b50:	40010400 	.word	0x40010400

08001b54 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001b62:	e0b1      	b.n	8001cc8 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001b64:	2201      	movs	r2, #1
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	409a      	lsls	r2, r3
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d100      	bne.n	8001b78 <HAL_GPIO_DeInit+0x24>
 8001b76:	e0a4      	b.n	8001cc2 <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001b78:	4a59      	ldr	r2, [pc, #356]	; (8001ce0 <HAL_GPIO_DeInit+0x18c>)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	089b      	lsrs	r3, r3, #2
 8001b7e:	3302      	adds	r3, #2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	589b      	ldr	r3, [r3, r2]
 8001b84:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2203      	movs	r2, #3
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	220f      	movs	r2, #15
 8001b90:	409a      	lsls	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4013      	ands	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	2390      	movs	r3, #144	; 0x90
 8001b9c:	05db      	lsls	r3, r3, #23
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d013      	beq.n	8001bca <HAL_GPIO_DeInit+0x76>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a4f      	ldr	r2, [pc, #316]	; (8001ce4 <HAL_GPIO_DeInit+0x190>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d00d      	beq.n	8001bc6 <HAL_GPIO_DeInit+0x72>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a4e      	ldr	r2, [pc, #312]	; (8001ce8 <HAL_GPIO_DeInit+0x194>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d007      	beq.n	8001bc2 <HAL_GPIO_DeInit+0x6e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a4d      	ldr	r2, [pc, #308]	; (8001cec <HAL_GPIO_DeInit+0x198>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d101      	bne.n	8001bbe <HAL_GPIO_DeInit+0x6a>
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e006      	b.n	8001bcc <HAL_GPIO_DeInit+0x78>
 8001bbe:	2305      	movs	r3, #5
 8001bc0:	e004      	b.n	8001bcc <HAL_GPIO_DeInit+0x78>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e002      	b.n	8001bcc <HAL_GPIO_DeInit+0x78>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_GPIO_DeInit+0x78>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	2103      	movs	r1, #3
 8001bd0:	400a      	ands	r2, r1
 8001bd2:	0092      	lsls	r2, r2, #2
 8001bd4:	4093      	lsls	r3, r2
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d132      	bne.n	8001c42 <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001bdc:	4b44      	ldr	r3, [pc, #272]	; (8001cf0 <HAL_GPIO_DeInit+0x19c>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	43d9      	mvns	r1, r3
 8001be4:	4b42      	ldr	r3, [pc, #264]	; (8001cf0 <HAL_GPIO_DeInit+0x19c>)
 8001be6:	400a      	ands	r2, r1
 8001be8:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001bea:	4b41      	ldr	r3, [pc, #260]	; (8001cf0 <HAL_GPIO_DeInit+0x19c>)
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	43d9      	mvns	r1, r3
 8001bf2:	4b3f      	ldr	r3, [pc, #252]	; (8001cf0 <HAL_GPIO_DeInit+0x19c>)
 8001bf4:	400a      	ands	r2, r1
 8001bf6:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001bf8:	4b3d      	ldr	r3, [pc, #244]	; (8001cf0 <HAL_GPIO_DeInit+0x19c>)
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	43d9      	mvns	r1, r3
 8001c00:	4b3b      	ldr	r3, [pc, #236]	; (8001cf0 <HAL_GPIO_DeInit+0x19c>)
 8001c02:	400a      	ands	r2, r1
 8001c04:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001c06:	4b3a      	ldr	r3, [pc, #232]	; (8001cf0 <HAL_GPIO_DeInit+0x19c>)
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	43d9      	mvns	r1, r3
 8001c0e:	4b38      	ldr	r3, [pc, #224]	; (8001cf0 <HAL_GPIO_DeInit+0x19c>)
 8001c10:	400a      	ands	r2, r1
 8001c12:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	2203      	movs	r2, #3
 8001c18:	4013      	ands	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	220f      	movs	r2, #15
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	0013      	movs	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001c24:	4a2e      	ldr	r2, [pc, #184]	; (8001ce0 <HAL_GPIO_DeInit+0x18c>)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	089b      	lsrs	r3, r3, #2
 8001c2a:	3302      	adds	r3, #2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	589a      	ldr	r2, [r3, r2]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	43d9      	mvns	r1, r3
 8001c34:	482a      	ldr	r0, [pc, #168]	; (8001ce0 <HAL_GPIO_DeInit+0x18c>)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	089b      	lsrs	r3, r3, #2
 8001c3a:	400a      	ands	r2, r1
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	0052      	lsls	r2, r2, #1
 8001c4a:	2103      	movs	r1, #3
 8001c4c:	4091      	lsls	r1, r2
 8001c4e:	000a      	movs	r2, r1
 8001c50:	43d2      	mvns	r2, r2
 8001c52:	401a      	ands	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	08da      	lsrs	r2, r3, #3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3208      	adds	r2, #8
 8001c60:	0092      	lsls	r2, r2, #2
 8001c62:	58d3      	ldr	r3, [r2, r3]
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	2107      	movs	r1, #7
 8001c68:	400a      	ands	r2, r1
 8001c6a:	0092      	lsls	r2, r2, #2
 8001c6c:	210f      	movs	r1, #15
 8001c6e:	4091      	lsls	r1, r2
 8001c70:	000a      	movs	r2, r1
 8001c72:	43d1      	mvns	r1, r2
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	08d2      	lsrs	r2, r2, #3
 8001c78:	4019      	ands	r1, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3208      	adds	r2, #8
 8001c7e:	0092      	lsls	r2, r2, #2
 8001c80:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	0052      	lsls	r2, r2, #1
 8001c8a:	2103      	movs	r1, #3
 8001c8c:	4091      	lsls	r1, r2
 8001c8e:	000a      	movs	r2, r1
 8001c90:	43d2      	mvns	r2, r2
 8001c92:	401a      	ands	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4091      	lsls	r1, r2
 8001ca2:	000a      	movs	r2, r1
 8001ca4:	43d2      	mvns	r2, r2
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	0052      	lsls	r2, r2, #1
 8001cb4:	2103      	movs	r1, #3
 8001cb6:	4091      	lsls	r1, r2
 8001cb8:	000a      	movs	r2, r1
 8001cba:	43d2      	mvns	r2, r2
 8001cbc:	401a      	ands	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	609a      	str	r2, [r3, #8]

    }

    position++;
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	40da      	lsrs	r2, r3
 8001cce:	1e13      	subs	r3, r2, #0
 8001cd0:	d000      	beq.n	8001cd4 <HAL_GPIO_DeInit+0x180>
 8001cd2:	e747      	b.n	8001b64 <HAL_GPIO_DeInit+0x10>
  }
}
 8001cd4:	46c0      	nop			; (mov r8, r8)
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b006      	add	sp, #24
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	40010000 	.word	0x40010000
 8001ce4:	48000400 	.word	0x48000400
 8001ce8:	48000800 	.word	0x48000800
 8001cec:	48000c00 	.word	0x48000c00
 8001cf0:	40010400 	.word	0x40010400

08001cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	0008      	movs	r0, r1
 8001cfe:	0011      	movs	r1, r2
 8001d00:	1cbb      	adds	r3, r7, #2
 8001d02:	1c02      	adds	r2, r0, #0
 8001d04:	801a      	strh	r2, [r3, #0]
 8001d06:	1c7b      	adds	r3, r7, #1
 8001d08:	1c0a      	adds	r2, r1, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d0c:	1c7b      	adds	r3, r7, #1
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d004      	beq.n	8001d1e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d14:	1cbb      	adds	r3, r7, #2
 8001d16:	881a      	ldrh	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d1c:	e003      	b.n	8001d26 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d1e:	1cbb      	adds	r3, r7, #2
 8001d20:	881a      	ldrh	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	b002      	add	sp, #8
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e301      	b.n	8002346 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2201      	movs	r2, #1
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d100      	bne.n	8001d4e <HAL_RCC_OscConfig+0x1e>
 8001d4c:	e08d      	b.n	8001e6a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d4e:	4bc3      	ldr	r3, [pc, #780]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	220c      	movs	r2, #12
 8001d54:	4013      	ands	r3, r2
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d00e      	beq.n	8001d78 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d5a:	4bc0      	ldr	r3, [pc, #768]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	220c      	movs	r2, #12
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	d116      	bne.n	8001d94 <HAL_RCC_OscConfig+0x64>
 8001d66:	4bbd      	ldr	r3, [pc, #756]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	2380      	movs	r3, #128	; 0x80
 8001d6c:	025b      	lsls	r3, r3, #9
 8001d6e:	401a      	ands	r2, r3
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	025b      	lsls	r3, r3, #9
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d10d      	bne.n	8001d94 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d78:	4bb8      	ldr	r3, [pc, #736]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	029b      	lsls	r3, r3, #10
 8001d80:	4013      	ands	r3, r2
 8001d82:	d100      	bne.n	8001d86 <HAL_RCC_OscConfig+0x56>
 8001d84:	e070      	b.n	8001e68 <HAL_RCC_OscConfig+0x138>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d000      	beq.n	8001d90 <HAL_RCC_OscConfig+0x60>
 8001d8e:	e06b      	b.n	8001e68 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e2d8      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d107      	bne.n	8001dac <HAL_RCC_OscConfig+0x7c>
 8001d9c:	4baf      	ldr	r3, [pc, #700]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4bae      	ldr	r3, [pc, #696]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001da2:	2180      	movs	r1, #128	; 0x80
 8001da4:	0249      	lsls	r1, r1, #9
 8001da6:	430a      	orrs	r2, r1
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	e02f      	b.n	8001e0c <HAL_RCC_OscConfig+0xdc>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10c      	bne.n	8001dce <HAL_RCC_OscConfig+0x9e>
 8001db4:	4ba9      	ldr	r3, [pc, #676]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4ba8      	ldr	r3, [pc, #672]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001dba:	49a9      	ldr	r1, [pc, #676]	; (8002060 <HAL_RCC_OscConfig+0x330>)
 8001dbc:	400a      	ands	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	4ba6      	ldr	r3, [pc, #664]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4ba5      	ldr	r3, [pc, #660]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001dc6:	49a7      	ldr	r1, [pc, #668]	; (8002064 <HAL_RCC_OscConfig+0x334>)
 8001dc8:	400a      	ands	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	e01e      	b.n	8001e0c <HAL_RCC_OscConfig+0xdc>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b05      	cmp	r3, #5
 8001dd4:	d10e      	bne.n	8001df4 <HAL_RCC_OscConfig+0xc4>
 8001dd6:	4ba1      	ldr	r3, [pc, #644]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	4ba0      	ldr	r3, [pc, #640]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001ddc:	2180      	movs	r1, #128	; 0x80
 8001dde:	02c9      	lsls	r1, r1, #11
 8001de0:	430a      	orrs	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	4b9d      	ldr	r3, [pc, #628]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b9c      	ldr	r3, [pc, #624]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001dea:	2180      	movs	r1, #128	; 0x80
 8001dec:	0249      	lsls	r1, r1, #9
 8001dee:	430a      	orrs	r2, r1
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	e00b      	b.n	8001e0c <HAL_RCC_OscConfig+0xdc>
 8001df4:	4b99      	ldr	r3, [pc, #612]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b98      	ldr	r3, [pc, #608]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001dfa:	4999      	ldr	r1, [pc, #612]	; (8002060 <HAL_RCC_OscConfig+0x330>)
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	4b96      	ldr	r3, [pc, #600]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b95      	ldr	r3, [pc, #596]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001e06:	4997      	ldr	r1, [pc, #604]	; (8002064 <HAL_RCC_OscConfig+0x334>)
 8001e08:	400a      	ands	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d014      	beq.n	8001e3e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e14:	f7ff f9b6 	bl	8001184 <HAL_GetTick>
 8001e18:	0003      	movs	r3, r0
 8001e1a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e1e:	f7ff f9b1 	bl	8001184 <HAL_GetTick>
 8001e22:	0002      	movs	r2, r0
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b64      	cmp	r3, #100	; 0x64
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e28a      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e30:	4b8a      	ldr	r3, [pc, #552]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	029b      	lsls	r3, r3, #10
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0xee>
 8001e3c:	e015      	b.n	8001e6a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3e:	f7ff f9a1 	bl	8001184 <HAL_GetTick>
 8001e42:	0003      	movs	r3, r0
 8001e44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e48:	f7ff f99c 	bl	8001184 <HAL_GetTick>
 8001e4c:	0002      	movs	r2, r0
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b64      	cmp	r3, #100	; 0x64
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e275      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e5a:	4b80      	ldr	r3, [pc, #512]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	2380      	movs	r3, #128	; 0x80
 8001e60:	029b      	lsls	r3, r3, #10
 8001e62:	4013      	ands	r3, r2
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x118>
 8001e66:	e000      	b.n	8001e6a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e68:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	4013      	ands	r3, r2
 8001e72:	d100      	bne.n	8001e76 <HAL_RCC_OscConfig+0x146>
 8001e74:	e069      	b.n	8001f4a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e76:	4b79      	ldr	r3, [pc, #484]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d00b      	beq.n	8001e98 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e80:	4b76      	ldr	r3, [pc, #472]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	220c      	movs	r2, #12
 8001e86:	4013      	ands	r3, r2
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d11c      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x196>
 8001e8c:	4b73      	ldr	r3, [pc, #460]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	025b      	lsls	r3, r3, #9
 8001e94:	4013      	ands	r3, r2
 8001e96:	d116      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e98:	4b70      	ldr	r3, [pc, #448]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d005      	beq.n	8001eae <HAL_RCC_OscConfig+0x17e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d001      	beq.n	8001eae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e24b      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eae:	4b6b      	ldr	r3, [pc, #428]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	22f8      	movs	r2, #248	; 0xf8
 8001eb4:	4393      	bics	r3, r2
 8001eb6:	0019      	movs	r1, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	00da      	lsls	r2, r3, #3
 8001ebe:	4b67      	ldr	r3, [pc, #412]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec4:	e041      	b.n	8001f4a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d024      	beq.n	8001f18 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ece:	4b63      	ldr	r3, [pc, #396]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	4b62      	ldr	r3, [pc, #392]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eda:	f7ff f953 	bl	8001184 <HAL_GetTick>
 8001ede:	0003      	movs	r3, r0
 8001ee0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee4:	f7ff f94e 	bl	8001184 <HAL_GetTick>
 8001ee8:	0002      	movs	r2, r0
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e227      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef6:	4b59      	ldr	r3, [pc, #356]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2202      	movs	r2, #2
 8001efc:	4013      	ands	r3, r2
 8001efe:	d0f1      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f00:	4b56      	ldr	r3, [pc, #344]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	22f8      	movs	r2, #248	; 0xf8
 8001f06:	4393      	bics	r3, r2
 8001f08:	0019      	movs	r1, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	00da      	lsls	r2, r3, #3
 8001f10:	4b52      	ldr	r3, [pc, #328]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001f12:	430a      	orrs	r2, r1
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	e018      	b.n	8001f4a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f18:	4b50      	ldr	r3, [pc, #320]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b4f      	ldr	r3, [pc, #316]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001f1e:	2101      	movs	r1, #1
 8001f20:	438a      	bics	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7ff f92e 	bl	8001184 <HAL_GetTick>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f2e:	f7ff f929 	bl	8001184 <HAL_GetTick>
 8001f32:	0002      	movs	r2, r0
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e202      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f40:	4b46      	ldr	r3, [pc, #280]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2202      	movs	r2, #2
 8001f46:	4013      	ands	r3, r2
 8001f48:	d1f1      	bne.n	8001f2e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2208      	movs	r2, #8
 8001f50:	4013      	ands	r3, r2
 8001f52:	d036      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d019      	beq.n	8001f90 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f5c:	4b3f      	ldr	r3, [pc, #252]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001f5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f60:	4b3e      	ldr	r3, [pc, #248]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001f62:	2101      	movs	r1, #1
 8001f64:	430a      	orrs	r2, r1
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f68:	f7ff f90c 	bl	8001184 <HAL_GetTick>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f72:	f7ff f907 	bl	8001184 <HAL_GetTick>
 8001f76:	0002      	movs	r2, r0
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e1e0      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f84:	4b35      	ldr	r3, [pc, #212]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	2202      	movs	r2, #2
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d0f1      	beq.n	8001f72 <HAL_RCC_OscConfig+0x242>
 8001f8e:	e018      	b.n	8001fc2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f90:	4b32      	ldr	r3, [pc, #200]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001f92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f94:	4b31      	ldr	r3, [pc, #196]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001f96:	2101      	movs	r1, #1
 8001f98:	438a      	bics	r2, r1
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9c:	f7ff f8f2 	bl	8001184 <HAL_GetTick>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fa6:	f7ff f8ed 	bl	8001184 <HAL_GetTick>
 8001faa:	0002      	movs	r2, r0
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e1c6      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb8:	4b28      	ldr	r3, [pc, #160]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d1f1      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2204      	movs	r2, #4
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d100      	bne.n	8001fce <HAL_RCC_OscConfig+0x29e>
 8001fcc:	e0b4      	b.n	8002138 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fce:	201f      	movs	r0, #31
 8001fd0:	183b      	adds	r3, r7, r0
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fd6:	4b21      	ldr	r3, [pc, #132]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001fd8:	69da      	ldr	r2, [r3, #28]
 8001fda:	2380      	movs	r3, #128	; 0x80
 8001fdc:	055b      	lsls	r3, r3, #21
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d110      	bne.n	8002004 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	4b1e      	ldr	r3, [pc, #120]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001fe4:	69da      	ldr	r2, [r3, #28]
 8001fe6:	4b1d      	ldr	r3, [pc, #116]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001fe8:	2180      	movs	r1, #128	; 0x80
 8001fea:	0549      	lsls	r1, r1, #21
 8001fec:	430a      	orrs	r2, r1
 8001fee:	61da      	str	r2, [r3, #28]
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8001ff2:	69da      	ldr	r2, [r3, #28]
 8001ff4:	2380      	movs	r3, #128	; 0x80
 8001ff6:	055b      	lsls	r3, r3, #21
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ffe:	183b      	adds	r3, r7, r0
 8002000:	2201      	movs	r2, #1
 8002002:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002004:	4b18      	ldr	r3, [pc, #96]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4013      	ands	r3, r2
 800200e:	d11a      	bne.n	8002046 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002010:	4b15      	ldr	r3, [pc, #84]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b14      	ldr	r3, [pc, #80]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8002016:	2180      	movs	r1, #128	; 0x80
 8002018:	0049      	lsls	r1, r1, #1
 800201a:	430a      	orrs	r2, r1
 800201c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800201e:	f7ff f8b1 	bl	8001184 <HAL_GetTick>
 8002022:	0003      	movs	r3, r0
 8002024:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002028:	f7ff f8ac 	bl	8001184 <HAL_GetTick>
 800202c:	0002      	movs	r2, r0
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b64      	cmp	r3, #100	; 0x64
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e185      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4013      	ands	r3, r2
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d10e      	bne.n	800206c <HAL_RCC_OscConfig+0x33c>
 800204e:	4b03      	ldr	r3, [pc, #12]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8002050:	6a1a      	ldr	r2, [r3, #32]
 8002052:	4b02      	ldr	r3, [pc, #8]	; (800205c <HAL_RCC_OscConfig+0x32c>)
 8002054:	2101      	movs	r1, #1
 8002056:	430a      	orrs	r2, r1
 8002058:	621a      	str	r2, [r3, #32]
 800205a:	e035      	b.n	80020c8 <HAL_RCC_OscConfig+0x398>
 800205c:	40021000 	.word	0x40021000
 8002060:	fffeffff 	.word	0xfffeffff
 8002064:	fffbffff 	.word	0xfffbffff
 8002068:	40007000 	.word	0x40007000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10c      	bne.n	800208e <HAL_RCC_OscConfig+0x35e>
 8002074:	4bb6      	ldr	r3, [pc, #728]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 8002076:	6a1a      	ldr	r2, [r3, #32]
 8002078:	4bb5      	ldr	r3, [pc, #724]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 800207a:	2101      	movs	r1, #1
 800207c:	438a      	bics	r2, r1
 800207e:	621a      	str	r2, [r3, #32]
 8002080:	4bb3      	ldr	r3, [pc, #716]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 8002082:	6a1a      	ldr	r2, [r3, #32]
 8002084:	4bb2      	ldr	r3, [pc, #712]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 8002086:	2104      	movs	r1, #4
 8002088:	438a      	bics	r2, r1
 800208a:	621a      	str	r2, [r3, #32]
 800208c:	e01c      	b.n	80020c8 <HAL_RCC_OscConfig+0x398>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b05      	cmp	r3, #5
 8002094:	d10c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x380>
 8002096:	4bae      	ldr	r3, [pc, #696]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 8002098:	6a1a      	ldr	r2, [r3, #32]
 800209a:	4bad      	ldr	r3, [pc, #692]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 800209c:	2104      	movs	r1, #4
 800209e:	430a      	orrs	r2, r1
 80020a0:	621a      	str	r2, [r3, #32]
 80020a2:	4bab      	ldr	r3, [pc, #684]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 80020a4:	6a1a      	ldr	r2, [r3, #32]
 80020a6:	4baa      	ldr	r3, [pc, #680]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 80020a8:	2101      	movs	r1, #1
 80020aa:	430a      	orrs	r2, r1
 80020ac:	621a      	str	r2, [r3, #32]
 80020ae:	e00b      	b.n	80020c8 <HAL_RCC_OscConfig+0x398>
 80020b0:	4ba7      	ldr	r3, [pc, #668]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 80020b2:	6a1a      	ldr	r2, [r3, #32]
 80020b4:	4ba6      	ldr	r3, [pc, #664]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 80020b6:	2101      	movs	r1, #1
 80020b8:	438a      	bics	r2, r1
 80020ba:	621a      	str	r2, [r3, #32]
 80020bc:	4ba4      	ldr	r3, [pc, #656]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 80020be:	6a1a      	ldr	r2, [r3, #32]
 80020c0:	4ba3      	ldr	r3, [pc, #652]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 80020c2:	2104      	movs	r1, #4
 80020c4:	438a      	bics	r2, r1
 80020c6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d014      	beq.n	80020fa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d0:	f7ff f858 	bl	8001184 <HAL_GetTick>
 80020d4:	0003      	movs	r3, r0
 80020d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d8:	e009      	b.n	80020ee <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020da:	f7ff f853 	bl	8001184 <HAL_GetTick>
 80020de:	0002      	movs	r2, r0
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	4a9b      	ldr	r2, [pc, #620]	; (8002354 <HAL_RCC_OscConfig+0x624>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e12b      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ee:	4b98      	ldr	r3, [pc, #608]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	2202      	movs	r2, #2
 80020f4:	4013      	ands	r3, r2
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x3aa>
 80020f8:	e013      	b.n	8002122 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fa:	f7ff f843 	bl	8001184 <HAL_GetTick>
 80020fe:	0003      	movs	r3, r0
 8002100:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002102:	e009      	b.n	8002118 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002104:	f7ff f83e 	bl	8001184 <HAL_GetTick>
 8002108:	0002      	movs	r2, r0
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	4a91      	ldr	r2, [pc, #580]	; (8002354 <HAL_RCC_OscConfig+0x624>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e116      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002118:	4b8d      	ldr	r3, [pc, #564]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	2202      	movs	r2, #2
 800211e:	4013      	ands	r3, r2
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002122:	231f      	movs	r3, #31
 8002124:	18fb      	adds	r3, r7, r3
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d105      	bne.n	8002138 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800212c:	4b88      	ldr	r3, [pc, #544]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 800212e:	69da      	ldr	r2, [r3, #28]
 8002130:	4b87      	ldr	r3, [pc, #540]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 8002132:	4989      	ldr	r1, [pc, #548]	; (8002358 <HAL_RCC_OscConfig+0x628>)
 8002134:	400a      	ands	r2, r1
 8002136:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2210      	movs	r2, #16
 800213e:	4013      	ands	r3, r2
 8002140:	d063      	beq.n	800220a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d12a      	bne.n	80021a0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800214a:	4b81      	ldr	r3, [pc, #516]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 800214c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800214e:	4b80      	ldr	r3, [pc, #512]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 8002150:	2104      	movs	r1, #4
 8002152:	430a      	orrs	r2, r1
 8002154:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002156:	4b7e      	ldr	r3, [pc, #504]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 8002158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800215a:	4b7d      	ldr	r3, [pc, #500]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 800215c:	2101      	movs	r1, #1
 800215e:	430a      	orrs	r2, r1
 8002160:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002162:	f7ff f80f 	bl	8001184 <HAL_GetTick>
 8002166:	0003      	movs	r3, r0
 8002168:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800216c:	f7ff f80a 	bl	8001184 <HAL_GetTick>
 8002170:	0002      	movs	r2, r0
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e0e3      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800217e:	4b74      	ldr	r3, [pc, #464]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 8002180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002182:	2202      	movs	r2, #2
 8002184:	4013      	ands	r3, r2
 8002186:	d0f1      	beq.n	800216c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002188:	4b71      	ldr	r3, [pc, #452]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 800218a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800218c:	22f8      	movs	r2, #248	; 0xf8
 800218e:	4393      	bics	r3, r2
 8002190:	0019      	movs	r1, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	00da      	lsls	r2, r3, #3
 8002198:	4b6d      	ldr	r3, [pc, #436]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 800219a:	430a      	orrs	r2, r1
 800219c:	635a      	str	r2, [r3, #52]	; 0x34
 800219e:	e034      	b.n	800220a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	3305      	adds	r3, #5
 80021a6:	d111      	bne.n	80021cc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80021a8:	4b69      	ldr	r3, [pc, #420]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 80021aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ac:	4b68      	ldr	r3, [pc, #416]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 80021ae:	2104      	movs	r1, #4
 80021b0:	438a      	bics	r2, r1
 80021b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80021b4:	4b66      	ldr	r3, [pc, #408]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 80021b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b8:	22f8      	movs	r2, #248	; 0xf8
 80021ba:	4393      	bics	r3, r2
 80021bc:	0019      	movs	r1, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	00da      	lsls	r2, r3, #3
 80021c4:	4b62      	ldr	r3, [pc, #392]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 80021c6:	430a      	orrs	r2, r1
 80021c8:	635a      	str	r2, [r3, #52]	; 0x34
 80021ca:	e01e      	b.n	800220a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80021cc:	4b60      	ldr	r3, [pc, #384]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 80021ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021d0:	4b5f      	ldr	r3, [pc, #380]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 80021d2:	2104      	movs	r1, #4
 80021d4:	430a      	orrs	r2, r1
 80021d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80021d8:	4b5d      	ldr	r3, [pc, #372]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 80021da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021dc:	4b5c      	ldr	r3, [pc, #368]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 80021de:	2101      	movs	r1, #1
 80021e0:	438a      	bics	r2, r1
 80021e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e4:	f7fe ffce 	bl	8001184 <HAL_GetTick>
 80021e8:	0003      	movs	r3, r0
 80021ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80021ee:	f7fe ffc9 	bl	8001184 <HAL_GetTick>
 80021f2:	0002      	movs	r2, r0
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e0a2      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002200:	4b53      	ldr	r3, [pc, #332]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 8002202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002204:	2202      	movs	r2, #2
 8002206:	4013      	ands	r3, r2
 8002208:	d1f1      	bne.n	80021ee <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d100      	bne.n	8002214 <HAL_RCC_OscConfig+0x4e4>
 8002212:	e097      	b.n	8002344 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002214:	4b4e      	ldr	r3, [pc, #312]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	220c      	movs	r2, #12
 800221a:	4013      	ands	r3, r2
 800221c:	2b08      	cmp	r3, #8
 800221e:	d100      	bne.n	8002222 <HAL_RCC_OscConfig+0x4f2>
 8002220:	e06b      	b.n	80022fa <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d14c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222a:	4b49      	ldr	r3, [pc, #292]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	4b48      	ldr	r3, [pc, #288]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 8002230:	494a      	ldr	r1, [pc, #296]	; (800235c <HAL_RCC_OscConfig+0x62c>)
 8002232:	400a      	ands	r2, r1
 8002234:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7fe ffa5 	bl	8001184 <HAL_GetTick>
 800223a:	0003      	movs	r3, r0
 800223c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002240:	f7fe ffa0 	bl	8001184 <HAL_GetTick>
 8002244:	0002      	movs	r2, r0
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e079      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002252:	4b3f      	ldr	r3, [pc, #252]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	049b      	lsls	r3, r3, #18
 800225a:	4013      	ands	r3, r2
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800225e:	4b3c      	ldr	r3, [pc, #240]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 8002260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002262:	220f      	movs	r2, #15
 8002264:	4393      	bics	r3, r2
 8002266:	0019      	movs	r1, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800226c:	4b38      	ldr	r3, [pc, #224]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 800226e:	430a      	orrs	r2, r1
 8002270:	62da      	str	r2, [r3, #44]	; 0x2c
 8002272:	4b37      	ldr	r3, [pc, #220]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	4a3a      	ldr	r2, [pc, #232]	; (8002360 <HAL_RCC_OscConfig+0x630>)
 8002278:	4013      	ands	r3, r2
 800227a:	0019      	movs	r1, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	431a      	orrs	r2, r3
 8002286:	4b32      	ldr	r3, [pc, #200]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 8002288:	430a      	orrs	r2, r1
 800228a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800228c:	4b30      	ldr	r3, [pc, #192]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b2f      	ldr	r3, [pc, #188]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 8002292:	2180      	movs	r1, #128	; 0x80
 8002294:	0449      	lsls	r1, r1, #17
 8002296:	430a      	orrs	r2, r1
 8002298:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229a:	f7fe ff73 	bl	8001184 <HAL_GetTick>
 800229e:	0003      	movs	r3, r0
 80022a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a4:	f7fe ff6e 	bl	8001184 <HAL_GetTick>
 80022a8:	0002      	movs	r2, r0
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e047      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b6:	4b26      	ldr	r3, [pc, #152]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	2380      	movs	r3, #128	; 0x80
 80022bc:	049b      	lsls	r3, r3, #18
 80022be:	4013      	ands	r3, r2
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x574>
 80022c2:	e03f      	b.n	8002344 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c4:	4b22      	ldr	r3, [pc, #136]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4b21      	ldr	r3, [pc, #132]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 80022ca:	4924      	ldr	r1, [pc, #144]	; (800235c <HAL_RCC_OscConfig+0x62c>)
 80022cc:	400a      	ands	r2, r1
 80022ce:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7fe ff58 	bl	8001184 <HAL_GetTick>
 80022d4:	0003      	movs	r3, r0
 80022d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022da:	f7fe ff53 	bl	8001184 <HAL_GetTick>
 80022de:	0002      	movs	r2, r0
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e02c      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ec:	4b18      	ldr	r3, [pc, #96]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	049b      	lsls	r3, r3, #18
 80022f4:	4013      	ands	r3, r2
 80022f6:	d1f0      	bne.n	80022da <HAL_RCC_OscConfig+0x5aa>
 80022f8:	e024      	b.n	8002344 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e01f      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002306:	4b12      	ldr	r3, [pc, #72]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800230c:	4b10      	ldr	r3, [pc, #64]	; (8002350 <HAL_RCC_OscConfig+0x620>)
 800230e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002310:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	2380      	movs	r3, #128	; 0x80
 8002316:	025b      	lsls	r3, r3, #9
 8002318:	401a      	ands	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	429a      	cmp	r2, r3
 8002320:	d10e      	bne.n	8002340 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	220f      	movs	r2, #15
 8002326:	401a      	ands	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800232c:	429a      	cmp	r2, r3
 800232e:	d107      	bne.n	8002340 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	23f0      	movs	r3, #240	; 0xf0
 8002334:	039b      	lsls	r3, r3, #14
 8002336:	401a      	ands	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	0018      	movs	r0, r3
 8002348:	46bd      	mov	sp, r7
 800234a:	b008      	add	sp, #32
 800234c:	bd80      	pop	{r7, pc}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	40021000 	.word	0x40021000
 8002354:	00001388 	.word	0x00001388
 8002358:	efffffff 	.word	0xefffffff
 800235c:	feffffff 	.word	0xfeffffff
 8002360:	ffc2ffff 	.word	0xffc2ffff

08002364 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0b3      	b.n	80024e0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002378:	4b5b      	ldr	r3, [pc, #364]	; (80024e8 <HAL_RCC_ClockConfig+0x184>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2201      	movs	r2, #1
 800237e:	4013      	ands	r3, r2
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d911      	bls.n	80023aa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b58      	ldr	r3, [pc, #352]	; (80024e8 <HAL_RCC_ClockConfig+0x184>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2201      	movs	r2, #1
 800238c:	4393      	bics	r3, r2
 800238e:	0019      	movs	r1, r3
 8002390:	4b55      	ldr	r3, [pc, #340]	; (80024e8 <HAL_RCC_ClockConfig+0x184>)
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002398:	4b53      	ldr	r3, [pc, #332]	; (80024e8 <HAL_RCC_ClockConfig+0x184>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2201      	movs	r2, #1
 800239e:	4013      	ands	r3, r2
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d001      	beq.n	80023aa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e09a      	b.n	80024e0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2202      	movs	r2, #2
 80023b0:	4013      	ands	r3, r2
 80023b2:	d015      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2204      	movs	r2, #4
 80023ba:	4013      	ands	r3, r2
 80023bc:	d006      	beq.n	80023cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80023be:	4b4b      	ldr	r3, [pc, #300]	; (80024ec <HAL_RCC_ClockConfig+0x188>)
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	4b4a      	ldr	r3, [pc, #296]	; (80024ec <HAL_RCC_ClockConfig+0x188>)
 80023c4:	21e0      	movs	r1, #224	; 0xe0
 80023c6:	00c9      	lsls	r1, r1, #3
 80023c8:	430a      	orrs	r2, r1
 80023ca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023cc:	4b47      	ldr	r3, [pc, #284]	; (80024ec <HAL_RCC_ClockConfig+0x188>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	22f0      	movs	r2, #240	; 0xf0
 80023d2:	4393      	bics	r3, r2
 80023d4:	0019      	movs	r1, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	4b44      	ldr	r3, [pc, #272]	; (80024ec <HAL_RCC_ClockConfig+0x188>)
 80023dc:	430a      	orrs	r2, r1
 80023de:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2201      	movs	r2, #1
 80023e6:	4013      	ands	r3, r2
 80023e8:	d040      	beq.n	800246c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f2:	4b3e      	ldr	r3, [pc, #248]	; (80024ec <HAL_RCC_ClockConfig+0x188>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	029b      	lsls	r3, r3, #10
 80023fa:	4013      	ands	r3, r2
 80023fc:	d114      	bne.n	8002428 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e06e      	b.n	80024e0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d107      	bne.n	800241a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240a:	4b38      	ldr	r3, [pc, #224]	; (80024ec <HAL_RCC_ClockConfig+0x188>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	049b      	lsls	r3, r3, #18
 8002412:	4013      	ands	r3, r2
 8002414:	d108      	bne.n	8002428 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e062      	b.n	80024e0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241a:	4b34      	ldr	r3, [pc, #208]	; (80024ec <HAL_RCC_ClockConfig+0x188>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2202      	movs	r2, #2
 8002420:	4013      	ands	r3, r2
 8002422:	d101      	bne.n	8002428 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e05b      	b.n	80024e0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002428:	4b30      	ldr	r3, [pc, #192]	; (80024ec <HAL_RCC_ClockConfig+0x188>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2203      	movs	r2, #3
 800242e:	4393      	bics	r3, r2
 8002430:	0019      	movs	r1, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	4b2d      	ldr	r3, [pc, #180]	; (80024ec <HAL_RCC_ClockConfig+0x188>)
 8002438:	430a      	orrs	r2, r1
 800243a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800243c:	f7fe fea2 	bl	8001184 <HAL_GetTick>
 8002440:	0003      	movs	r3, r0
 8002442:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002444:	e009      	b.n	800245a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002446:	f7fe fe9d 	bl	8001184 <HAL_GetTick>
 800244a:	0002      	movs	r2, r0
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	4a27      	ldr	r2, [pc, #156]	; (80024f0 <HAL_RCC_ClockConfig+0x18c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d901      	bls.n	800245a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e042      	b.n	80024e0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245a:	4b24      	ldr	r3, [pc, #144]	; (80024ec <HAL_RCC_ClockConfig+0x188>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	220c      	movs	r2, #12
 8002460:	401a      	ands	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	429a      	cmp	r2, r3
 800246a:	d1ec      	bne.n	8002446 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800246c:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <HAL_RCC_ClockConfig+0x184>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2201      	movs	r2, #1
 8002472:	4013      	ands	r3, r2
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d211      	bcs.n	800249e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247a:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <HAL_RCC_ClockConfig+0x184>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2201      	movs	r2, #1
 8002480:	4393      	bics	r3, r2
 8002482:	0019      	movs	r1, r3
 8002484:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <HAL_RCC_ClockConfig+0x184>)
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248c:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <HAL_RCC_ClockConfig+0x184>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2201      	movs	r2, #1
 8002492:	4013      	ands	r3, r2
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d001      	beq.n	800249e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e020      	b.n	80024e0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2204      	movs	r2, #4
 80024a4:	4013      	ands	r3, r2
 80024a6:	d009      	beq.n	80024bc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024a8:	4b10      	ldr	r3, [pc, #64]	; (80024ec <HAL_RCC_ClockConfig+0x188>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4a11      	ldr	r2, [pc, #68]	; (80024f4 <HAL_RCC_ClockConfig+0x190>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	0019      	movs	r1, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <HAL_RCC_ClockConfig+0x188>)
 80024b8:	430a      	orrs	r2, r1
 80024ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024bc:	f000 f820 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80024c0:	0001      	movs	r1, r0
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <HAL_RCC_ClockConfig+0x188>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	091b      	lsrs	r3, r3, #4
 80024c8:	220f      	movs	r2, #15
 80024ca:	4013      	ands	r3, r2
 80024cc:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <HAL_RCC_ClockConfig+0x194>)
 80024ce:	5cd3      	ldrb	r3, [r2, r3]
 80024d0:	000a      	movs	r2, r1
 80024d2:	40da      	lsrs	r2, r3
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_RCC_ClockConfig+0x198>)
 80024d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80024d8:	2000      	movs	r0, #0
 80024da:	f7fe fe0d 	bl	80010f8 <HAL_InitTick>
  
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	0018      	movs	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b004      	add	sp, #16
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40022000 	.word	0x40022000
 80024ec:	40021000 	.word	0x40021000
 80024f0:	00001388 	.word	0x00001388
 80024f4:	fffff8ff 	.word	0xfffff8ff
 80024f8:	08005374 	.word	0x08005374
 80024fc:	20000008 	.word	0x20000008

08002500 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	2300      	movs	r3, #0
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	2300      	movs	r3, #0
 8002514:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <HAL_RCC_GetSysClockFreq+0x9c>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	220c      	movs	r2, #12
 8002524:	4013      	ands	r3, r2
 8002526:	2b04      	cmp	r3, #4
 8002528:	d002      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0x30>
 800252a:	2b08      	cmp	r3, #8
 800252c:	d003      	beq.n	8002536 <HAL_RCC_GetSysClockFreq+0x36>
 800252e:	e02c      	b.n	800258a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002530:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002532:	613b      	str	r3, [r7, #16]
      break;
 8002534:	e02c      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	0c9b      	lsrs	r3, r3, #18
 800253a:	220f      	movs	r2, #15
 800253c:	4013      	ands	r3, r2
 800253e:	4a19      	ldr	r2, [pc, #100]	; (80025a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002540:	5cd3      	ldrb	r3, [r2, r3]
 8002542:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002544:	4b15      	ldr	r3, [pc, #84]	; (800259c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002548:	220f      	movs	r2, #15
 800254a:	4013      	ands	r3, r2
 800254c:	4a16      	ldr	r2, [pc, #88]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xa8>)
 800254e:	5cd3      	ldrb	r3, [r2, r3]
 8002550:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	2380      	movs	r3, #128	; 0x80
 8002556:	025b      	lsls	r3, r3, #9
 8002558:	4013      	ands	r3, r2
 800255a:	d009      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800255c:	68b9      	ldr	r1, [r7, #8]
 800255e:	4810      	ldr	r0, [pc, #64]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002560:	f7fd fdd2 	bl	8000108 <__udivsi3>
 8002564:	0003      	movs	r3, r0
 8002566:	001a      	movs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4353      	muls	r3, r2
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	e009      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	000a      	movs	r2, r1
 8002574:	0152      	lsls	r2, r2, #5
 8002576:	1a52      	subs	r2, r2, r1
 8002578:	0193      	lsls	r3, r2, #6
 800257a:	1a9b      	subs	r3, r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	185b      	adds	r3, r3, r1
 8002580:	021b      	lsls	r3, r3, #8
 8002582:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	613b      	str	r3, [r7, #16]
      break;
 8002588:	e002      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800258a:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800258c:	613b      	str	r3, [r7, #16]
      break;
 800258e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002590:	693b      	ldr	r3, [r7, #16]
}
 8002592:	0018      	movs	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	b006      	add	sp, #24
 8002598:	bd80      	pop	{r7, pc}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	40021000 	.word	0x40021000
 80025a0:	007a1200 	.word	0x007a1200
 80025a4:	0800538c 	.word	0x0800538c
 80025a8:	0800539c 	.word	0x0800539c

080025ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b0:	4b02      	ldr	r3, [pc, #8]	; (80025bc <HAL_RCC_GetHCLKFreq+0x10>)
 80025b2:	681b      	ldr	r3, [r3, #0]
}
 80025b4:	0018      	movs	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	20000008 	.word	0x20000008

080025c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80025c4:	f7ff fff2 	bl	80025ac <HAL_RCC_GetHCLKFreq>
 80025c8:	0001      	movs	r1, r0
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	0a1b      	lsrs	r3, r3, #8
 80025d0:	2207      	movs	r2, #7
 80025d2:	4013      	ands	r3, r2
 80025d4:	4a04      	ldr	r2, [pc, #16]	; (80025e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025d6:	5cd3      	ldrb	r3, [r2, r3]
 80025d8:	40d9      	lsrs	r1, r3
 80025da:	000b      	movs	r3, r1
}    
 80025dc:	0018      	movs	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	40021000 	.word	0x40021000
 80025e8:	08005384 	.word	0x08005384

080025ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	025b      	lsls	r3, r3, #9
 8002604:	4013      	ands	r3, r2
 8002606:	d100      	bne.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002608:	e08e      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800260a:	2017      	movs	r0, #23
 800260c:	183b      	adds	r3, r7, r0
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002612:	4b5f      	ldr	r3, [pc, #380]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002614:	69da      	ldr	r2, [r3, #28]
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	055b      	lsls	r3, r3, #21
 800261a:	4013      	ands	r3, r2
 800261c:	d110      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800261e:	4b5c      	ldr	r3, [pc, #368]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002620:	69da      	ldr	r2, [r3, #28]
 8002622:	4b5b      	ldr	r3, [pc, #364]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002624:	2180      	movs	r1, #128	; 0x80
 8002626:	0549      	lsls	r1, r1, #21
 8002628:	430a      	orrs	r2, r1
 800262a:	61da      	str	r2, [r3, #28]
 800262c:	4b58      	ldr	r3, [pc, #352]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800262e:	69da      	ldr	r2, [r3, #28]
 8002630:	2380      	movs	r3, #128	; 0x80
 8002632:	055b      	lsls	r3, r3, #21
 8002634:	4013      	ands	r3, r2
 8002636:	60bb      	str	r3, [r7, #8]
 8002638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800263a:	183b      	adds	r3, r7, r0
 800263c:	2201      	movs	r2, #1
 800263e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002640:	4b54      	ldr	r3, [pc, #336]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	4013      	ands	r3, r2
 800264a:	d11a      	bne.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800264c:	4b51      	ldr	r3, [pc, #324]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b50      	ldr	r3, [pc, #320]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002652:	2180      	movs	r1, #128	; 0x80
 8002654:	0049      	lsls	r1, r1, #1
 8002656:	430a      	orrs	r2, r1
 8002658:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800265a:	f7fe fd93 	bl	8001184 <HAL_GetTick>
 800265e:	0003      	movs	r3, r0
 8002660:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002662:	e008      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002664:	f7fe fd8e 	bl	8001184 <HAL_GetTick>
 8002668:	0002      	movs	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	; 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e087      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002676:	4b47      	ldr	r3, [pc, #284]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	4013      	ands	r3, r2
 8002680:	d0f0      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002682:	4b43      	ldr	r3, [pc, #268]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002684:	6a1a      	ldr	r2, [r3, #32]
 8002686:	23c0      	movs	r3, #192	; 0xc0
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4013      	ands	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d034      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	23c0      	movs	r3, #192	; 0xc0
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4013      	ands	r3, r2
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d02c      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026a4:	4b3a      	ldr	r3, [pc, #232]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	4a3b      	ldr	r2, [pc, #236]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026ae:	4b38      	ldr	r3, [pc, #224]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026b0:	6a1a      	ldr	r2, [r3, #32]
 80026b2:	4b37      	ldr	r3, [pc, #220]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026b4:	2180      	movs	r1, #128	; 0x80
 80026b6:	0249      	lsls	r1, r1, #9
 80026b8:	430a      	orrs	r2, r1
 80026ba:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026bc:	4b34      	ldr	r3, [pc, #208]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026be:	6a1a      	ldr	r2, [r3, #32]
 80026c0:	4b33      	ldr	r3, [pc, #204]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026c2:	4936      	ldr	r1, [pc, #216]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80026c4:	400a      	ands	r2, r1
 80026c6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026c8:	4b31      	ldr	r3, [pc, #196]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	4013      	ands	r3, r2
 80026d4:	d013      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d6:	f7fe fd55 	bl	8001184 <HAL_GetTick>
 80026da:	0003      	movs	r3, r0
 80026dc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026de:	e009      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e0:	f7fe fd50 	bl	8001184 <HAL_GetTick>
 80026e4:	0002      	movs	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	4a2d      	ldr	r2, [pc, #180]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e048      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f4:	4b26      	ldr	r3, [pc, #152]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	2202      	movs	r2, #2
 80026fa:	4013      	ands	r3, r2
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026fe:	4b24      	ldr	r3, [pc, #144]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	4a25      	ldr	r2, [pc, #148]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002704:	4013      	ands	r3, r2
 8002706:	0019      	movs	r1, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	4b20      	ldr	r3, [pc, #128]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800270e:	430a      	orrs	r2, r1
 8002710:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002712:	2317      	movs	r3, #23
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d105      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800271c:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800271e:	69da      	ldr	r2, [r3, #28]
 8002720:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002722:	4920      	ldr	r1, [pc, #128]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002724:	400a      	ands	r2, r1
 8002726:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2201      	movs	r2, #1
 800272e:	4013      	ands	r3, r2
 8002730:	d009      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002732:	4b17      	ldr	r3, [pc, #92]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	2203      	movs	r2, #3
 8002738:	4393      	bics	r3, r2
 800273a:	0019      	movs	r1, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	4b13      	ldr	r3, [pc, #76]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002742:	430a      	orrs	r2, r1
 8002744:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2220      	movs	r2, #32
 800274c:	4013      	ands	r3, r2
 800274e:	d009      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002750:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002754:	2210      	movs	r2, #16
 8002756:	4393      	bics	r3, r2
 8002758:	0019      	movs	r1, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002760:	430a      	orrs	r2, r1
 8002762:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	2380      	movs	r3, #128	; 0x80
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4013      	ands	r3, r2
 800276e:	d009      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002770:	4b07      	ldr	r3, [pc, #28]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002774:	2240      	movs	r2, #64	; 0x40
 8002776:	4393      	bics	r3, r2
 8002778:	0019      	movs	r1, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	4b04      	ldr	r3, [pc, #16]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002780:	430a      	orrs	r2, r1
 8002782:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	0018      	movs	r0, r3
 8002788:	46bd      	mov	sp, r7
 800278a:	b006      	add	sp, #24
 800278c:	bd80      	pop	{r7, pc}
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	40021000 	.word	0x40021000
 8002794:	40007000 	.word	0x40007000
 8002798:	fffffcff 	.word	0xfffffcff
 800279c:	fffeffff 	.word	0xfffeffff
 80027a0:	00001388 	.word	0x00001388
 80027a4:	efffffff 	.word	0xefffffff

080027a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e042      	b.n	8002840 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	223d      	movs	r2, #61	; 0x3d
 80027be:	5c9b      	ldrb	r3, [r3, r2]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d107      	bne.n	80027d6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	223c      	movs	r2, #60	; 0x3c
 80027ca:	2100      	movs	r1, #0
 80027cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	0018      	movs	r0, r3
 80027d2:	f7fe fa0d 	bl	8000bf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	223d      	movs	r2, #61	; 0x3d
 80027da:	2102      	movs	r1, #2
 80027dc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3304      	adds	r3, #4
 80027e6:	0019      	movs	r1, r3
 80027e8:	0010      	movs	r0, r2
 80027ea:	f000 fb83 	bl	8002ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2246      	movs	r2, #70	; 0x46
 80027f2:	2101      	movs	r1, #1
 80027f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	223e      	movs	r2, #62	; 0x3e
 80027fa:	2101      	movs	r1, #1
 80027fc:	5499      	strb	r1, [r3, r2]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	223f      	movs	r2, #63	; 0x3f
 8002802:	2101      	movs	r1, #1
 8002804:	5499      	strb	r1, [r3, r2]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2240      	movs	r2, #64	; 0x40
 800280a:	2101      	movs	r1, #1
 800280c:	5499      	strb	r1, [r3, r2]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2241      	movs	r2, #65	; 0x41
 8002812:	2101      	movs	r1, #1
 8002814:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2242      	movs	r2, #66	; 0x42
 800281a:	2101      	movs	r1, #1
 800281c:	5499      	strb	r1, [r3, r2]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2243      	movs	r2, #67	; 0x43
 8002822:	2101      	movs	r1, #1
 8002824:	5499      	strb	r1, [r3, r2]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2244      	movs	r2, #68	; 0x44
 800282a:	2101      	movs	r1, #1
 800282c:	5499      	strb	r1, [r3, r2]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2245      	movs	r2, #69	; 0x45
 8002832:	2101      	movs	r1, #1
 8002834:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	223d      	movs	r2, #61	; 0x3d
 800283a:	2101      	movs	r1, #1
 800283c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	b002      	add	sp, #8
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	223d      	movs	r2, #61	; 0x3d
 8002854:	5c9b      	ldrb	r3, [r3, r2]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d001      	beq.n	8002860 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e033      	b.n	80028c8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	223d      	movs	r2, #61	; 0x3d
 8002864:	2102      	movs	r1, #2
 8002866:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a18      	ldr	r2, [pc, #96]	; (80028d0 <HAL_TIM_Base_Start+0x88>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d00f      	beq.n	8002892 <HAL_TIM_Base_Start+0x4a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	05db      	lsls	r3, r3, #23
 800287a:	429a      	cmp	r2, r3
 800287c:	d009      	beq.n	8002892 <HAL_TIM_Base_Start+0x4a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a14      	ldr	r2, [pc, #80]	; (80028d4 <HAL_TIM_Base_Start+0x8c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d004      	beq.n	8002892 <HAL_TIM_Base_Start+0x4a>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a12      	ldr	r2, [pc, #72]	; (80028d8 <HAL_TIM_Base_Start+0x90>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d111      	bne.n	80028b6 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2207      	movs	r2, #7
 800289a:	4013      	ands	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2b06      	cmp	r3, #6
 80028a2:	d010      	beq.n	80028c6 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2101      	movs	r1, #1
 80028b0:	430a      	orrs	r2, r1
 80028b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b4:	e007      	b.n	80028c6 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2101      	movs	r1, #1
 80028c2:	430a      	orrs	r2, r1
 80028c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	0018      	movs	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b004      	add	sp, #16
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40012c00 	.word	0x40012c00
 80028d4:	40000400 	.word	0x40000400
 80028d8:	40014000 	.word	0x40014000

080028dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	223d      	movs	r2, #61	; 0x3d
 80028e8:	5c9b      	ldrb	r3, [r3, r2]
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d001      	beq.n	80028f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e03b      	b.n	800296c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	223d      	movs	r2, #61	; 0x3d
 80028f8:	2102      	movs	r1, #2
 80028fa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2101      	movs	r1, #1
 8002908:	430a      	orrs	r2, r1
 800290a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a18      	ldr	r2, [pc, #96]	; (8002974 <HAL_TIM_Base_Start_IT+0x98>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d00f      	beq.n	8002936 <HAL_TIM_Base_Start_IT+0x5a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	05db      	lsls	r3, r3, #23
 800291e:	429a      	cmp	r2, r3
 8002920:	d009      	beq.n	8002936 <HAL_TIM_Base_Start_IT+0x5a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a14      	ldr	r2, [pc, #80]	; (8002978 <HAL_TIM_Base_Start_IT+0x9c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d004      	beq.n	8002936 <HAL_TIM_Base_Start_IT+0x5a>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a12      	ldr	r2, [pc, #72]	; (800297c <HAL_TIM_Base_Start_IT+0xa0>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d111      	bne.n	800295a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	2207      	movs	r2, #7
 800293e:	4013      	ands	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2b06      	cmp	r3, #6
 8002946:	d010      	beq.n	800296a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2101      	movs	r1, #1
 8002954:	430a      	orrs	r2, r1
 8002956:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002958:	e007      	b.n	800296a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2101      	movs	r1, #1
 8002966:	430a      	orrs	r2, r1
 8002968:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	0018      	movs	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	b004      	add	sp, #16
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40012c00 	.word	0x40012c00
 8002978:	40000400 	.word	0x40000400
 800297c:	40014000 	.word	0x40014000

08002980 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e042      	b.n	8002a18 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	223d      	movs	r2, #61	; 0x3d
 8002996:	5c9b      	ldrb	r3, [r3, r2]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d107      	bne.n	80029ae <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	223c      	movs	r2, #60	; 0x3c
 80029a2:	2100      	movs	r1, #0
 80029a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	0018      	movs	r0, r3
 80029aa:	f000 f839 	bl	8002a20 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	223d      	movs	r2, #61	; 0x3d
 80029b2:	2102      	movs	r1, #2
 80029b4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3304      	adds	r3, #4
 80029be:	0019      	movs	r1, r3
 80029c0:	0010      	movs	r0, r2
 80029c2:	f000 fa97 	bl	8002ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2246      	movs	r2, #70	; 0x46
 80029ca:	2101      	movs	r1, #1
 80029cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	223e      	movs	r2, #62	; 0x3e
 80029d2:	2101      	movs	r1, #1
 80029d4:	5499      	strb	r1, [r3, r2]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	223f      	movs	r2, #63	; 0x3f
 80029da:	2101      	movs	r1, #1
 80029dc:	5499      	strb	r1, [r3, r2]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2240      	movs	r2, #64	; 0x40
 80029e2:	2101      	movs	r1, #1
 80029e4:	5499      	strb	r1, [r3, r2]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2241      	movs	r2, #65	; 0x41
 80029ea:	2101      	movs	r1, #1
 80029ec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2242      	movs	r2, #66	; 0x42
 80029f2:	2101      	movs	r1, #1
 80029f4:	5499      	strb	r1, [r3, r2]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2243      	movs	r2, #67	; 0x43
 80029fa:	2101      	movs	r1, #1
 80029fc:	5499      	strb	r1, [r3, r2]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2244      	movs	r2, #68	; 0x44
 8002a02:	2101      	movs	r1, #1
 8002a04:	5499      	strb	r1, [r3, r2]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2245      	movs	r2, #69	; 0x45
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	223d      	movs	r2, #61	; 0x3d
 8002a12:	2101      	movs	r1, #1
 8002a14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	0018      	movs	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	b002      	add	sp, #8
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002a28:	46c0      	nop			; (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b002      	add	sp, #8
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d124      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d11d      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2203      	movs	r2, #3
 8002a5a:	4252      	negs	r2, r2
 8002a5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d004      	beq.n	8002a7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	0018      	movs	r0, r3
 8002a74:	f000 fa26 	bl	8002ec4 <HAL_TIM_IC_CaptureCallback>
 8002a78:	e007      	b.n	8002a8a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f000 fa19 	bl	8002eb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	0018      	movs	r0, r3
 8002a86:	f000 fa25 	bl	8002ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	2204      	movs	r2, #4
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d125      	bne.n	8002aea <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	2204      	movs	r2, #4
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d11e      	bne.n	8002aea <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2205      	movs	r2, #5
 8002ab2:	4252      	negs	r2, r2
 8002ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2202      	movs	r2, #2
 8002aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	23c0      	movs	r3, #192	; 0xc0
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d004      	beq.n	8002ad4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	0018      	movs	r0, r3
 8002ace:	f000 f9f9 	bl	8002ec4 <HAL_TIM_IC_CaptureCallback>
 8002ad2:	e007      	b.n	8002ae4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f000 f9ec 	bl	8002eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f000 f9f8 	bl	8002ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	2208      	movs	r2, #8
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d124      	bne.n	8002b42 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	2208      	movs	r2, #8
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d11d      	bne.n	8002b42 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2209      	movs	r2, #9
 8002b0c:	4252      	negs	r2, r2
 8002b0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2204      	movs	r2, #4
 8002b14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d004      	beq.n	8002b2c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	0018      	movs	r0, r3
 8002b26:	f000 f9cd 	bl	8002ec4 <HAL_TIM_IC_CaptureCallback>
 8002b2a:	e007      	b.n	8002b3c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f000 f9c0 	bl	8002eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	0018      	movs	r0, r3
 8002b38:	f000 f9cc 	bl	8002ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	2210      	movs	r2, #16
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b10      	cmp	r3, #16
 8002b4e:	d125      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	2210      	movs	r2, #16
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b10      	cmp	r3, #16
 8002b5c:	d11e      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2211      	movs	r2, #17
 8002b64:	4252      	negs	r2, r2
 8002b66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2208      	movs	r2, #8
 8002b6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	69da      	ldr	r2, [r3, #28]
 8002b74:	23c0      	movs	r3, #192	; 0xc0
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d004      	beq.n	8002b86 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f000 f9a0 	bl	8002ec4 <HAL_TIM_IC_CaptureCallback>
 8002b84:	e007      	b.n	8002b96 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f000 f993 	bl	8002eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	0018      	movs	r0, r3
 8002b92:	f000 f99f 	bl	8002ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d10f      	bne.n	8002bca <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d108      	bne.n	8002bca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	4252      	negs	r2, r2
 8002bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f7fd ffcd 	bl	8000b64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	2280      	movs	r2, #128	; 0x80
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b80      	cmp	r3, #128	; 0x80
 8002bd6:	d10f      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	2280      	movs	r2, #128	; 0x80
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b80      	cmp	r3, #128	; 0x80
 8002be4:	d108      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2281      	movs	r2, #129	; 0x81
 8002bec:	4252      	negs	r2, r2
 8002bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f000 fcfa 	bl	80035ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	2240      	movs	r2, #64	; 0x40
 8002c00:	4013      	ands	r3, r2
 8002c02:	2b40      	cmp	r3, #64	; 0x40
 8002c04:	d10f      	bne.n	8002c26 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	2240      	movs	r2, #64	; 0x40
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2b40      	cmp	r3, #64	; 0x40
 8002c12:	d108      	bne.n	8002c26 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2241      	movs	r2, #65	; 0x41
 8002c1a:	4252      	negs	r2, r2
 8002c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	0018      	movs	r0, r3
 8002c22:	f000 f95f 	bl	8002ee4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b20      	cmp	r3, #32
 8002c32:	d10f      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b20      	cmp	r3, #32
 8002c40:	d108      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2221      	movs	r2, #33	; 0x21
 8002c48:	4252      	negs	r2, r2
 8002c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f000 fcc4 	bl	80035dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c54:	46c0      	nop			; (mov r8, r8)
 8002c56:	46bd      	mov	sp, r7
 8002c58:	b002      	add	sp, #8
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c68:	2317      	movs	r3, #23
 8002c6a:	18fb      	adds	r3, r7, r3
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	223c      	movs	r2, #60	; 0x3c
 8002c74:	5c9b      	ldrb	r3, [r3, r2]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_TIM_OC_ConfigChannel+0x22>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e042      	b.n	8002d04 <HAL_TIM_OC_ConfigChannel+0xa8>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	223c      	movs	r2, #60	; 0x3c
 8002c82:	2101      	movs	r1, #1
 8002c84:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b0c      	cmp	r3, #12
 8002c8a:	d027      	beq.n	8002cdc <HAL_TIM_OC_ConfigChannel+0x80>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b0c      	cmp	r3, #12
 8002c90:	d82c      	bhi.n	8002cec <HAL_TIM_OC_ConfigChannel+0x90>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d019      	beq.n	8002ccc <HAL_TIM_OC_ConfigChannel+0x70>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d826      	bhi.n	8002cec <HAL_TIM_OC_ConfigChannel+0x90>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_TIM_OC_ConfigChannel+0x50>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d008      	beq.n	8002cbc <HAL_TIM_OC_ConfigChannel+0x60>
 8002caa:	e01f      	b.n	8002cec <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	0011      	movs	r1, r2
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f000 f99d 	bl	8002ff4 <TIM_OC1_SetConfig>
      break;
 8002cba:	e01c      	b.n	8002cf6 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	0011      	movs	r1, r2
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f000 fa1d 	bl	8003104 <TIM_OC2_SetConfig>
      break;
 8002cca:	e014      	b.n	8002cf6 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	0011      	movs	r1, r2
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f000 fa99 	bl	800320c <TIM_OC3_SetConfig>
      break;
 8002cda:	e00c      	b.n	8002cf6 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	0011      	movs	r1, r2
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f000 fb17 	bl	8003318 <TIM_OC4_SetConfig>
      break;
 8002cea:	e004      	b.n	8002cf6 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8002cec:	2317      	movs	r3, #23
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	701a      	strb	r2, [r3, #0]
      break;
 8002cf4:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	223c      	movs	r2, #60	; 0x3c
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	5499      	strb	r1, [r3, r2]

  return status;
 8002cfe:	2317      	movs	r3, #23
 8002d00:	18fb      	adds	r3, r7, r3
 8002d02:	781b      	ldrb	r3, [r3, #0]
}
 8002d04:	0018      	movs	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b006      	add	sp, #24
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d16:	230f      	movs	r3, #15
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	223c      	movs	r2, #60	; 0x3c
 8002d22:	5c9b      	ldrb	r3, [r3, r2]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <HAL_TIM_ConfigClockSource+0x20>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e0bc      	b.n	8002ea6 <HAL_TIM_ConfigClockSource+0x19a>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	223c      	movs	r2, #60	; 0x3c
 8002d30:	2101      	movs	r1, #1
 8002d32:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	223d      	movs	r2, #61	; 0x3d
 8002d38:	2102      	movs	r1, #2
 8002d3a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2277      	movs	r2, #119	; 0x77
 8002d48:	4393      	bics	r3, r2
 8002d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	4a58      	ldr	r2, [pc, #352]	; (8002eb0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2280      	movs	r2, #128	; 0x80
 8002d62:	0192      	lsls	r2, r2, #6
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d040      	beq.n	8002dea <HAL_TIM_ConfigClockSource+0xde>
 8002d68:	2280      	movs	r2, #128	; 0x80
 8002d6a:	0192      	lsls	r2, r2, #6
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d900      	bls.n	8002d72 <HAL_TIM_ConfigClockSource+0x66>
 8002d70:	e088      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x178>
 8002d72:	2280      	movs	r2, #128	; 0x80
 8002d74:	0152      	lsls	r2, r2, #5
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d100      	bne.n	8002d7c <HAL_TIM_ConfigClockSource+0x70>
 8002d7a:	e088      	b.n	8002e8e <HAL_TIM_ConfigClockSource+0x182>
 8002d7c:	2280      	movs	r2, #128	; 0x80
 8002d7e:	0152      	lsls	r2, r2, #5
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d900      	bls.n	8002d86 <HAL_TIM_ConfigClockSource+0x7a>
 8002d84:	e07e      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x178>
 8002d86:	2b70      	cmp	r3, #112	; 0x70
 8002d88:	d018      	beq.n	8002dbc <HAL_TIM_ConfigClockSource+0xb0>
 8002d8a:	d900      	bls.n	8002d8e <HAL_TIM_ConfigClockSource+0x82>
 8002d8c:	e07a      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x178>
 8002d8e:	2b60      	cmp	r3, #96	; 0x60
 8002d90:	d04f      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0x126>
 8002d92:	d900      	bls.n	8002d96 <HAL_TIM_ConfigClockSource+0x8a>
 8002d94:	e076      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x178>
 8002d96:	2b50      	cmp	r3, #80	; 0x50
 8002d98:	d03b      	beq.n	8002e12 <HAL_TIM_ConfigClockSource+0x106>
 8002d9a:	d900      	bls.n	8002d9e <HAL_TIM_ConfigClockSource+0x92>
 8002d9c:	e072      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x178>
 8002d9e:	2b40      	cmp	r3, #64	; 0x40
 8002da0:	d057      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x146>
 8002da2:	d900      	bls.n	8002da6 <HAL_TIM_ConfigClockSource+0x9a>
 8002da4:	e06e      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x178>
 8002da6:	2b30      	cmp	r3, #48	; 0x30
 8002da8:	d063      	beq.n	8002e72 <HAL_TIM_ConfigClockSource+0x166>
 8002daa:	d86b      	bhi.n	8002e84 <HAL_TIM_ConfigClockSource+0x178>
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	d060      	beq.n	8002e72 <HAL_TIM_ConfigClockSource+0x166>
 8002db0:	d868      	bhi.n	8002e84 <HAL_TIM_ConfigClockSource+0x178>
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d05d      	beq.n	8002e72 <HAL_TIM_ConfigClockSource+0x166>
 8002db6:	2b10      	cmp	r3, #16
 8002db8:	d05b      	beq.n	8002e72 <HAL_TIM_ConfigClockSource+0x166>
 8002dba:	e063      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dcc:	f000 fb88 	bl	80034e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2277      	movs	r2, #119	; 0x77
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	609a      	str	r2, [r3, #8]
      break;
 8002de8:	e052      	b.n	8002e90 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dfa:	f000 fb71 	bl	80034e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2180      	movs	r1, #128	; 0x80
 8002e0a:	01c9      	lsls	r1, r1, #7
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	609a      	str	r2, [r3, #8]
      break;
 8002e10:	e03e      	b.n	8002e90 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e1e:	001a      	movs	r2, r3
 8002e20:	f000 fae4 	bl	80033ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2150      	movs	r1, #80	; 0x50
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f000 fb3e 	bl	80034ac <TIM_ITRx_SetConfig>
      break;
 8002e30:	e02e      	b.n	8002e90 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e3e:	001a      	movs	r2, r3
 8002e40:	f000 fb02 	bl	8003448 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2160      	movs	r1, #96	; 0x60
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f000 fb2e 	bl	80034ac <TIM_ITRx_SetConfig>
      break;
 8002e50:	e01e      	b.n	8002e90 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e5e:	001a      	movs	r2, r3
 8002e60:	f000 fac4 	bl	80033ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2140      	movs	r1, #64	; 0x40
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f000 fb1e 	bl	80034ac <TIM_ITRx_SetConfig>
      break;
 8002e70:	e00e      	b.n	8002e90 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	0019      	movs	r1, r3
 8002e7c:	0010      	movs	r0, r2
 8002e7e:	f000 fb15 	bl	80034ac <TIM_ITRx_SetConfig>
      break;
 8002e82:	e005      	b.n	8002e90 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002e84:	230f      	movs	r3, #15
 8002e86:	18fb      	adds	r3, r7, r3
 8002e88:	2201      	movs	r2, #1
 8002e8a:	701a      	strb	r2, [r3, #0]
      break;
 8002e8c:	e000      	b.n	8002e90 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002e8e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	223d      	movs	r2, #61	; 0x3d
 8002e94:	2101      	movs	r1, #1
 8002e96:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	223c      	movs	r2, #60	; 0x3c
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	5499      	strb	r1, [r3, r2]

  return status;
 8002ea0:	230f      	movs	r3, #15
 8002ea2:	18fb      	adds	r3, r7, r3
 8002ea4:	781b      	ldrb	r3, [r3, #0]
}
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b004      	add	sp, #16
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	ffff00ff 	.word	0xffff00ff

08002eb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ebc:	46c0      	nop			; (mov r8, r8)
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b002      	add	sp, #8
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ecc:	46c0      	nop			; (mov r8, r8)
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b002      	add	sp, #8
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002edc:	46c0      	nop			; (mov r8, r8)
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b002      	add	sp, #8
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eec:	46c0      	nop			; (mov r8, r8)
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b002      	add	sp, #8
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a34      	ldr	r2, [pc, #208]	; (8002fd8 <TIM_Base_SetConfig+0xe4>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d008      	beq.n	8002f1e <TIM_Base_SetConfig+0x2a>
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	2380      	movs	r3, #128	; 0x80
 8002f10:	05db      	lsls	r3, r3, #23
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d003      	beq.n	8002f1e <TIM_Base_SetConfig+0x2a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a30      	ldr	r2, [pc, #192]	; (8002fdc <TIM_Base_SetConfig+0xe8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d108      	bne.n	8002f30 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2270      	movs	r2, #112	; 0x70
 8002f22:	4393      	bics	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a29      	ldr	r2, [pc, #164]	; (8002fd8 <TIM_Base_SetConfig+0xe4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d018      	beq.n	8002f6a <TIM_Base_SetConfig+0x76>
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	05db      	lsls	r3, r3, #23
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d013      	beq.n	8002f6a <TIM_Base_SetConfig+0x76>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a25      	ldr	r2, [pc, #148]	; (8002fdc <TIM_Base_SetConfig+0xe8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d00f      	beq.n	8002f6a <TIM_Base_SetConfig+0x76>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a24      	ldr	r2, [pc, #144]	; (8002fe0 <TIM_Base_SetConfig+0xec>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d00b      	beq.n	8002f6a <TIM_Base_SetConfig+0x76>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a23      	ldr	r2, [pc, #140]	; (8002fe4 <TIM_Base_SetConfig+0xf0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d007      	beq.n	8002f6a <TIM_Base_SetConfig+0x76>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a22      	ldr	r2, [pc, #136]	; (8002fe8 <TIM_Base_SetConfig+0xf4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d003      	beq.n	8002f6a <TIM_Base_SetConfig+0x76>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a21      	ldr	r2, [pc, #132]	; (8002fec <TIM_Base_SetConfig+0xf8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d108      	bne.n	8002f7c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4a20      	ldr	r2, [pc, #128]	; (8002ff0 <TIM_Base_SetConfig+0xfc>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2280      	movs	r2, #128	; 0x80
 8002f80:	4393      	bics	r3, r2
 8002f82:	001a      	movs	r2, r3
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a0c      	ldr	r2, [pc, #48]	; (8002fd8 <TIM_Base_SetConfig+0xe4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d00b      	beq.n	8002fc2 <TIM_Base_SetConfig+0xce>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a0d      	ldr	r2, [pc, #52]	; (8002fe4 <TIM_Base_SetConfig+0xf0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d007      	beq.n	8002fc2 <TIM_Base_SetConfig+0xce>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a0c      	ldr	r2, [pc, #48]	; (8002fe8 <TIM_Base_SetConfig+0xf4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d003      	beq.n	8002fc2 <TIM_Base_SetConfig+0xce>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a0b      	ldr	r2, [pc, #44]	; (8002fec <TIM_Base_SetConfig+0xf8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d103      	bne.n	8002fca <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	691a      	ldr	r2, [r3, #16]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	615a      	str	r2, [r3, #20]
}
 8002fd0:	46c0      	nop			; (mov r8, r8)
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b004      	add	sp, #16
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40012c00 	.word	0x40012c00
 8002fdc:	40000400 	.word	0x40000400
 8002fe0:	40002000 	.word	0x40002000
 8002fe4:	40014000 	.word	0x40014000
 8002fe8:	40014400 	.word	0x40014400
 8002fec:	40014800 	.word	0x40014800
 8002ff0:	fffffcff 	.word	0xfffffcff

08002ff4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	2201      	movs	r2, #1
 8003004:	4393      	bics	r3, r2
 8003006:	001a      	movs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2270      	movs	r2, #112	; 0x70
 8003022:	4393      	bics	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2203      	movs	r2, #3
 800302a:	4393      	bics	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4313      	orrs	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2202      	movs	r2, #2
 800303c:	4393      	bics	r3, r2
 800303e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	4313      	orrs	r3, r2
 8003048:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a27      	ldr	r2, [pc, #156]	; (80030ec <TIM_OC1_SetConfig+0xf8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00b      	beq.n	800306a <TIM_OC1_SetConfig+0x76>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a26      	ldr	r2, [pc, #152]	; (80030f0 <TIM_OC1_SetConfig+0xfc>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d007      	beq.n	800306a <TIM_OC1_SetConfig+0x76>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a25      	ldr	r2, [pc, #148]	; (80030f4 <TIM_OC1_SetConfig+0x100>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d003      	beq.n	800306a <TIM_OC1_SetConfig+0x76>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a24      	ldr	r2, [pc, #144]	; (80030f8 <TIM_OC1_SetConfig+0x104>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d10c      	bne.n	8003084 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2208      	movs	r2, #8
 800306e:	4393      	bics	r3, r2
 8003070:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	2204      	movs	r2, #4
 8003080:	4393      	bics	r3, r2
 8003082:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a19      	ldr	r2, [pc, #100]	; (80030ec <TIM_OC1_SetConfig+0xf8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00b      	beq.n	80030a4 <TIM_OC1_SetConfig+0xb0>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a18      	ldr	r2, [pc, #96]	; (80030f0 <TIM_OC1_SetConfig+0xfc>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d007      	beq.n	80030a4 <TIM_OC1_SetConfig+0xb0>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a17      	ldr	r2, [pc, #92]	; (80030f4 <TIM_OC1_SetConfig+0x100>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d003      	beq.n	80030a4 <TIM_OC1_SetConfig+0xb0>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a16      	ldr	r2, [pc, #88]	; (80030f8 <TIM_OC1_SetConfig+0x104>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d111      	bne.n	80030c8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4a15      	ldr	r2, [pc, #84]	; (80030fc <TIM_OC1_SetConfig+0x108>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4a14      	ldr	r2, [pc, #80]	; (8003100 <TIM_OC1_SetConfig+0x10c>)
 80030b0:	4013      	ands	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	621a      	str	r2, [r3, #32]
}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	46bd      	mov	sp, r7
 80030e6:	b006      	add	sp, #24
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	40012c00 	.word	0x40012c00
 80030f0:	40014000 	.word	0x40014000
 80030f4:	40014400 	.word	0x40014400
 80030f8:	40014800 	.word	0x40014800
 80030fc:	fffffeff 	.word	0xfffffeff
 8003100:	fffffdff 	.word	0xfffffdff

08003104 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	2210      	movs	r2, #16
 8003114:	4393      	bics	r3, r2
 8003116:	001a      	movs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4a2e      	ldr	r2, [pc, #184]	; (80031ec <TIM_OC2_SetConfig+0xe8>)
 8003132:	4013      	ands	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	4a2d      	ldr	r2, [pc, #180]	; (80031f0 <TIM_OC2_SetConfig+0xec>)
 800313a:	4013      	ands	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	021b      	lsls	r3, r3, #8
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2220      	movs	r2, #32
 800314e:	4393      	bics	r3, r2
 8003150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	4313      	orrs	r3, r2
 800315c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a24      	ldr	r2, [pc, #144]	; (80031f4 <TIM_OC2_SetConfig+0xf0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d10d      	bne.n	8003182 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2280      	movs	r2, #128	; 0x80
 800316a:	4393      	bics	r3, r2
 800316c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	4313      	orrs	r3, r2
 8003178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2240      	movs	r2, #64	; 0x40
 800317e:	4393      	bics	r3, r2
 8003180:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a1b      	ldr	r2, [pc, #108]	; (80031f4 <TIM_OC2_SetConfig+0xf0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00b      	beq.n	80031a2 <TIM_OC2_SetConfig+0x9e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a1a      	ldr	r2, [pc, #104]	; (80031f8 <TIM_OC2_SetConfig+0xf4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d007      	beq.n	80031a2 <TIM_OC2_SetConfig+0x9e>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a19      	ldr	r2, [pc, #100]	; (80031fc <TIM_OC2_SetConfig+0xf8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d003      	beq.n	80031a2 <TIM_OC2_SetConfig+0x9e>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a18      	ldr	r2, [pc, #96]	; (8003200 <TIM_OC2_SetConfig+0xfc>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d113      	bne.n	80031ca <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4a17      	ldr	r2, [pc, #92]	; (8003204 <TIM_OC2_SetConfig+0x100>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4a16      	ldr	r2, [pc, #88]	; (8003208 <TIM_OC2_SetConfig+0x104>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	621a      	str	r2, [r3, #32]
}
 80031e4:	46c0      	nop			; (mov r8, r8)
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b006      	add	sp, #24
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	ffff8fff 	.word	0xffff8fff
 80031f0:	fffffcff 	.word	0xfffffcff
 80031f4:	40012c00 	.word	0x40012c00
 80031f8:	40014000 	.word	0x40014000
 80031fc:	40014400 	.word	0x40014400
 8003200:	40014800 	.word	0x40014800
 8003204:	fffffbff 	.word	0xfffffbff
 8003208:	fffff7ff 	.word	0xfffff7ff

0800320c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	4a35      	ldr	r2, [pc, #212]	; (80032f0 <TIM_OC3_SetConfig+0xe4>)
 800321c:	401a      	ands	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2270      	movs	r2, #112	; 0x70
 8003238:	4393      	bics	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2203      	movs	r2, #3
 8003240:	4393      	bics	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	4a28      	ldr	r2, [pc, #160]	; (80032f4 <TIM_OC3_SetConfig+0xe8>)
 8003252:	4013      	ands	r3, r2
 8003254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	021b      	lsls	r3, r3, #8
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	4313      	orrs	r3, r2
 8003260:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a24      	ldr	r2, [pc, #144]	; (80032f8 <TIM_OC3_SetConfig+0xec>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d10d      	bne.n	8003286 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	4a23      	ldr	r2, [pc, #140]	; (80032fc <TIM_OC3_SetConfig+0xf0>)
 800326e:	4013      	ands	r3, r2
 8003270:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	021b      	lsls	r3, r3, #8
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	4a1f      	ldr	r2, [pc, #124]	; (8003300 <TIM_OC3_SetConfig+0xf4>)
 8003282:	4013      	ands	r3, r2
 8003284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a1b      	ldr	r2, [pc, #108]	; (80032f8 <TIM_OC3_SetConfig+0xec>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00b      	beq.n	80032a6 <TIM_OC3_SetConfig+0x9a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a1c      	ldr	r2, [pc, #112]	; (8003304 <TIM_OC3_SetConfig+0xf8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d007      	beq.n	80032a6 <TIM_OC3_SetConfig+0x9a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a1b      	ldr	r2, [pc, #108]	; (8003308 <TIM_OC3_SetConfig+0xfc>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d003      	beq.n	80032a6 <TIM_OC3_SetConfig+0x9a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a1a      	ldr	r2, [pc, #104]	; (800330c <TIM_OC3_SetConfig+0x100>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d113      	bne.n	80032ce <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4a19      	ldr	r2, [pc, #100]	; (8003310 <TIM_OC3_SetConfig+0x104>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4a18      	ldr	r2, [pc, #96]	; (8003314 <TIM_OC3_SetConfig+0x108>)
 80032b2:	4013      	ands	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	4313      	orrs	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	621a      	str	r2, [r3, #32]
}
 80032e8:	46c0      	nop			; (mov r8, r8)
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b006      	add	sp, #24
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	fffffeff 	.word	0xfffffeff
 80032f4:	fffffdff 	.word	0xfffffdff
 80032f8:	40012c00 	.word	0x40012c00
 80032fc:	fffff7ff 	.word	0xfffff7ff
 8003300:	fffffbff 	.word	0xfffffbff
 8003304:	40014000 	.word	0x40014000
 8003308:	40014400 	.word	0x40014400
 800330c:	40014800 	.word	0x40014800
 8003310:	ffffefff 	.word	0xffffefff
 8003314:	ffffdfff 	.word	0xffffdfff

08003318 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	4a28      	ldr	r2, [pc, #160]	; (80033c8 <TIM_OC4_SetConfig+0xb0>)
 8003328:	401a      	ands	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4a22      	ldr	r2, [pc, #136]	; (80033cc <TIM_OC4_SetConfig+0xb4>)
 8003344:	4013      	ands	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4a21      	ldr	r2, [pc, #132]	; (80033d0 <TIM_OC4_SetConfig+0xb8>)
 800334c:	4013      	ands	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	021b      	lsls	r3, r3, #8
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4a1d      	ldr	r2, [pc, #116]	; (80033d4 <TIM_OC4_SetConfig+0xbc>)
 8003360:	4013      	ands	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	031b      	lsls	r3, r3, #12
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a19      	ldr	r2, [pc, #100]	; (80033d8 <TIM_OC4_SetConfig+0xc0>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d00b      	beq.n	8003390 <TIM_OC4_SetConfig+0x78>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a18      	ldr	r2, [pc, #96]	; (80033dc <TIM_OC4_SetConfig+0xc4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d007      	beq.n	8003390 <TIM_OC4_SetConfig+0x78>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a17      	ldr	r2, [pc, #92]	; (80033e0 <TIM_OC4_SetConfig+0xc8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d003      	beq.n	8003390 <TIM_OC4_SetConfig+0x78>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a16      	ldr	r2, [pc, #88]	; (80033e4 <TIM_OC4_SetConfig+0xcc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d109      	bne.n	80033a4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	4a15      	ldr	r2, [pc, #84]	; (80033e8 <TIM_OC4_SetConfig+0xd0>)
 8003394:	4013      	ands	r3, r2
 8003396:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	019b      	lsls	r3, r3, #6
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	621a      	str	r2, [r3, #32]
}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b006      	add	sp, #24
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	ffffefff 	.word	0xffffefff
 80033cc:	ffff8fff 	.word	0xffff8fff
 80033d0:	fffffcff 	.word	0xfffffcff
 80033d4:	ffffdfff 	.word	0xffffdfff
 80033d8:	40012c00 	.word	0x40012c00
 80033dc:	40014000 	.word	0x40014000
 80033e0:	40014400 	.word	0x40014400
 80033e4:	40014800 	.word	0x40014800
 80033e8:	ffffbfff 	.word	0xffffbfff

080033ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	2201      	movs	r2, #1
 8003404:	4393      	bics	r3, r2
 8003406:	001a      	movs	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	22f0      	movs	r2, #240	; 0xf0
 8003416:	4393      	bics	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	220a      	movs	r2, #10
 8003428:	4393      	bics	r3, r2
 800342a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	621a      	str	r2, [r3, #32]
}
 8003440:	46c0      	nop			; (mov r8, r8)
 8003442:	46bd      	mov	sp, r7
 8003444:	b006      	add	sp, #24
 8003446:	bd80      	pop	{r7, pc}

08003448 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	2210      	movs	r2, #16
 800345a:	4393      	bics	r3, r2
 800345c:	001a      	movs	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	4a0d      	ldr	r2, [pc, #52]	; (80034a8 <TIM_TI2_ConfigInputStage+0x60>)
 8003472:	4013      	ands	r3, r2
 8003474:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	031b      	lsls	r3, r3, #12
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	22a0      	movs	r2, #160	; 0xa0
 8003484:	4393      	bics	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	621a      	str	r2, [r3, #32]
}
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	46bd      	mov	sp, r7
 80034a2:	b006      	add	sp, #24
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	ffff0fff 	.word	0xffff0fff

080034ac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2270      	movs	r2, #112	; 0x70
 80034c0:	4393      	bics	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	2207      	movs	r2, #7
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	609a      	str	r2, [r3, #8]
}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	46bd      	mov	sp, r7
 80034da:	b004      	add	sp, #16
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	4a09      	ldr	r2, [pc, #36]	; (800351c <TIM_ETR_SetConfig+0x3c>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	021a      	lsls	r2, r3, #8
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	431a      	orrs	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4313      	orrs	r3, r2
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	4313      	orrs	r3, r2
 800350c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	609a      	str	r2, [r3, #8]
}
 8003514:	46c0      	nop			; (mov r8, r8)
 8003516:	46bd      	mov	sp, r7
 8003518:	b006      	add	sp, #24
 800351a:	bd80      	pop	{r7, pc}
 800351c:	ffff00ff 	.word	0xffff00ff

08003520 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	223c      	movs	r2, #60	; 0x3c
 800352e:	5c9b      	ldrb	r3, [r3, r2]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003534:	2302      	movs	r3, #2
 8003536:	e047      	b.n	80035c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	223c      	movs	r2, #60	; 0x3c
 800353c:	2101      	movs	r1, #1
 800353e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	223d      	movs	r2, #61	; 0x3d
 8003544:	2102      	movs	r1, #2
 8003546:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2270      	movs	r2, #112	; 0x70
 800355c:	4393      	bics	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	4313      	orrs	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a16      	ldr	r2, [pc, #88]	; (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00f      	beq.n	800359c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	2380      	movs	r3, #128	; 0x80
 8003582:	05db      	lsls	r3, r3, #23
 8003584:	429a      	cmp	r2, r3
 8003586:	d009      	beq.n	800359c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a11      	ldr	r2, [pc, #68]	; (80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d004      	beq.n	800359c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a10      	ldr	r2, [pc, #64]	; (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d10c      	bne.n	80035b6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2280      	movs	r2, #128	; 0x80
 80035a0:	4393      	bics	r3, r2
 80035a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	223d      	movs	r2, #61	; 0x3d
 80035ba:	2101      	movs	r1, #1
 80035bc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	223c      	movs	r2, #60	; 0x3c
 80035c2:	2100      	movs	r1, #0
 80035c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	0018      	movs	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b004      	add	sp, #16
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40012c00 	.word	0x40012c00
 80035d4:	40000400 	.word	0x40000400
 80035d8:	40014000 	.word	0x40014000

080035dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035e4:	46c0      	nop			; (mov r8, r8)
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b002      	add	sp, #8
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035f4:	46c0      	nop			; (mov r8, r8)
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b002      	add	sp, #8
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e044      	b.n	8003698 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003612:	2b00      	cmp	r3, #0
 8003614:	d107      	bne.n	8003626 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2278      	movs	r2, #120	; 0x78
 800361a:	2100      	movs	r1, #0
 800361c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	0018      	movs	r0, r3
 8003622:	f7fd fb45 	bl	8000cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2224      	movs	r2, #36	; 0x24
 800362a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2101      	movs	r1, #1
 8003638:	438a      	bics	r2, r1
 800363a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	0018      	movs	r0, r3
 8003640:	f000 fc88 	bl	8003f54 <UART_SetConfig>
 8003644:	0003      	movs	r3, r0
 8003646:	2b01      	cmp	r3, #1
 8003648:	d101      	bne.n	800364e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e024      	b.n	8003698 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	0018      	movs	r0, r3
 800365a:	f000 fdbb 	bl	80041d4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	490d      	ldr	r1, [pc, #52]	; (80036a0 <HAL_UART_Init+0xa4>)
 800366a:	400a      	ands	r2, r1
 800366c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	212a      	movs	r1, #42	; 0x2a
 800367a:	438a      	bics	r2, r1
 800367c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2101      	movs	r1, #1
 800368a:	430a      	orrs	r2, r1
 800368c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	0018      	movs	r0, r3
 8003692:	f000 fe53 	bl	800433c <UART_CheckIdleState>
 8003696:	0003      	movs	r3, r0
}
 8003698:	0018      	movs	r0, r3
 800369a:	46bd      	mov	sp, r7
 800369c:	b002      	add	sp, #8
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	ffffb7ff 	.word	0xffffb7ff

080036a4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e030      	b.n	8003718 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2224      	movs	r2, #36	; 0x24
 80036ba:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2101      	movs	r1, #1
 80036c8:	438a      	bics	r2, r1
 80036ca:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2200      	movs	r2, #0
 80036da:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2200      	movs	r2, #0
 80036e2:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	0018      	movs	r0, r3
 80036e8:	f7fd fbce 	bl	8000e88 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2284      	movs	r2, #132	; 0x84
 80036f0:	2100      	movs	r1, #0
 80036f2:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2280      	movs	r2, #128	; 0x80
 80036fe:	2100      	movs	r1, #0
 8003700:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2278      	movs	r2, #120	; 0x78
 8003712:	2100      	movs	r1, #0
 8003714:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	0018      	movs	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	b002      	add	sp, #8
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	1dbb      	adds	r3, r7, #6
 800372c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003732:	2b20      	cmp	r3, #32
 8003734:	d15b      	bne.n	80037ee <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_UART_Transmit_IT+0x24>
 800373c:	1dbb      	adds	r3, r7, #6
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e053      	b.n	80037f0 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	2380      	movs	r3, #128	; 0x80
 800374e:	015b      	lsls	r3, r3, #5
 8003750:	429a      	cmp	r2, r3
 8003752:	d109      	bne.n	8003768 <HAL_UART_Transmit_IT+0x48>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d105      	bne.n	8003768 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2201      	movs	r2, #1
 8003760:	4013      	ands	r3, r2
 8003762:	d001      	beq.n	8003768 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e043      	b.n	80037f0 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1dba      	adds	r2, r7, #6
 8003772:	2150      	movs	r1, #80	; 0x50
 8003774:	8812      	ldrh	r2, [r2, #0]
 8003776:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	1dba      	adds	r2, r7, #6
 800377c:	2152      	movs	r1, #82	; 0x52
 800377e:	8812      	ldrh	r2, [r2, #0]
 8003780:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2284      	movs	r2, #132	; 0x84
 800378c:	2100      	movs	r1, #0
 800378e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2221      	movs	r2, #33	; 0x21
 8003794:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	2380      	movs	r3, #128	; 0x80
 800379c:	015b      	lsls	r3, r3, #5
 800379e:	429a      	cmp	r2, r3
 80037a0:	d107      	bne.n	80037b2 <HAL_UART_Transmit_IT+0x92>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d103      	bne.n	80037b2 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4a12      	ldr	r2, [pc, #72]	; (80037f8 <HAL_UART_Transmit_IT+0xd8>)
 80037ae:	66da      	str	r2, [r3, #108]	; 0x6c
 80037b0:	e002      	b.n	80037b8 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4a11      	ldr	r2, [pc, #68]	; (80037fc <HAL_UART_Transmit_IT+0xdc>)
 80037b6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037b8:	f3ef 8310 	mrs	r3, PRIMASK
 80037bc:	613b      	str	r3, [r7, #16]
  return(result);
 80037be:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80037c0:	61fb      	str	r3, [r7, #28]
 80037c2:	2301      	movs	r3, #1
 80037c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f383 8810 	msr	PRIMASK, r3
}
 80037cc:	46c0      	nop			; (mov r8, r8)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2180      	movs	r1, #128	; 0x80
 80037da:	430a      	orrs	r2, r1
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	f383 8810 	msr	PRIMASK, r3
}
 80037e8:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	e000      	b.n	80037f0 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80037ee:	2302      	movs	r3, #2
  }
}
 80037f0:	0018      	movs	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	b008      	add	sp, #32
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	08004bf1 	.word	0x08004bf1
 80037fc:	08004b3d 	.word	0x08004b3d

08003800 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	1dbb      	adds	r3, r7, #6
 800380c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2280      	movs	r2, #128	; 0x80
 8003812:	589b      	ldr	r3, [r3, r2]
 8003814:	2b20      	cmp	r3, #32
 8003816:	d145      	bne.n	80038a4 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_UART_Receive_IT+0x26>
 800381e:	1dbb      	adds	r3, r7, #6
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e03d      	b.n	80038a6 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	2380      	movs	r3, #128	; 0x80
 8003830:	015b      	lsls	r3, r3, #5
 8003832:	429a      	cmp	r2, r3
 8003834:	d109      	bne.n	800384a <HAL_UART_Receive_IT+0x4a>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d105      	bne.n	800384a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2201      	movs	r2, #1
 8003842:	4013      	ands	r3, r2
 8003844:	d001      	beq.n	800384a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e02d      	b.n	80038a6 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	2380      	movs	r3, #128	; 0x80
 8003858:	041b      	lsls	r3, r3, #16
 800385a:	4013      	ands	r3, r2
 800385c:	d019      	beq.n	8003892 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800385e:	f3ef 8310 	mrs	r3, PRIMASK
 8003862:	613b      	str	r3, [r7, #16]
  return(result);
 8003864:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003866:	61fb      	str	r3, [r7, #28]
 8003868:	2301      	movs	r3, #1
 800386a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f383 8810 	msr	PRIMASK, r3
}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2180      	movs	r1, #128	; 0x80
 8003880:	04c9      	lsls	r1, r1, #19
 8003882:	430a      	orrs	r2, r1
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	f383 8810 	msr	PRIMASK, r3
}
 8003890:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003892:	1dbb      	adds	r3, r7, #6
 8003894:	881a      	ldrh	r2, [r3, #0]
 8003896:	68b9      	ldr	r1, [r7, #8]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	0018      	movs	r0, r3
 800389c:	f000 fe60 	bl	8004560 <UART_Start_Receive_IT>
 80038a0:	0003      	movs	r3, r0
 80038a2:	e000      	b.n	80038a6 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80038a4:	2302      	movs	r3, #2
  }
}
 80038a6:	0018      	movs	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b008      	add	sp, #32
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b088      	sub	sp, #32
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	60f8      	str	r0, [r7, #12]
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	1dbb      	adds	r3, r7, #6
 80038ba:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2280      	movs	r2, #128	; 0x80
 80038c0:	589b      	ldr	r3, [r3, r2]
 80038c2:	2b20      	cmp	r3, #32
 80038c4:	d145      	bne.n	8003952 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <HAL_UART_Receive_DMA+0x26>
 80038cc:	1dbb      	adds	r3, r7, #6
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e03d      	b.n	8003954 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	015b      	lsls	r3, r3, #5
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d109      	bne.n	80038f8 <HAL_UART_Receive_DMA+0x4a>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d105      	bne.n	80038f8 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2201      	movs	r2, #1
 80038f0:	4013      	ands	r3, r2
 80038f2:	d001      	beq.n	80038f8 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e02d      	b.n	8003954 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	2380      	movs	r3, #128	; 0x80
 8003906:	041b      	lsls	r3, r3, #16
 8003908:	4013      	ands	r3, r2
 800390a:	d019      	beq.n	8003940 <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800390c:	f3ef 8310 	mrs	r3, PRIMASK
 8003910:	613b      	str	r3, [r7, #16]
  return(result);
 8003912:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003914:	61fb      	str	r3, [r7, #28]
 8003916:	2301      	movs	r3, #1
 8003918:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f383 8810 	msr	PRIMASK, r3
}
 8003920:	46c0      	nop			; (mov r8, r8)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2180      	movs	r1, #128	; 0x80
 800392e:	04c9      	lsls	r1, r1, #19
 8003930:	430a      	orrs	r2, r1
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	f383 8810 	msr	PRIMASK, r3
}
 800393e:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003940:	1dbb      	adds	r3, r7, #6
 8003942:	881a      	ldrh	r2, [r3, #0]
 8003944:	68b9      	ldr	r1, [r7, #8]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	0018      	movs	r0, r3
 800394a:	f000 febf 	bl	80046cc <UART_Start_Receive_DMA>
 800394e:	0003      	movs	r3, r0
 8003950:	e000      	b.n	8003954 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003952:	2302      	movs	r3, #2
  }
}
 8003954:	0018      	movs	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	b008      	add	sp, #32
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800395c:	b590      	push	{r4, r7, lr}
 800395e:	b0ab      	sub	sp, #172	; 0xac
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	22a4      	movs	r2, #164	; 0xa4
 800396c:	18b9      	adds	r1, r7, r2
 800396e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	20a0      	movs	r0, #160	; 0xa0
 8003978:	1839      	adds	r1, r7, r0
 800397a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	219c      	movs	r1, #156	; 0x9c
 8003984:	1879      	adds	r1, r7, r1
 8003986:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003988:	0011      	movs	r1, r2
 800398a:	18bb      	adds	r3, r7, r2
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a99      	ldr	r2, [pc, #612]	; (8003bf4 <HAL_UART_IRQHandler+0x298>)
 8003990:	4013      	ands	r3, r2
 8003992:	2298      	movs	r2, #152	; 0x98
 8003994:	18bc      	adds	r4, r7, r2
 8003996:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003998:	18bb      	adds	r3, r7, r2
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d114      	bne.n	80039ca <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80039a0:	187b      	adds	r3, r7, r1
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2220      	movs	r2, #32
 80039a6:	4013      	ands	r3, r2
 80039a8:	d00f      	beq.n	80039ca <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039aa:	183b      	adds	r3, r7, r0
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2220      	movs	r2, #32
 80039b0:	4013      	ands	r3, r2
 80039b2:	d00a      	beq.n	80039ca <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d100      	bne.n	80039be <HAL_UART_IRQHandler+0x62>
 80039bc:	e29e      	b.n	8003efc <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	0010      	movs	r0, r2
 80039c6:	4798      	blx	r3
      }
      return;
 80039c8:	e298      	b.n	8003efc <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80039ca:	2398      	movs	r3, #152	; 0x98
 80039cc:	18fb      	adds	r3, r7, r3
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d100      	bne.n	80039d6 <HAL_UART_IRQHandler+0x7a>
 80039d4:	e114      	b.n	8003c00 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80039d6:	239c      	movs	r3, #156	; 0x9c
 80039d8:	18fb      	adds	r3, r7, r3
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2201      	movs	r2, #1
 80039de:	4013      	ands	r3, r2
 80039e0:	d106      	bne.n	80039f0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80039e2:	23a0      	movs	r3, #160	; 0xa0
 80039e4:	18fb      	adds	r3, r7, r3
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a83      	ldr	r2, [pc, #524]	; (8003bf8 <HAL_UART_IRQHandler+0x29c>)
 80039ea:	4013      	ands	r3, r2
 80039ec:	d100      	bne.n	80039f0 <HAL_UART_IRQHandler+0x94>
 80039ee:	e107      	b.n	8003c00 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80039f0:	23a4      	movs	r3, #164	; 0xa4
 80039f2:	18fb      	adds	r3, r7, r3
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2201      	movs	r2, #1
 80039f8:	4013      	ands	r3, r2
 80039fa:	d012      	beq.n	8003a22 <HAL_UART_IRQHandler+0xc6>
 80039fc:	23a0      	movs	r3, #160	; 0xa0
 80039fe:	18fb      	adds	r3, r7, r3
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	2380      	movs	r3, #128	; 0x80
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	4013      	ands	r3, r2
 8003a08:	d00b      	beq.n	8003a22 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2284      	movs	r2, #132	; 0x84
 8003a16:	589b      	ldr	r3, [r3, r2]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2184      	movs	r1, #132	; 0x84
 8003a20:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a22:	23a4      	movs	r3, #164	; 0xa4
 8003a24:	18fb      	adds	r3, r7, r3
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2202      	movs	r2, #2
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	d011      	beq.n	8003a52 <HAL_UART_IRQHandler+0xf6>
 8003a2e:	239c      	movs	r3, #156	; 0x9c
 8003a30:	18fb      	adds	r3, r7, r3
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2201      	movs	r2, #1
 8003a36:	4013      	ands	r3, r2
 8003a38:	d00b      	beq.n	8003a52 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2284      	movs	r2, #132	; 0x84
 8003a46:	589b      	ldr	r3, [r3, r2]
 8003a48:	2204      	movs	r2, #4
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2184      	movs	r1, #132	; 0x84
 8003a50:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a52:	23a4      	movs	r3, #164	; 0xa4
 8003a54:	18fb      	adds	r3, r7, r3
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2204      	movs	r2, #4
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	d011      	beq.n	8003a82 <HAL_UART_IRQHandler+0x126>
 8003a5e:	239c      	movs	r3, #156	; 0x9c
 8003a60:	18fb      	adds	r3, r7, r3
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2201      	movs	r2, #1
 8003a66:	4013      	ands	r3, r2
 8003a68:	d00b      	beq.n	8003a82 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2204      	movs	r2, #4
 8003a70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2284      	movs	r2, #132	; 0x84
 8003a76:	589b      	ldr	r3, [r3, r2]
 8003a78:	2202      	movs	r2, #2
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2184      	movs	r1, #132	; 0x84
 8003a80:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a82:	23a4      	movs	r3, #164	; 0xa4
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2208      	movs	r2, #8
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	d017      	beq.n	8003abe <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a8e:	23a0      	movs	r3, #160	; 0xa0
 8003a90:	18fb      	adds	r3, r7, r3
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2220      	movs	r2, #32
 8003a96:	4013      	ands	r3, r2
 8003a98:	d105      	bne.n	8003aa6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003a9a:	239c      	movs	r3, #156	; 0x9c
 8003a9c:	18fb      	adds	r3, r7, r3
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003aa4:	d00b      	beq.n	8003abe <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2208      	movs	r2, #8
 8003aac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2284      	movs	r2, #132	; 0x84
 8003ab2:	589b      	ldr	r3, [r3, r2]
 8003ab4:	2208      	movs	r2, #8
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2184      	movs	r1, #132	; 0x84
 8003abc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003abe:	23a4      	movs	r3, #164	; 0xa4
 8003ac0:	18fb      	adds	r3, r7, r3
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	2380      	movs	r3, #128	; 0x80
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d013      	beq.n	8003af4 <HAL_UART_IRQHandler+0x198>
 8003acc:	23a0      	movs	r3, #160	; 0xa0
 8003ace:	18fb      	adds	r3, r7, r3
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	2380      	movs	r3, #128	; 0x80
 8003ad4:	04db      	lsls	r3, r3, #19
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d00c      	beq.n	8003af4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2280      	movs	r2, #128	; 0x80
 8003ae0:	0112      	lsls	r2, r2, #4
 8003ae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2284      	movs	r2, #132	; 0x84
 8003ae8:	589b      	ldr	r3, [r3, r2]
 8003aea:	2220      	movs	r2, #32
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2184      	movs	r1, #132	; 0x84
 8003af2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2284      	movs	r2, #132	; 0x84
 8003af8:	589b      	ldr	r3, [r3, r2]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d100      	bne.n	8003b00 <HAL_UART_IRQHandler+0x1a4>
 8003afe:	e1ff      	b.n	8003f00 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b00:	23a4      	movs	r3, #164	; 0xa4
 8003b02:	18fb      	adds	r3, r7, r3
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2220      	movs	r2, #32
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d00e      	beq.n	8003b2a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b0c:	23a0      	movs	r3, #160	; 0xa0
 8003b0e:	18fb      	adds	r3, r7, r3
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2220      	movs	r2, #32
 8003b14:	4013      	ands	r3, r2
 8003b16:	d008      	beq.n	8003b2a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d004      	beq.n	8003b2a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	0010      	movs	r0, r2
 8003b28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2284      	movs	r2, #132	; 0x84
 8003b2e:	589b      	ldr	r3, [r3, r2]
 8003b30:	2194      	movs	r1, #148	; 0x94
 8003b32:	187a      	adds	r2, r7, r1
 8003b34:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	2240      	movs	r2, #64	; 0x40
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b40      	cmp	r3, #64	; 0x40
 8003b42:	d004      	beq.n	8003b4e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b44:	187b      	adds	r3, r7, r1
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2228      	movs	r2, #40	; 0x28
 8003b4a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b4c:	d047      	beq.n	8003bde <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	0018      	movs	r0, r3
 8003b52:	f000 fe7f 	bl	8004854 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	2240      	movs	r2, #64	; 0x40
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b40      	cmp	r3, #64	; 0x40
 8003b62:	d137      	bne.n	8003bd4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b64:	f3ef 8310 	mrs	r3, PRIMASK
 8003b68:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003b6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b6c:	2090      	movs	r0, #144	; 0x90
 8003b6e:	183a      	adds	r2, r7, r0
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	2301      	movs	r3, #1
 8003b74:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b78:	f383 8810 	msr	PRIMASK, r3
}
 8003b7c:	46c0      	nop			; (mov r8, r8)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2140      	movs	r1, #64	; 0x40
 8003b8a:	438a      	bics	r2, r1
 8003b8c:	609a      	str	r2, [r3, #8]
 8003b8e:	183b      	adds	r3, r7, r0
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b96:	f383 8810 	msr	PRIMASK, r3
}
 8003b9a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d012      	beq.n	8003bca <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba8:	4a14      	ldr	r2, [pc, #80]	; (8003bfc <HAL_UART_IRQHandler+0x2a0>)
 8003baa:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f7fd fd30 	bl	8001616 <HAL_DMA_Abort_IT>
 8003bb6:	1e03      	subs	r3, r0, #0
 8003bb8:	d01a      	beq.n	8003bf0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc8:	e012      	b.n	8003bf0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	0018      	movs	r0, r3
 8003bce:	f000 f9ad 	bl	8003f2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd2:	e00d      	b.n	8003bf0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f000 f9a8 	bl	8003f2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bdc:	e008      	b.n	8003bf0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	0018      	movs	r0, r3
 8003be2:	f000 f9a3 	bl	8003f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2284      	movs	r2, #132	; 0x84
 8003bea:	2100      	movs	r1, #0
 8003bec:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003bee:	e187      	b.n	8003f00 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf0:	46c0      	nop			; (mov r8, r8)
    return;
 8003bf2:	e185      	b.n	8003f00 <HAL_UART_IRQHandler+0x5a4>
 8003bf4:	0000080f 	.word	0x0000080f
 8003bf8:	04000120 	.word	0x04000120
 8003bfc:	08004b0f 	.word	0x08004b0f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d000      	beq.n	8003c0a <HAL_UART_IRQHandler+0x2ae>
 8003c08:	e139      	b.n	8003e7e <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c0a:	23a4      	movs	r3, #164	; 0xa4
 8003c0c:	18fb      	adds	r3, r7, r3
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2210      	movs	r2, #16
 8003c12:	4013      	ands	r3, r2
 8003c14:	d100      	bne.n	8003c18 <HAL_UART_IRQHandler+0x2bc>
 8003c16:	e132      	b.n	8003e7e <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c18:	23a0      	movs	r3, #160	; 0xa0
 8003c1a:	18fb      	adds	r3, r7, r3
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2210      	movs	r2, #16
 8003c20:	4013      	ands	r3, r2
 8003c22:	d100      	bne.n	8003c26 <HAL_UART_IRQHandler+0x2ca>
 8003c24:	e12b      	b.n	8003e7e <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2210      	movs	r2, #16
 8003c2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	2240      	movs	r2, #64	; 0x40
 8003c36:	4013      	ands	r3, r2
 8003c38:	2b40      	cmp	r3, #64	; 0x40
 8003c3a:	d000      	beq.n	8003c3e <HAL_UART_IRQHandler+0x2e2>
 8003c3c:	e09f      	b.n	8003d7e <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	217e      	movs	r1, #126	; 0x7e
 8003c48:	187b      	adds	r3, r7, r1
 8003c4a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003c4c:	187b      	adds	r3, r7, r1
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d100      	bne.n	8003c56 <HAL_UART_IRQHandler+0x2fa>
 8003c54:	e156      	b.n	8003f04 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2258      	movs	r2, #88	; 0x58
 8003c5a:	5a9b      	ldrh	r3, [r3, r2]
 8003c5c:	187a      	adds	r2, r7, r1
 8003c5e:	8812      	ldrh	r2, [r2, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d300      	bcc.n	8003c66 <HAL_UART_IRQHandler+0x30a>
 8003c64:	e14e      	b.n	8003f04 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	187a      	adds	r2, r7, r1
 8003c6a:	215a      	movs	r1, #90	; 0x5a
 8003c6c:	8812      	ldrh	r2, [r2, #0]
 8003c6e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	d06f      	beq.n	8003d5a <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c7e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c82:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c84:	2301      	movs	r3, #1
 8003c86:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8a:	f383 8810 	msr	PRIMASK, r3
}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	499e      	ldr	r1, [pc, #632]	; (8003f14 <HAL_UART_IRQHandler+0x5b8>)
 8003c9c:	400a      	ands	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ca2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca6:	f383 8810 	msr	PRIMASK, r3
}
 8003caa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cac:	f3ef 8310 	mrs	r3, PRIMASK
 8003cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb4:	677b      	str	r3, [r7, #116]	; 0x74
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cbc:	f383 8810 	msr	PRIMASK, r3
}
 8003cc0:	46c0      	nop			; (mov r8, r8)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2101      	movs	r1, #1
 8003cce:	438a      	bics	r2, r1
 8003cd0:	609a      	str	r2, [r3, #8]
 8003cd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cd4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cd8:	f383 8810 	msr	PRIMASK, r3
}
 8003cdc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cde:	f3ef 8310 	mrs	r3, PRIMASK
 8003ce2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ce6:	673b      	str	r3, [r7, #112]	; 0x70
 8003ce8:	2301      	movs	r3, #1
 8003cea:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cee:	f383 8810 	msr	PRIMASK, r3
}
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2140      	movs	r1, #64	; 0x40
 8003d00:	438a      	bics	r2, r1
 8003d02:	609a      	str	r2, [r3, #8]
 8003d04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d06:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d0a:	f383 8810 	msr	PRIMASK, r3
}
 8003d0e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2280      	movs	r2, #128	; 0x80
 8003d14:	2120      	movs	r1, #32
 8003d16:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d22:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d28:	2301      	movs	r3, #1
 8003d2a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d2e:	f383 8810 	msr	PRIMASK, r3
}
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2110      	movs	r1, #16
 8003d40:	438a      	bics	r2, r1
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d46:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d4a:	f383 8810 	msr	PRIMASK, r3
}
 8003d4e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d54:	0018      	movs	r0, r3
 8003d56:	f7fd fc26 	bl	80015a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2258      	movs	r2, #88	; 0x58
 8003d64:	5a9a      	ldrh	r2, [r3, r2]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	215a      	movs	r1, #90	; 0x5a
 8003d6a:	5a5b      	ldrh	r3, [r3, r1]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	0011      	movs	r1, r2
 8003d76:	0018      	movs	r0, r3
 8003d78:	f000 f8e0 	bl	8003f3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d7c:	e0c2      	b.n	8003f04 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2258      	movs	r2, #88	; 0x58
 8003d82:	5a99      	ldrh	r1, [r3, r2]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	225a      	movs	r2, #90	; 0x5a
 8003d88:	5a9b      	ldrh	r3, [r3, r2]
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	208e      	movs	r0, #142	; 0x8e
 8003d8e:	183b      	adds	r3, r7, r0
 8003d90:	1a8a      	subs	r2, r1, r2
 8003d92:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	225a      	movs	r2, #90	; 0x5a
 8003d98:	5a9b      	ldrh	r3, [r3, r2]
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d100      	bne.n	8003da2 <HAL_UART_IRQHandler+0x446>
 8003da0:	e0b2      	b.n	8003f08 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8003da2:	183b      	adds	r3, r7, r0
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d100      	bne.n	8003dac <HAL_UART_IRQHandler+0x450>
 8003daa:	e0ad      	b.n	8003f08 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dac:	f3ef 8310 	mrs	r3, PRIMASK
 8003db0:	60fb      	str	r3, [r7, #12]
  return(result);
 8003db2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003db4:	2488      	movs	r4, #136	; 0x88
 8003db6:	193a      	adds	r2, r7, r4
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	2301      	movs	r3, #1
 8003dbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f383 8810 	msr	PRIMASK, r3
}
 8003dc4:	46c0      	nop			; (mov r8, r8)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4951      	ldr	r1, [pc, #324]	; (8003f18 <HAL_UART_IRQHandler+0x5bc>)
 8003dd2:	400a      	ands	r2, r1
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	193b      	adds	r3, r7, r4
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f383 8810 	msr	PRIMASK, r3
}
 8003de2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003de4:	f3ef 8310 	mrs	r3, PRIMASK
 8003de8:	61bb      	str	r3, [r7, #24]
  return(result);
 8003dea:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dec:	2484      	movs	r4, #132	; 0x84
 8003dee:	193a      	adds	r2, r7, r4
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	2301      	movs	r3, #1
 8003df4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	f383 8810 	msr	PRIMASK, r3
}
 8003dfc:	46c0      	nop			; (mov r8, r8)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2101      	movs	r1, #1
 8003e0a:	438a      	bics	r2, r1
 8003e0c:	609a      	str	r2, [r3, #8]
 8003e0e:	193b      	adds	r3, r7, r4
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	f383 8810 	msr	PRIMASK, r3
}
 8003e1a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2280      	movs	r2, #128	; 0x80
 8003e20:	2120      	movs	r1, #32
 8003e22:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e30:	f3ef 8310 	mrs	r3, PRIMASK
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e38:	2480      	movs	r4, #128	; 0x80
 8003e3a:	193a      	adds	r2, r7, r4
 8003e3c:	6013      	str	r3, [r2, #0]
 8003e3e:	2301      	movs	r3, #1
 8003e40:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e44:	f383 8810 	msr	PRIMASK, r3
}
 8003e48:	46c0      	nop			; (mov r8, r8)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2110      	movs	r1, #16
 8003e56:	438a      	bics	r2, r1
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	193b      	adds	r3, r7, r4
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e62:	f383 8810 	msr	PRIMASK, r3
}
 8003e66:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e6e:	183b      	adds	r3, r7, r0
 8003e70:	881a      	ldrh	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	0011      	movs	r1, r2
 8003e76:	0018      	movs	r0, r3
 8003e78:	f000 f860 	bl	8003f3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e7c:	e044      	b.n	8003f08 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e7e:	23a4      	movs	r3, #164	; 0xa4
 8003e80:	18fb      	adds	r3, r7, r3
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	2380      	movs	r3, #128	; 0x80
 8003e86:	035b      	lsls	r3, r3, #13
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d010      	beq.n	8003eae <HAL_UART_IRQHandler+0x552>
 8003e8c:	239c      	movs	r3, #156	; 0x9c
 8003e8e:	18fb      	adds	r3, r7, r3
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	2380      	movs	r3, #128	; 0x80
 8003e94:	03db      	lsls	r3, r3, #15
 8003e96:	4013      	ands	r3, r2
 8003e98:	d009      	beq.n	8003eae <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2280      	movs	r2, #128	; 0x80
 8003ea0:	0352      	lsls	r2, r2, #13
 8003ea2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f001 f8e4 	bl	8005074 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003eac:	e02f      	b.n	8003f0e <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003eae:	23a4      	movs	r3, #164	; 0xa4
 8003eb0:	18fb      	adds	r3, r7, r3
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2280      	movs	r2, #128	; 0x80
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d00f      	beq.n	8003eda <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003eba:	23a0      	movs	r3, #160	; 0xa0
 8003ebc:	18fb      	adds	r3, r7, r3
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2280      	movs	r2, #128	; 0x80
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	d009      	beq.n	8003eda <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d01e      	beq.n	8003f0c <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	0010      	movs	r0, r2
 8003ed6:	4798      	blx	r3
    }
    return;
 8003ed8:	e018      	b.n	8003f0c <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003eda:	23a4      	movs	r3, #164	; 0xa4
 8003edc:	18fb      	adds	r3, r7, r3
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2240      	movs	r2, #64	; 0x40
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	d013      	beq.n	8003f0e <HAL_UART_IRQHandler+0x5b2>
 8003ee6:	23a0      	movs	r3, #160	; 0xa0
 8003ee8:	18fb      	adds	r3, r7, r3
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2240      	movs	r2, #64	; 0x40
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d00d      	beq.n	8003f0e <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f000 fed9 	bl	8004cac <UART_EndTransmit_IT>
    return;
 8003efa:	e008      	b.n	8003f0e <HAL_UART_IRQHandler+0x5b2>
      return;
 8003efc:	46c0      	nop			; (mov r8, r8)
 8003efe:	e006      	b.n	8003f0e <HAL_UART_IRQHandler+0x5b2>
    return;
 8003f00:	46c0      	nop			; (mov r8, r8)
 8003f02:	e004      	b.n	8003f0e <HAL_UART_IRQHandler+0x5b2>
      return;
 8003f04:	46c0      	nop			; (mov r8, r8)
 8003f06:	e002      	b.n	8003f0e <HAL_UART_IRQHandler+0x5b2>
      return;
 8003f08:	46c0      	nop			; (mov r8, r8)
 8003f0a:	e000      	b.n	8003f0e <HAL_UART_IRQHandler+0x5b2>
    return;
 8003f0c:	46c0      	nop			; (mov r8, r8)
  }

}
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	b02b      	add	sp, #172	; 0xac
 8003f12:	bd90      	pop	{r4, r7, pc}
 8003f14:	fffffeff 	.word	0xfffffeff
 8003f18:	fffffedf 	.word	0xfffffedf

08003f1c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003f24:	46c0      	nop			; (mov r8, r8)
 8003f26:	46bd      	mov	sp, r7
 8003f28:	b002      	add	sp, #8
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f34:	46c0      	nop			; (mov r8, r8)
 8003f36:	46bd      	mov	sp, r7
 8003f38:	b002      	add	sp, #8
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	000a      	movs	r2, r1
 8003f46:	1cbb      	adds	r3, r7, #2
 8003f48:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b002      	add	sp, #8
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f5c:	231e      	movs	r3, #30
 8003f5e:	18fb      	adds	r3, r7, r3
 8003f60:	2200      	movs	r2, #0
 8003f62:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a8d      	ldr	r2, [pc, #564]	; (80041b8 <UART_SetConfig+0x264>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	0019      	movs	r1, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	4a88      	ldr	r2, [pc, #544]	; (80041bc <UART_SetConfig+0x268>)
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	0019      	movs	r1, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	4a7f      	ldr	r2, [pc, #508]	; (80041c0 <UART_SetConfig+0x26c>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	0019      	movs	r1, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a7b      	ldr	r2, [pc, #492]	; (80041c4 <UART_SetConfig+0x270>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d127      	bne.n	800402a <UART_SetConfig+0xd6>
 8003fda:	4b7b      	ldr	r3, [pc, #492]	; (80041c8 <UART_SetConfig+0x274>)
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	2203      	movs	r2, #3
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	d00d      	beq.n	8004002 <UART_SetConfig+0xae>
 8003fe6:	d81b      	bhi.n	8004020 <UART_SetConfig+0xcc>
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d014      	beq.n	8004016 <UART_SetConfig+0xc2>
 8003fec:	d818      	bhi.n	8004020 <UART_SetConfig+0xcc>
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <UART_SetConfig+0xa4>
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d00a      	beq.n	800400c <UART_SetConfig+0xb8>
 8003ff6:	e013      	b.n	8004020 <UART_SetConfig+0xcc>
 8003ff8:	231f      	movs	r3, #31
 8003ffa:	18fb      	adds	r3, r7, r3
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	701a      	strb	r2, [r3, #0]
 8004000:	e021      	b.n	8004046 <UART_SetConfig+0xf2>
 8004002:	231f      	movs	r3, #31
 8004004:	18fb      	adds	r3, r7, r3
 8004006:	2202      	movs	r2, #2
 8004008:	701a      	strb	r2, [r3, #0]
 800400a:	e01c      	b.n	8004046 <UART_SetConfig+0xf2>
 800400c:	231f      	movs	r3, #31
 800400e:	18fb      	adds	r3, r7, r3
 8004010:	2204      	movs	r2, #4
 8004012:	701a      	strb	r2, [r3, #0]
 8004014:	e017      	b.n	8004046 <UART_SetConfig+0xf2>
 8004016:	231f      	movs	r3, #31
 8004018:	18fb      	adds	r3, r7, r3
 800401a:	2208      	movs	r2, #8
 800401c:	701a      	strb	r2, [r3, #0]
 800401e:	e012      	b.n	8004046 <UART_SetConfig+0xf2>
 8004020:	231f      	movs	r3, #31
 8004022:	18fb      	adds	r3, r7, r3
 8004024:	2210      	movs	r2, #16
 8004026:	701a      	strb	r2, [r3, #0]
 8004028:	e00d      	b.n	8004046 <UART_SetConfig+0xf2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a67      	ldr	r2, [pc, #412]	; (80041cc <UART_SetConfig+0x278>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d104      	bne.n	800403e <UART_SetConfig+0xea>
 8004034:	231f      	movs	r3, #31
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]
 800403c:	e003      	b.n	8004046 <UART_SetConfig+0xf2>
 800403e:	231f      	movs	r3, #31
 8004040:	18fb      	adds	r3, r7, r3
 8004042:	2210      	movs	r2, #16
 8004044:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69da      	ldr	r2, [r3, #28]
 800404a:	2380      	movs	r3, #128	; 0x80
 800404c:	021b      	lsls	r3, r3, #8
 800404e:	429a      	cmp	r2, r3
 8004050:	d15c      	bne.n	800410c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004052:	231f      	movs	r3, #31
 8004054:	18fb      	adds	r3, r7, r3
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2b08      	cmp	r3, #8
 800405a:	d015      	beq.n	8004088 <UART_SetConfig+0x134>
 800405c:	dc18      	bgt.n	8004090 <UART_SetConfig+0x13c>
 800405e:	2b04      	cmp	r3, #4
 8004060:	d00d      	beq.n	800407e <UART_SetConfig+0x12a>
 8004062:	dc15      	bgt.n	8004090 <UART_SetConfig+0x13c>
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <UART_SetConfig+0x11a>
 8004068:	2b02      	cmp	r3, #2
 800406a:	d005      	beq.n	8004078 <UART_SetConfig+0x124>
 800406c:	e010      	b.n	8004090 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800406e:	f7fe faa7 	bl	80025c0 <HAL_RCC_GetPCLK1Freq>
 8004072:	0003      	movs	r3, r0
 8004074:	61bb      	str	r3, [r7, #24]
        break;
 8004076:	e012      	b.n	800409e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004078:	4b55      	ldr	r3, [pc, #340]	; (80041d0 <UART_SetConfig+0x27c>)
 800407a:	61bb      	str	r3, [r7, #24]
        break;
 800407c:	e00f      	b.n	800409e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800407e:	f7fe fa3f 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 8004082:	0003      	movs	r3, r0
 8004084:	61bb      	str	r3, [r7, #24]
        break;
 8004086:	e00a      	b.n	800409e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004088:	2380      	movs	r3, #128	; 0x80
 800408a:	021b      	lsls	r3, r3, #8
 800408c:	61bb      	str	r3, [r7, #24]
        break;
 800408e:	e006      	b.n	800409e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004094:	231e      	movs	r3, #30
 8004096:	18fb      	adds	r3, r7, r3
 8004098:	2201      	movs	r2, #1
 800409a:	701a      	strb	r2, [r3, #0]
        break;
 800409c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d100      	bne.n	80040a6 <UART_SetConfig+0x152>
 80040a4:	e07a      	b.n	800419c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	005a      	lsls	r2, r3, #1
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	085b      	lsrs	r3, r3, #1
 80040b0:	18d2      	adds	r2, r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	0019      	movs	r1, r3
 80040b8:	0010      	movs	r0, r2
 80040ba:	f7fc f825 	bl	8000108 <__udivsi3>
 80040be:	0003      	movs	r3, r0
 80040c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	2b0f      	cmp	r3, #15
 80040c6:	d91c      	bls.n	8004102 <UART_SetConfig+0x1ae>
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	2380      	movs	r3, #128	; 0x80
 80040cc:	025b      	lsls	r3, r3, #9
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d217      	bcs.n	8004102 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	200e      	movs	r0, #14
 80040d8:	183b      	adds	r3, r7, r0
 80040da:	210f      	movs	r1, #15
 80040dc:	438a      	bics	r2, r1
 80040de:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	085b      	lsrs	r3, r3, #1
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	2207      	movs	r2, #7
 80040e8:	4013      	ands	r3, r2
 80040ea:	b299      	uxth	r1, r3
 80040ec:	183b      	adds	r3, r7, r0
 80040ee:	183a      	adds	r2, r7, r0
 80040f0:	8812      	ldrh	r2, [r2, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	183a      	adds	r2, r7, r0
 80040fc:	8812      	ldrh	r2, [r2, #0]
 80040fe:	60da      	str	r2, [r3, #12]
 8004100:	e04c      	b.n	800419c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004102:	231e      	movs	r3, #30
 8004104:	18fb      	adds	r3, r7, r3
 8004106:	2201      	movs	r2, #1
 8004108:	701a      	strb	r2, [r3, #0]
 800410a:	e047      	b.n	800419c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 800410c:	231f      	movs	r3, #31
 800410e:	18fb      	adds	r3, r7, r3
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b08      	cmp	r3, #8
 8004114:	d015      	beq.n	8004142 <UART_SetConfig+0x1ee>
 8004116:	dc18      	bgt.n	800414a <UART_SetConfig+0x1f6>
 8004118:	2b04      	cmp	r3, #4
 800411a:	d00d      	beq.n	8004138 <UART_SetConfig+0x1e4>
 800411c:	dc15      	bgt.n	800414a <UART_SetConfig+0x1f6>
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <UART_SetConfig+0x1d4>
 8004122:	2b02      	cmp	r3, #2
 8004124:	d005      	beq.n	8004132 <UART_SetConfig+0x1de>
 8004126:	e010      	b.n	800414a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004128:	f7fe fa4a 	bl	80025c0 <HAL_RCC_GetPCLK1Freq>
 800412c:	0003      	movs	r3, r0
 800412e:	61bb      	str	r3, [r7, #24]
        break;
 8004130:	e012      	b.n	8004158 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004132:	4b27      	ldr	r3, [pc, #156]	; (80041d0 <UART_SetConfig+0x27c>)
 8004134:	61bb      	str	r3, [r7, #24]
        break;
 8004136:	e00f      	b.n	8004158 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004138:	f7fe f9e2 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 800413c:	0003      	movs	r3, r0
 800413e:	61bb      	str	r3, [r7, #24]
        break;
 8004140:	e00a      	b.n	8004158 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004142:	2380      	movs	r3, #128	; 0x80
 8004144:	021b      	lsls	r3, r3, #8
 8004146:	61bb      	str	r3, [r7, #24]
        break;
 8004148:	e006      	b.n	8004158 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800414a:	2300      	movs	r3, #0
 800414c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800414e:	231e      	movs	r3, #30
 8004150:	18fb      	adds	r3, r7, r3
 8004152:	2201      	movs	r2, #1
 8004154:	701a      	strb	r2, [r3, #0]
        break;
 8004156:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d01e      	beq.n	800419c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	085a      	lsrs	r2, r3, #1
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	18d2      	adds	r2, r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	0019      	movs	r1, r3
 800416e:	0010      	movs	r0, r2
 8004170:	f7fb ffca 	bl	8000108 <__udivsi3>
 8004174:	0003      	movs	r3, r0
 8004176:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	2b0f      	cmp	r3, #15
 800417c:	d90a      	bls.n	8004194 <UART_SetConfig+0x240>
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	2380      	movs	r3, #128	; 0x80
 8004182:	025b      	lsls	r3, r3, #9
 8004184:	429a      	cmp	r2, r3
 8004186:	d205      	bcs.n	8004194 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	b29a      	uxth	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60da      	str	r2, [r3, #12]
 8004192:	e003      	b.n	800419c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004194:	231e      	movs	r3, #30
 8004196:	18fb      	adds	r3, r7, r3
 8004198:	2201      	movs	r2, #1
 800419a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80041a8:	231e      	movs	r3, #30
 80041aa:	18fb      	adds	r3, r7, r3
 80041ac:	781b      	ldrb	r3, [r3, #0]
}
 80041ae:	0018      	movs	r0, r3
 80041b0:	46bd      	mov	sp, r7
 80041b2:	b008      	add	sp, #32
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	ffff69f3 	.word	0xffff69f3
 80041bc:	ffffcfff 	.word	0xffffcfff
 80041c0:	fffff4ff 	.word	0xfffff4ff
 80041c4:	40013800 	.word	0x40013800
 80041c8:	40021000 	.word	0x40021000
 80041cc:	40004400 	.word	0x40004400
 80041d0:	007a1200 	.word	0x007a1200

080041d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	2201      	movs	r2, #1
 80041e2:	4013      	ands	r3, r2
 80041e4:	d00b      	beq.n	80041fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	4a4a      	ldr	r2, [pc, #296]	; (8004318 <UART_AdvFeatureConfig+0x144>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	0019      	movs	r1, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	2202      	movs	r2, #2
 8004204:	4013      	ands	r3, r2
 8004206:	d00b      	beq.n	8004220 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	4a43      	ldr	r2, [pc, #268]	; (800431c <UART_AdvFeatureConfig+0x148>)
 8004210:	4013      	ands	r3, r2
 8004212:	0019      	movs	r1, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	2204      	movs	r2, #4
 8004226:	4013      	ands	r3, r2
 8004228:	d00b      	beq.n	8004242 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	4a3b      	ldr	r2, [pc, #236]	; (8004320 <UART_AdvFeatureConfig+0x14c>)
 8004232:	4013      	ands	r3, r2
 8004234:	0019      	movs	r1, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	2208      	movs	r2, #8
 8004248:	4013      	ands	r3, r2
 800424a:	d00b      	beq.n	8004264 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	4a34      	ldr	r2, [pc, #208]	; (8004324 <UART_AdvFeatureConfig+0x150>)
 8004254:	4013      	ands	r3, r2
 8004256:	0019      	movs	r1, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	2210      	movs	r2, #16
 800426a:	4013      	ands	r3, r2
 800426c:	d00b      	beq.n	8004286 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	4a2c      	ldr	r2, [pc, #176]	; (8004328 <UART_AdvFeatureConfig+0x154>)
 8004276:	4013      	ands	r3, r2
 8004278:	0019      	movs	r1, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	2220      	movs	r2, #32
 800428c:	4013      	ands	r3, r2
 800428e:	d00b      	beq.n	80042a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	4a25      	ldr	r2, [pc, #148]	; (800432c <UART_AdvFeatureConfig+0x158>)
 8004298:	4013      	ands	r3, r2
 800429a:	0019      	movs	r1, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	2240      	movs	r2, #64	; 0x40
 80042ae:	4013      	ands	r3, r2
 80042b0:	d01d      	beq.n	80042ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	4a1d      	ldr	r2, [pc, #116]	; (8004330 <UART_AdvFeatureConfig+0x15c>)
 80042ba:	4013      	ands	r3, r2
 80042bc:	0019      	movs	r1, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ce:	2380      	movs	r3, #128	; 0x80
 80042d0:	035b      	lsls	r3, r3, #13
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d10b      	bne.n	80042ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4a15      	ldr	r2, [pc, #84]	; (8004334 <UART_AdvFeatureConfig+0x160>)
 80042de:	4013      	ands	r3, r2
 80042e0:	0019      	movs	r1, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	2280      	movs	r2, #128	; 0x80
 80042f4:	4013      	ands	r3, r2
 80042f6:	d00b      	beq.n	8004310 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	4a0e      	ldr	r2, [pc, #56]	; (8004338 <UART_AdvFeatureConfig+0x164>)
 8004300:	4013      	ands	r3, r2
 8004302:	0019      	movs	r1, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	605a      	str	r2, [r3, #4]
  }
}
 8004310:	46c0      	nop			; (mov r8, r8)
 8004312:	46bd      	mov	sp, r7
 8004314:	b002      	add	sp, #8
 8004316:	bd80      	pop	{r7, pc}
 8004318:	fffdffff 	.word	0xfffdffff
 800431c:	fffeffff 	.word	0xfffeffff
 8004320:	fffbffff 	.word	0xfffbffff
 8004324:	ffff7fff 	.word	0xffff7fff
 8004328:	ffffefff 	.word	0xffffefff
 800432c:	ffffdfff 	.word	0xffffdfff
 8004330:	ffefffff 	.word	0xffefffff
 8004334:	ff9fffff 	.word	0xff9fffff
 8004338:	fff7ffff 	.word	0xfff7ffff

0800433c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b092      	sub	sp, #72	; 0x48
 8004340:	af02      	add	r7, sp, #8
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2284      	movs	r2, #132	; 0x84
 8004348:	2100      	movs	r1, #0
 800434a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800434c:	f7fc ff1a 	bl	8001184 <HAL_GetTick>
 8004350:	0003      	movs	r3, r0
 8004352:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2208      	movs	r2, #8
 800435c:	4013      	ands	r3, r2
 800435e:	2b08      	cmp	r3, #8
 8004360:	d12c      	bne.n	80043bc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004364:	2280      	movs	r2, #128	; 0x80
 8004366:	0391      	lsls	r1, r2, #14
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	4a46      	ldr	r2, [pc, #280]	; (8004484 <UART_CheckIdleState+0x148>)
 800436c:	9200      	str	r2, [sp, #0]
 800436e:	2200      	movs	r2, #0
 8004370:	f000 f88c 	bl	800448c <UART_WaitOnFlagUntilTimeout>
 8004374:	1e03      	subs	r3, r0, #0
 8004376:	d021      	beq.n	80043bc <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004378:	f3ef 8310 	mrs	r3, PRIMASK
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004380:	63bb      	str	r3, [r7, #56]	; 0x38
 8004382:	2301      	movs	r3, #1
 8004384:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004388:	f383 8810 	msr	PRIMASK, r3
}
 800438c:	46c0      	nop			; (mov r8, r8)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2180      	movs	r1, #128	; 0x80
 800439a:	438a      	bics	r2, r1
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a4:	f383 8810 	msr	PRIMASK, r3
}
 80043a8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2220      	movs	r2, #32
 80043ae:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2278      	movs	r2, #120	; 0x78
 80043b4:	2100      	movs	r1, #0
 80043b6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e05f      	b.n	800447c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2204      	movs	r2, #4
 80043c4:	4013      	ands	r3, r2
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d146      	bne.n	8004458 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043cc:	2280      	movs	r2, #128	; 0x80
 80043ce:	03d1      	lsls	r1, r2, #15
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	4a2c      	ldr	r2, [pc, #176]	; (8004484 <UART_CheckIdleState+0x148>)
 80043d4:	9200      	str	r2, [sp, #0]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f000 f858 	bl	800448c <UART_WaitOnFlagUntilTimeout>
 80043dc:	1e03      	subs	r3, r0, #0
 80043de:	d03b      	beq.n	8004458 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043e0:	f3ef 8310 	mrs	r3, PRIMASK
 80043e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80043e6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043e8:	637b      	str	r3, [r7, #52]	; 0x34
 80043ea:	2301      	movs	r3, #1
 80043ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f383 8810 	msr	PRIMASK, r3
}
 80043f4:	46c0      	nop			; (mov r8, r8)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4921      	ldr	r1, [pc, #132]	; (8004488 <UART_CheckIdleState+0x14c>)
 8004402:	400a      	ands	r2, r1
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004408:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f383 8810 	msr	PRIMASK, r3
}
 8004410:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004412:	f3ef 8310 	mrs	r3, PRIMASK
 8004416:	61bb      	str	r3, [r7, #24]
  return(result);
 8004418:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800441a:	633b      	str	r3, [r7, #48]	; 0x30
 800441c:	2301      	movs	r3, #1
 800441e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f383 8810 	msr	PRIMASK, r3
}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2101      	movs	r1, #1
 8004434:	438a      	bics	r2, r1
 8004436:	609a      	str	r2, [r3, #8]
 8004438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	f383 8810 	msr	PRIMASK, r3
}
 8004442:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2280      	movs	r2, #128	; 0x80
 8004448:	2120      	movs	r1, #32
 800444a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2278      	movs	r2, #120	; 0x78
 8004450:	2100      	movs	r1, #0
 8004452:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e011      	b.n	800447c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2280      	movs	r2, #128	; 0x80
 8004462:	2120      	movs	r1, #32
 8004464:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2278      	movs	r2, #120	; 0x78
 8004476:	2100      	movs	r1, #0
 8004478:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	0018      	movs	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	b010      	add	sp, #64	; 0x40
 8004482:	bd80      	pop	{r7, pc}
 8004484:	01ffffff 	.word	0x01ffffff
 8004488:	fffffedf 	.word	0xfffffedf

0800448c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	603b      	str	r3, [r7, #0]
 8004498:	1dfb      	adds	r3, r7, #7
 800449a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800449c:	e04b      	b.n	8004536 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	3301      	adds	r3, #1
 80044a2:	d048      	beq.n	8004536 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a4:	f7fc fe6e 	bl	8001184 <HAL_GetTick>
 80044a8:	0002      	movs	r2, r0
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d302      	bcc.n	80044ba <UART_WaitOnFlagUntilTimeout+0x2e>
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e04b      	b.n	8004556 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2204      	movs	r2, #4
 80044c6:	4013      	ands	r3, r2
 80044c8:	d035      	beq.n	8004536 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	2208      	movs	r2, #8
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d111      	bne.n	80044fc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2208      	movs	r2, #8
 80044de:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	0018      	movs	r0, r3
 80044e4:	f000 f9b6 	bl	8004854 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2284      	movs	r2, #132	; 0x84
 80044ec:	2108      	movs	r1, #8
 80044ee:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2278      	movs	r2, #120	; 0x78
 80044f4:	2100      	movs	r1, #0
 80044f6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e02c      	b.n	8004556 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	69da      	ldr	r2, [r3, #28]
 8004502:	2380      	movs	r3, #128	; 0x80
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	401a      	ands	r2, r3
 8004508:	2380      	movs	r3, #128	; 0x80
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	429a      	cmp	r2, r3
 800450e:	d112      	bne.n	8004536 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2280      	movs	r2, #128	; 0x80
 8004516:	0112      	lsls	r2, r2, #4
 8004518:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	0018      	movs	r0, r3
 800451e:	f000 f999 	bl	8004854 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2284      	movs	r2, #132	; 0x84
 8004526:	2120      	movs	r1, #32
 8004528:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2278      	movs	r2, #120	; 0x78
 800452e:	2100      	movs	r1, #0
 8004530:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e00f      	b.n	8004556 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	4013      	ands	r3, r2
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	425a      	negs	r2, r3
 8004546:	4153      	adcs	r3, r2
 8004548:	b2db      	uxtb	r3, r3
 800454a:	001a      	movs	r2, r3
 800454c:	1dfb      	adds	r3, r7, #7
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d0a4      	beq.n	800449e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	0018      	movs	r0, r3
 8004558:	46bd      	mov	sp, r7
 800455a:	b004      	add	sp, #16
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b090      	sub	sp, #64	; 0x40
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	1dbb      	adds	r3, r7, #6
 800456c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	1dba      	adds	r2, r7, #6
 8004578:	2158      	movs	r1, #88	; 0x58
 800457a:	8812      	ldrh	r2, [r2, #0]
 800457c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	1dba      	adds	r2, r7, #6
 8004582:	215a      	movs	r1, #90	; 0x5a
 8004584:	8812      	ldrh	r2, [r2, #0]
 8004586:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	2380      	movs	r3, #128	; 0x80
 8004594:	015b      	lsls	r3, r3, #5
 8004596:	429a      	cmp	r2, r3
 8004598:	d10d      	bne.n	80045b6 <UART_Start_Receive_IT+0x56>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d104      	bne.n	80045ac <UART_Start_Receive_IT+0x4c>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	225c      	movs	r2, #92	; 0x5c
 80045a6:	4946      	ldr	r1, [pc, #280]	; (80046c0 <UART_Start_Receive_IT+0x160>)
 80045a8:	5299      	strh	r1, [r3, r2]
 80045aa:	e01a      	b.n	80045e2 <UART_Start_Receive_IT+0x82>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	225c      	movs	r2, #92	; 0x5c
 80045b0:	21ff      	movs	r1, #255	; 0xff
 80045b2:	5299      	strh	r1, [r3, r2]
 80045b4:	e015      	b.n	80045e2 <UART_Start_Receive_IT+0x82>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10d      	bne.n	80045da <UART_Start_Receive_IT+0x7a>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d104      	bne.n	80045d0 <UART_Start_Receive_IT+0x70>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	225c      	movs	r2, #92	; 0x5c
 80045ca:	21ff      	movs	r1, #255	; 0xff
 80045cc:	5299      	strh	r1, [r3, r2]
 80045ce:	e008      	b.n	80045e2 <UART_Start_Receive_IT+0x82>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	225c      	movs	r2, #92	; 0x5c
 80045d4:	217f      	movs	r1, #127	; 0x7f
 80045d6:	5299      	strh	r1, [r3, r2]
 80045d8:	e003      	b.n	80045e2 <UART_Start_Receive_IT+0x82>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	225c      	movs	r2, #92	; 0x5c
 80045de:	2100      	movs	r1, #0
 80045e0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2284      	movs	r2, #132	; 0x84
 80045e6:	2100      	movs	r1, #0
 80045e8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2280      	movs	r2, #128	; 0x80
 80045ee:	2122      	movs	r1, #34	; 0x22
 80045f0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045f2:	f3ef 8310 	mrs	r3, PRIMASK
 80045f6:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80045f8:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045fc:	2301      	movs	r3, #1
 80045fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004602:	f383 8810 	msr	PRIMASK, r3
}
 8004606:	46c0      	nop			; (mov r8, r8)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2101      	movs	r1, #1
 8004614:	430a      	orrs	r2, r1
 8004616:	609a      	str	r2, [r3, #8]
 8004618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800461a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	f383 8810 	msr	PRIMASK, r3
}
 8004622:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	2380      	movs	r3, #128	; 0x80
 800462a:	015b      	lsls	r3, r3, #5
 800462c:	429a      	cmp	r2, r3
 800462e:	d107      	bne.n	8004640 <UART_Start_Receive_IT+0xe0>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d103      	bne.n	8004640 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4a22      	ldr	r2, [pc, #136]	; (80046c4 <UART_Start_Receive_IT+0x164>)
 800463c:	669a      	str	r2, [r3, #104]	; 0x68
 800463e:	e002      	b.n	8004646 <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4a21      	ldr	r2, [pc, #132]	; (80046c8 <UART_Start_Receive_IT+0x168>)
 8004644:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d019      	beq.n	8004682 <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800464e:	f3ef 8310 	mrs	r3, PRIMASK
 8004652:	61fb      	str	r3, [r7, #28]
  return(result);
 8004654:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004656:	637b      	str	r3, [r7, #52]	; 0x34
 8004658:	2301      	movs	r3, #1
 800465a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	f383 8810 	msr	PRIMASK, r3
}
 8004662:	46c0      	nop			; (mov r8, r8)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2190      	movs	r1, #144	; 0x90
 8004670:	0049      	lsls	r1, r1, #1
 8004672:	430a      	orrs	r2, r1
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	f383 8810 	msr	PRIMASK, r3
}
 8004680:	e018      	b.n	80046b4 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004682:	f3ef 8310 	mrs	r3, PRIMASK
 8004686:	613b      	str	r3, [r7, #16]
  return(result);
 8004688:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800468a:	63bb      	str	r3, [r7, #56]	; 0x38
 800468c:	2301      	movs	r3, #1
 800468e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f383 8810 	msr	PRIMASK, r3
}
 8004696:	46c0      	nop			; (mov r8, r8)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2120      	movs	r1, #32
 80046a4:	430a      	orrs	r2, r1
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	f383 8810 	msr	PRIMASK, r3
}
 80046b2:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	0018      	movs	r0, r3
 80046b8:	46bd      	mov	sp, r7
 80046ba:	b010      	add	sp, #64	; 0x40
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	000001ff 	.word	0x000001ff
 80046c4:	08004ebd 	.word	0x08004ebd
 80046c8:	08004d05 	.word	0x08004d05

080046cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b090      	sub	sp, #64	; 0x40
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	1dbb      	adds	r3, r7, #6
 80046d8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	1dba      	adds	r2, r7, #6
 80046e4:	2158      	movs	r1, #88	; 0x58
 80046e6:	8812      	ldrh	r2, [r2, #0]
 80046e8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2284      	movs	r2, #132	; 0x84
 80046ee:	2100      	movs	r1, #0
 80046f0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2280      	movs	r2, #128	; 0x80
 80046f6:	2122      	movs	r1, #34	; 0x22
 80046f8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d028      	beq.n	8004754 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004706:	4a3e      	ldr	r2, [pc, #248]	; (8004800 <UART_Start_Receive_DMA+0x134>)
 8004708:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800470e:	4a3d      	ldr	r2, [pc, #244]	; (8004804 <UART_Start_Receive_DMA+0x138>)
 8004710:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004716:	4a3c      	ldr	r2, [pc, #240]	; (8004808 <UART_Start_Receive_DMA+0x13c>)
 8004718:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800471e:	2200      	movs	r2, #0
 8004720:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3324      	adds	r3, #36	; 0x24
 800472c:	0019      	movs	r1, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004732:	001a      	movs	r2, r3
 8004734:	1dbb      	adds	r3, r7, #6
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	f7fc fecf 	bl	80014da <HAL_DMA_Start_IT>
 800473c:	1e03      	subs	r3, r0, #0
 800473e:	d009      	beq.n	8004754 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2284      	movs	r2, #132	; 0x84
 8004744:	2110      	movs	r1, #16
 8004746:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2280      	movs	r2, #128	; 0x80
 800474c:	2120      	movs	r1, #32
 800474e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e050      	b.n	80047f6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d019      	beq.n	8004790 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800475c:	f3ef 8310 	mrs	r3, PRIMASK
 8004760:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004762:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004764:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004766:	2301      	movs	r3, #1
 8004768:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800476a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476c:	f383 8810 	msr	PRIMASK, r3
}
 8004770:	46c0      	nop			; (mov r8, r8)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2180      	movs	r1, #128	; 0x80
 800477e:	0049      	lsls	r1, r1, #1
 8004780:	430a      	orrs	r2, r1
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004786:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478a:	f383 8810 	msr	PRIMASK, r3
}
 800478e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004790:	f3ef 8310 	mrs	r3, PRIMASK
 8004794:	613b      	str	r3, [r7, #16]
  return(result);
 8004796:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004798:	63bb      	str	r3, [r7, #56]	; 0x38
 800479a:	2301      	movs	r3, #1
 800479c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f383 8810 	msr	PRIMASK, r3
}
 80047a4:	46c0      	nop			; (mov r8, r8)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2101      	movs	r1, #1
 80047b2:	430a      	orrs	r2, r1
 80047b4:	609a      	str	r2, [r3, #8]
 80047b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	f383 8810 	msr	PRIMASK, r3
}
 80047c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047c2:	f3ef 8310 	mrs	r3, PRIMASK
 80047c6:	61fb      	str	r3, [r7, #28]
  return(result);
 80047c8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ca:	637b      	str	r3, [r7, #52]	; 0x34
 80047cc:	2301      	movs	r3, #1
 80047ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	f383 8810 	msr	PRIMASK, r3
}
 80047d6:	46c0      	nop			; (mov r8, r8)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2140      	movs	r1, #64	; 0x40
 80047e4:	430a      	orrs	r2, r1
 80047e6:	609a      	str	r2, [r3, #8]
 80047e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	f383 8810 	msr	PRIMASK, r3
}
 80047f2:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	0018      	movs	r0, r3
 80047f8:	46bd      	mov	sp, r7
 80047fa:	b010      	add	sp, #64	; 0x40
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	0800491d 	.word	0x0800491d
 8004804:	08004a49 	.word	0x08004a49
 8004808:	08004a8b 	.word	0x08004a8b

0800480c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004814:	f3ef 8310 	mrs	r3, PRIMASK
 8004818:	60bb      	str	r3, [r7, #8]
  return(result);
 800481a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800481c:	617b      	str	r3, [r7, #20]
 800481e:	2301      	movs	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f383 8810 	msr	PRIMASK, r3
}
 8004828:	46c0      	nop			; (mov r8, r8)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	21c0      	movs	r1, #192	; 0xc0
 8004836:	438a      	bics	r2, r1
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f383 8810 	msr	PRIMASK, r3
}
 8004844:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2220      	movs	r2, #32
 800484a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800484c:	46c0      	nop			; (mov r8, r8)
 800484e:	46bd      	mov	sp, r7
 8004850:	b006      	add	sp, #24
 8004852:	bd80      	pop	{r7, pc}

08004854 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08e      	sub	sp, #56	; 0x38
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800485c:	f3ef 8310 	mrs	r3, PRIMASK
 8004860:	617b      	str	r3, [r7, #20]
  return(result);
 8004862:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004864:	637b      	str	r3, [r7, #52]	; 0x34
 8004866:	2301      	movs	r3, #1
 8004868:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	f383 8810 	msr	PRIMASK, r3
}
 8004870:	46c0      	nop			; (mov r8, r8)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4926      	ldr	r1, [pc, #152]	; (8004918 <UART_EndRxTransfer+0xc4>)
 800487e:	400a      	ands	r2, r1
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004884:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	f383 8810 	msr	PRIMASK, r3
}
 800488c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800488e:	f3ef 8310 	mrs	r3, PRIMASK
 8004892:	623b      	str	r3, [r7, #32]
  return(result);
 8004894:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004896:	633b      	str	r3, [r7, #48]	; 0x30
 8004898:	2301      	movs	r3, #1
 800489a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	f383 8810 	msr	PRIMASK, r3
}
 80048a2:	46c0      	nop			; (mov r8, r8)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2101      	movs	r1, #1
 80048b0:	438a      	bics	r2, r1
 80048b2:	609a      	str	r2, [r3, #8]
 80048b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ba:	f383 8810 	msr	PRIMASK, r3
}
 80048be:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d118      	bne.n	80048fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048c8:	f3ef 8310 	mrs	r3, PRIMASK
 80048cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80048ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048d2:	2301      	movs	r3, #1
 80048d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f383 8810 	msr	PRIMASK, r3
}
 80048dc:	46c0      	nop			; (mov r8, r8)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2110      	movs	r1, #16
 80048ea:	438a      	bics	r2, r1
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f383 8810 	msr	PRIMASK, r3
}
 80048f8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2280      	movs	r2, #128	; 0x80
 80048fe:	2120      	movs	r1, #32
 8004900:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800490e:	46c0      	nop			; (mov r8, r8)
 8004910:	46bd      	mov	sp, r7
 8004912:	b00e      	add	sp, #56	; 0x38
 8004914:	bd80      	pop	{r7, pc}
 8004916:	46c0      	nop			; (mov r8, r8)
 8004918:	fffffedf 	.word	0xfffffedf

0800491c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b094      	sub	sp, #80	; 0x50
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	2b20      	cmp	r3, #32
 8004930:	d06f      	beq.n	8004a12 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8004932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004934:	225a      	movs	r2, #90	; 0x5a
 8004936:	2100      	movs	r1, #0
 8004938:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800493a:	f3ef 8310 	mrs	r3, PRIMASK
 800493e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004940:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004942:	64bb      	str	r3, [r7, #72]	; 0x48
 8004944:	2301      	movs	r3, #1
 8004946:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f383 8810 	msr	PRIMASK, r3
}
 800494e:	46c0      	nop			; (mov r8, r8)
 8004950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	493a      	ldr	r1, [pc, #232]	; (8004a44 <UART_DMAReceiveCplt+0x128>)
 800495c:	400a      	ands	r2, r1
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004962:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	f383 8810 	msr	PRIMASK, r3
}
 800496a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800496c:	f3ef 8310 	mrs	r3, PRIMASK
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004974:	647b      	str	r3, [r7, #68]	; 0x44
 8004976:	2301      	movs	r3, #1
 8004978:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800497a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497c:	f383 8810 	msr	PRIMASK, r3
}
 8004980:	46c0      	nop			; (mov r8, r8)
 8004982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2101      	movs	r1, #1
 800498e:	438a      	bics	r2, r1
 8004990:	609a      	str	r2, [r3, #8]
 8004992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004994:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004998:	f383 8810 	msr	PRIMASK, r3
}
 800499c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800499e:	f3ef 8310 	mrs	r3, PRIMASK
 80049a2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80049a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049a6:	643b      	str	r3, [r7, #64]	; 0x40
 80049a8:	2301      	movs	r3, #1
 80049aa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ae:	f383 8810 	msr	PRIMASK, r3
}
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2140      	movs	r1, #64	; 0x40
 80049c0:	438a      	bics	r2, r1
 80049c2:	609a      	str	r2, [r3, #8]
 80049c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ca:	f383 8810 	msr	PRIMASK, r3
}
 80049ce:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80049d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049d2:	2280      	movs	r2, #128	; 0x80
 80049d4:	2120      	movs	r1, #32
 80049d6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d118      	bne.n	8004a12 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049e0:	f3ef 8310 	mrs	r3, PRIMASK
 80049e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80049e6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ea:	2301      	movs	r3, #1
 80049ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f383 8810 	msr	PRIMASK, r3
}
 80049f4:	46c0      	nop			; (mov r8, r8)
 80049f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2110      	movs	r1, #16
 8004a02:	438a      	bics	r2, r1
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f383 8810 	msr	PRIMASK, r3
}
 8004a10:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a14:	2200      	movs	r2, #0
 8004a16:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d108      	bne.n	8004a32 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a22:	2258      	movs	r2, #88	; 0x58
 8004a24:	5a9a      	ldrh	r2, [r3, r2]
 8004a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a28:	0011      	movs	r1, r2
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	f7ff fa86 	bl	8003f3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a30:	e003      	b.n	8004a3a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a34:	0018      	movs	r0, r3
 8004a36:	f7fb fbf3 	bl	8000220 <HAL_UART_RxCpltCallback>
}
 8004a3a:	46c0      	nop			; (mov r8, r8)
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b014      	add	sp, #80	; 0x50
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	fffffeff 	.word	0xfffffeff

08004a48 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d10a      	bne.n	8004a7a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2258      	movs	r2, #88	; 0x58
 8004a68:	5a9b      	ldrh	r3, [r3, r2]
 8004a6a:	085b      	lsrs	r3, r3, #1
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	0011      	movs	r1, r2
 8004a72:	0018      	movs	r0, r3
 8004a74:	f7ff fa62 	bl	8003f3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a78:	e003      	b.n	8004a82 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f7ff fa4d 	bl	8003f1c <HAL_UART_RxHalfCpltCallback>
}
 8004a82:	46c0      	nop			; (mov r8, r8)
 8004a84:	46bd      	mov	sp, r7
 8004a86:	b004      	add	sp, #16
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b086      	sub	sp, #24
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a9c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2280      	movs	r2, #128	; 0x80
 8004aa2:	589b      	ldr	r3, [r3, r2]
 8004aa4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2280      	movs	r2, #128	; 0x80
 8004aae:	4013      	ands	r3, r2
 8004ab0:	2b80      	cmp	r3, #128	; 0x80
 8004ab2:	d10a      	bne.n	8004aca <UART_DMAError+0x40>
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	2b21      	cmp	r3, #33	; 0x21
 8004ab8:	d107      	bne.n	8004aca <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2252      	movs	r2, #82	; 0x52
 8004abe:	2100      	movs	r1, #0
 8004ac0:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	f7ff fea1 	bl	800480c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2240      	movs	r2, #64	; 0x40
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	2b40      	cmp	r3, #64	; 0x40
 8004ad6:	d10a      	bne.n	8004aee <UART_DMAError+0x64>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b22      	cmp	r3, #34	; 0x22
 8004adc:	d107      	bne.n	8004aee <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	225a      	movs	r2, #90	; 0x5a
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f7ff feb3 	bl	8004854 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2284      	movs	r2, #132	; 0x84
 8004af2:	589b      	ldr	r3, [r3, r2]
 8004af4:	2210      	movs	r2, #16
 8004af6:	431a      	orrs	r2, r3
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	2184      	movs	r1, #132	; 0x84
 8004afc:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	0018      	movs	r0, r3
 8004b02:	f7ff fa13 	bl	8003f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b06:	46c0      	nop			; (mov r8, r8)
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	b006      	add	sp, #24
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b084      	sub	sp, #16
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	225a      	movs	r2, #90	; 0x5a
 8004b20:	2100      	movs	r1, #0
 8004b22:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2252      	movs	r2, #82	; 0x52
 8004b28:	2100      	movs	r1, #0
 8004b2a:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	0018      	movs	r0, r3
 8004b30:	f7ff f9fc 	bl	8003f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b34:	46c0      	nop			; (mov r8, r8)
 8004b36:	46bd      	mov	sp, r7
 8004b38:	b004      	add	sp, #16
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b08a      	sub	sp, #40	; 0x28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b48:	2b21      	cmp	r3, #33	; 0x21
 8004b4a:	d14d      	bne.n	8004be8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2252      	movs	r2, #82	; 0x52
 8004b50:	5a9b      	ldrh	r3, [r3, r2]
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d132      	bne.n	8004bbe <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b58:	f3ef 8310 	mrs	r3, PRIMASK
 8004b5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b5e:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
 8004b62:	2301      	movs	r3, #1
 8004b64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f383 8810 	msr	PRIMASK, r3
}
 8004b6c:	46c0      	nop			; (mov r8, r8)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2180      	movs	r1, #128	; 0x80
 8004b7a:	438a      	bics	r2, r1
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f383 8810 	msr	PRIMASK, r3
}
 8004b88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b8e:	617b      	str	r3, [r7, #20]
  return(result);
 8004b90:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b92:	623b      	str	r3, [r7, #32]
 8004b94:	2301      	movs	r3, #1
 8004b96:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	f383 8810 	msr	PRIMASK, r3
}
 8004b9e:	46c0      	nop			; (mov r8, r8)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2140      	movs	r1, #64	; 0x40
 8004bac:	430a      	orrs	r2, r1
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f383 8810 	msr	PRIMASK, r3
}
 8004bba:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004bbc:	e014      	b.n	8004be8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc2:	781a      	ldrb	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	b292      	uxth	r2, r2
 8004bca:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2252      	movs	r2, #82	; 0x52
 8004bda:	5a9b      	ldrh	r3, [r3, r2]
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b299      	uxth	r1, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2252      	movs	r2, #82	; 0x52
 8004be6:	5299      	strh	r1, [r3, r2]
}
 8004be8:	46c0      	nop			; (mov r8, r8)
 8004bea:	46bd      	mov	sp, r7
 8004bec:	b00a      	add	sp, #40	; 0x28
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08c      	sub	sp, #48	; 0x30
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bfc:	2b21      	cmp	r3, #33	; 0x21
 8004bfe:	d151      	bne.n	8004ca4 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2252      	movs	r2, #82	; 0x52
 8004c04:	5a9b      	ldrh	r3, [r3, r2]
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d132      	bne.n	8004c72 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c0c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c10:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c12:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004c14:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c16:	2301      	movs	r3, #1
 8004c18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f383 8810 	msr	PRIMASK, r3
}
 8004c20:	46c0      	nop			; (mov r8, r8)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2180      	movs	r1, #128	; 0x80
 8004c2e:	438a      	bics	r2, r1
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f383 8810 	msr	PRIMASK, r3
}
 8004c3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c42:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c44:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c46:	627b      	str	r3, [r7, #36]	; 0x24
 8004c48:	2301      	movs	r3, #1
 8004c4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	f383 8810 	msr	PRIMASK, r3
}
 8004c52:	46c0      	nop			; (mov r8, r8)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2140      	movs	r1, #64	; 0x40
 8004c60:	430a      	orrs	r2, r1
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	f383 8810 	msr	PRIMASK, r3
}
 8004c6e:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004c70:	e018      	b.n	8004ca4 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c76:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7a:	881a      	ldrh	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	05d2      	lsls	r2, r2, #23
 8004c82:	0dd2      	lsrs	r2, r2, #23
 8004c84:	b292      	uxth	r2, r2
 8004c86:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c8c:	1c9a      	adds	r2, r3, #2
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2252      	movs	r2, #82	; 0x52
 8004c96:	5a9b      	ldrh	r3, [r3, r2]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	b299      	uxth	r1, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2252      	movs	r2, #82	; 0x52
 8004ca2:	5299      	strh	r1, [r3, r2]
}
 8004ca4:	46c0      	nop			; (mov r8, r8)
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	b00c      	add	sp, #48	; 0x30
 8004caa:	bd80      	pop	{r7, pc}

08004cac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cb4:	f3ef 8310 	mrs	r3, PRIMASK
 8004cb8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004cba:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cbc:	617b      	str	r3, [r7, #20]
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f383 8810 	msr	PRIMASK, r3
}
 8004cc8:	46c0      	nop			; (mov r8, r8)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2140      	movs	r1, #64	; 0x40
 8004cd6:	438a      	bics	r2, r1
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f383 8810 	msr	PRIMASK, r3
}
 8004ce4:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f7fb fb81 	bl	80003fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	b006      	add	sp, #24
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b094      	sub	sp, #80	; 0x50
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004d0c:	204e      	movs	r0, #78	; 0x4e
 8004d0e:	183b      	adds	r3, r7, r0
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	215c      	movs	r1, #92	; 0x5c
 8004d14:	5a52      	ldrh	r2, [r2, r1]
 8004d16:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2280      	movs	r2, #128	; 0x80
 8004d1c:	589b      	ldr	r3, [r3, r2]
 8004d1e:	2b22      	cmp	r3, #34	; 0x22
 8004d20:	d000      	beq.n	8004d24 <UART_RxISR_8BIT+0x20>
 8004d22:	e0ba      	b.n	8004e9a <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	214c      	movs	r1, #76	; 0x4c
 8004d2a:	187b      	adds	r3, r7, r1
 8004d2c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004d2e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d30:	187b      	adds	r3, r7, r1
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	183b      	adds	r3, r7, r0
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	b2d9      	uxtb	r1, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d40:	400a      	ands	r2, r1
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	225a      	movs	r2, #90	; 0x5a
 8004d54:	5a9b      	ldrh	r3, [r3, r2]
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	b299      	uxth	r1, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	225a      	movs	r2, #90	; 0x5a
 8004d60:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	225a      	movs	r2, #90	; 0x5a
 8004d66:	5a9b      	ldrh	r3, [r3, r2]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d000      	beq.n	8004d70 <UART_RxISR_8BIT+0x6c>
 8004d6e:	e09c      	b.n	8004eaa <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d70:	f3ef 8310 	mrs	r3, PRIMASK
 8004d74:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d78:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	f383 8810 	msr	PRIMASK, r3
}
 8004d84:	46c0      	nop			; (mov r8, r8)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4948      	ldr	r1, [pc, #288]	; (8004eb4 <UART_RxISR_8BIT+0x1b0>)
 8004d92:	400a      	ands	r2, r1
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9c:	f383 8810 	msr	PRIMASK, r3
}
 8004da0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004da2:	f3ef 8310 	mrs	r3, PRIMASK
 8004da6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004daa:	647b      	str	r3, [r7, #68]	; 0x44
 8004dac:	2301      	movs	r3, #1
 8004dae:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db2:	f383 8810 	msr	PRIMASK, r3
}
 8004db6:	46c0      	nop			; (mov r8, r8)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	438a      	bics	r2, r1
 8004dc6:	609a      	str	r2, [r3, #8]
 8004dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dce:	f383 8810 	msr	PRIMASK, r3
}
 8004dd2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2280      	movs	r2, #128	; 0x80
 8004dd8:	2120      	movs	r1, #32
 8004dda:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	2380      	movs	r3, #128	; 0x80
 8004df0:	041b      	lsls	r3, r3, #16
 8004df2:	4013      	ands	r3, r2
 8004df4:	d018      	beq.n	8004e28 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004df6:	f3ef 8310 	mrs	r3, PRIMASK
 8004dfa:	61bb      	str	r3, [r7, #24]
  return(result);
 8004dfc:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004dfe:	643b      	str	r3, [r7, #64]	; 0x40
 8004e00:	2301      	movs	r3, #1
 8004e02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	f383 8810 	msr	PRIMASK, r3
}
 8004e0a:	46c0      	nop			; (mov r8, r8)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4928      	ldr	r1, [pc, #160]	; (8004eb8 <UART_RxISR_8BIT+0x1b4>)
 8004e18:	400a      	ands	r2, r1
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e1e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	f383 8810 	msr	PRIMASK, r3
}
 8004e26:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d12f      	bne.n	8004e90 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e36:	f3ef 8310 	mrs	r3, PRIMASK
 8004e3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e3c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e40:	2301      	movs	r3, #1
 8004e42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	f383 8810 	msr	PRIMASK, r3
}
 8004e4a:	46c0      	nop			; (mov r8, r8)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2110      	movs	r1, #16
 8004e58:	438a      	bics	r2, r1
 8004e5a:	601a      	str	r2, [r3, #0]
 8004e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f383 8810 	msr	PRIMASK, r3
}
 8004e66:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	2210      	movs	r2, #16
 8004e70:	4013      	ands	r3, r2
 8004e72:	2b10      	cmp	r3, #16
 8004e74:	d103      	bne.n	8004e7e <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2210      	movs	r2, #16
 8004e7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2258      	movs	r2, #88	; 0x58
 8004e82:	5a9a      	ldrh	r2, [r3, r2]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	0011      	movs	r1, r2
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f7ff f857 	bl	8003f3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e8e:	e00c      	b.n	8004eaa <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	0018      	movs	r0, r3
 8004e94:	f7fb f9c4 	bl	8000220 <HAL_UART_RxCpltCallback>
}
 8004e98:	e007      	b.n	8004eaa <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	699a      	ldr	r2, [r3, #24]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2108      	movs	r1, #8
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	619a      	str	r2, [r3, #24]
}
 8004eaa:	46c0      	nop			; (mov r8, r8)
 8004eac:	46bd      	mov	sp, r7
 8004eae:	b014      	add	sp, #80	; 0x50
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	46c0      	nop			; (mov r8, r8)
 8004eb4:	fffffedf 	.word	0xfffffedf
 8004eb8:	fbffffff 	.word	0xfbffffff

08004ebc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b094      	sub	sp, #80	; 0x50
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ec4:	204e      	movs	r0, #78	; 0x4e
 8004ec6:	183b      	adds	r3, r7, r0
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	215c      	movs	r1, #92	; 0x5c
 8004ecc:	5a52      	ldrh	r2, [r2, r1]
 8004ece:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2280      	movs	r2, #128	; 0x80
 8004ed4:	589b      	ldr	r3, [r3, r2]
 8004ed6:	2b22      	cmp	r3, #34	; 0x22
 8004ed8:	d000      	beq.n	8004edc <UART_RxISR_16BIT+0x20>
 8004eda:	e0ba      	b.n	8005052 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	214c      	movs	r1, #76	; 0x4c
 8004ee2:	187b      	adds	r3, r7, r1
 8004ee4:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004ee6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eec:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004eee:	187b      	adds	r3, r7, r1
 8004ef0:	183a      	adds	r2, r7, r0
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	8812      	ldrh	r2, [r2, #0]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004efc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f02:	1c9a      	adds	r2, r3, #2
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	225a      	movs	r2, #90	; 0x5a
 8004f0c:	5a9b      	ldrh	r3, [r3, r2]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	3b01      	subs	r3, #1
 8004f12:	b299      	uxth	r1, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	225a      	movs	r2, #90	; 0x5a
 8004f18:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	225a      	movs	r2, #90	; 0x5a
 8004f1e:	5a9b      	ldrh	r3, [r3, r2]
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d000      	beq.n	8004f28 <UART_RxISR_16BIT+0x6c>
 8004f26:	e09c      	b.n	8005062 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f28:	f3ef 8310 	mrs	r3, PRIMASK
 8004f2c:	623b      	str	r3, [r7, #32]
  return(result);
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f30:	647b      	str	r3, [r7, #68]	; 0x44
 8004f32:	2301      	movs	r3, #1
 8004f34:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	f383 8810 	msr	PRIMASK, r3
}
 8004f3c:	46c0      	nop			; (mov r8, r8)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4948      	ldr	r1, [pc, #288]	; (800506c <UART_RxISR_16BIT+0x1b0>)
 8004f4a:	400a      	ands	r2, r1
 8004f4c:	601a      	str	r2, [r3, #0]
 8004f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f50:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	f383 8810 	msr	PRIMASK, r3
}
 8004f58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f62:	643b      	str	r3, [r7, #64]	; 0x40
 8004f64:	2301      	movs	r3, #1
 8004f66:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6a:	f383 8810 	msr	PRIMASK, r3
}
 8004f6e:	46c0      	nop			; (mov r8, r8)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689a      	ldr	r2, [r3, #8]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	438a      	bics	r2, r1
 8004f7e:	609a      	str	r2, [r3, #8]
 8004f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f82:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f86:	f383 8810 	msr	PRIMASK, r3
}
 8004f8a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2280      	movs	r2, #128	; 0x80
 8004f90:	2120      	movs	r1, #32
 8004f92:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	2380      	movs	r3, #128	; 0x80
 8004fa8:	041b      	lsls	r3, r3, #16
 8004faa:	4013      	ands	r3, r2
 8004fac:	d018      	beq.n	8004fe0 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fae:	f3ef 8310 	mrs	r3, PRIMASK
 8004fb2:	617b      	str	r3, [r7, #20]
  return(result);
 8004fb4:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fb8:	2301      	movs	r3, #1
 8004fba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	f383 8810 	msr	PRIMASK, r3
}
 8004fc2:	46c0      	nop			; (mov r8, r8)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4928      	ldr	r1, [pc, #160]	; (8005070 <UART_RxISR_16BIT+0x1b4>)
 8004fd0:	400a      	ands	r2, r1
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fd6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	f383 8810 	msr	PRIMASK, r3
}
 8004fde:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d12f      	bne.n	8005048 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fee:	f3ef 8310 	mrs	r3, PRIMASK
 8004ff2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ff4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f383 8810 	msr	PRIMASK, r3
}
 8005002:	46c0      	nop			; (mov r8, r8)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2110      	movs	r1, #16
 8005010:	438a      	bics	r2, r1
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005016:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f383 8810 	msr	PRIMASK, r3
}
 800501e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	2210      	movs	r2, #16
 8005028:	4013      	ands	r3, r2
 800502a:	2b10      	cmp	r3, #16
 800502c:	d103      	bne.n	8005036 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2210      	movs	r2, #16
 8005034:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2258      	movs	r2, #88	; 0x58
 800503a:	5a9a      	ldrh	r2, [r3, r2]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	0011      	movs	r1, r2
 8005040:	0018      	movs	r0, r3
 8005042:	f7fe ff7b 	bl	8003f3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005046:	e00c      	b.n	8005062 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	0018      	movs	r0, r3
 800504c:	f7fb f8e8 	bl	8000220 <HAL_UART_RxCpltCallback>
}
 8005050:	e007      	b.n	8005062 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699a      	ldr	r2, [r3, #24]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2108      	movs	r1, #8
 800505e:	430a      	orrs	r2, r1
 8005060:	619a      	str	r2, [r3, #24]
}
 8005062:	46c0      	nop			; (mov r8, r8)
 8005064:	46bd      	mov	sp, r7
 8005066:	b014      	add	sp, #80	; 0x50
 8005068:	bd80      	pop	{r7, pc}
 800506a:	46c0      	nop			; (mov r8, r8)
 800506c:	fffffedf 	.word	0xfffffedf
 8005070:	fbffffff 	.word	0xfbffffff

08005074 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800507c:	46c0      	nop			; (mov r8, r8)
 800507e:	46bd      	mov	sp, r7
 8005080:	b002      	add	sp, #8
 8005082:	bd80      	pop	{r7, pc}

08005084 <malloc>:
 8005084:	b510      	push	{r4, lr}
 8005086:	4b03      	ldr	r3, [pc, #12]	; (8005094 <malloc+0x10>)
 8005088:	0001      	movs	r1, r0
 800508a:	6818      	ldr	r0, [r3, #0]
 800508c:	f000 f830 	bl	80050f0 <_malloc_r>
 8005090:	bd10      	pop	{r4, pc}
 8005092:	46c0      	nop			; (mov r8, r8)
 8005094:	20000060 	.word	0x20000060

08005098 <free>:
 8005098:	b510      	push	{r4, lr}
 800509a:	4b03      	ldr	r3, [pc, #12]	; (80050a8 <free+0x10>)
 800509c:	0001      	movs	r1, r0
 800509e:	6818      	ldr	r0, [r3, #0]
 80050a0:	f000 f908 	bl	80052b4 <_free_r>
 80050a4:	bd10      	pop	{r4, pc}
 80050a6:	46c0      	nop			; (mov r8, r8)
 80050a8:	20000060 	.word	0x20000060

080050ac <sbrk_aligned>:
 80050ac:	b570      	push	{r4, r5, r6, lr}
 80050ae:	4e0f      	ldr	r6, [pc, #60]	; (80050ec <sbrk_aligned+0x40>)
 80050b0:	000d      	movs	r5, r1
 80050b2:	6831      	ldr	r1, [r6, #0]
 80050b4:	0004      	movs	r4, r0
 80050b6:	2900      	cmp	r1, #0
 80050b8:	d102      	bne.n	80050c0 <sbrk_aligned+0x14>
 80050ba:	f000 f8b3 	bl	8005224 <_sbrk_r>
 80050be:	6030      	str	r0, [r6, #0]
 80050c0:	0029      	movs	r1, r5
 80050c2:	0020      	movs	r0, r4
 80050c4:	f000 f8ae 	bl	8005224 <_sbrk_r>
 80050c8:	1c43      	adds	r3, r0, #1
 80050ca:	d00a      	beq.n	80050e2 <sbrk_aligned+0x36>
 80050cc:	2303      	movs	r3, #3
 80050ce:	1cc5      	adds	r5, r0, #3
 80050d0:	439d      	bics	r5, r3
 80050d2:	42a8      	cmp	r0, r5
 80050d4:	d007      	beq.n	80050e6 <sbrk_aligned+0x3a>
 80050d6:	1a29      	subs	r1, r5, r0
 80050d8:	0020      	movs	r0, r4
 80050da:	f000 f8a3 	bl	8005224 <_sbrk_r>
 80050de:	3001      	adds	r0, #1
 80050e0:	d101      	bne.n	80050e6 <sbrk_aligned+0x3a>
 80050e2:	2501      	movs	r5, #1
 80050e4:	426d      	negs	r5, r5
 80050e6:	0028      	movs	r0, r5
 80050e8:	bd70      	pop	{r4, r5, r6, pc}
 80050ea:	46c0      	nop			; (mov r8, r8)
 80050ec:	20000724 	.word	0x20000724

080050f0 <_malloc_r>:
 80050f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050f2:	2203      	movs	r2, #3
 80050f4:	1ccb      	adds	r3, r1, #3
 80050f6:	4393      	bics	r3, r2
 80050f8:	3308      	adds	r3, #8
 80050fa:	0006      	movs	r6, r0
 80050fc:	001f      	movs	r7, r3
 80050fe:	2b0c      	cmp	r3, #12
 8005100:	d238      	bcs.n	8005174 <_malloc_r+0x84>
 8005102:	270c      	movs	r7, #12
 8005104:	42b9      	cmp	r1, r7
 8005106:	d837      	bhi.n	8005178 <_malloc_r+0x88>
 8005108:	0030      	movs	r0, r6
 800510a:	f000 f873 	bl	80051f4 <__malloc_lock>
 800510e:	4b38      	ldr	r3, [pc, #224]	; (80051f0 <_malloc_r+0x100>)
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	001c      	movs	r4, r3
 8005116:	2c00      	cmp	r4, #0
 8005118:	d133      	bne.n	8005182 <_malloc_r+0x92>
 800511a:	0039      	movs	r1, r7
 800511c:	0030      	movs	r0, r6
 800511e:	f7ff ffc5 	bl	80050ac <sbrk_aligned>
 8005122:	0004      	movs	r4, r0
 8005124:	1c43      	adds	r3, r0, #1
 8005126:	d15e      	bne.n	80051e6 <_malloc_r+0xf6>
 8005128:	9b00      	ldr	r3, [sp, #0]
 800512a:	681c      	ldr	r4, [r3, #0]
 800512c:	0025      	movs	r5, r4
 800512e:	2d00      	cmp	r5, #0
 8005130:	d14e      	bne.n	80051d0 <_malloc_r+0xe0>
 8005132:	2c00      	cmp	r4, #0
 8005134:	d051      	beq.n	80051da <_malloc_r+0xea>
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	0029      	movs	r1, r5
 800513a:	18e3      	adds	r3, r4, r3
 800513c:	0030      	movs	r0, r6
 800513e:	9301      	str	r3, [sp, #4]
 8005140:	f000 f870 	bl	8005224 <_sbrk_r>
 8005144:	9b01      	ldr	r3, [sp, #4]
 8005146:	4283      	cmp	r3, r0
 8005148:	d147      	bne.n	80051da <_malloc_r+0xea>
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	0030      	movs	r0, r6
 800514e:	1aff      	subs	r7, r7, r3
 8005150:	0039      	movs	r1, r7
 8005152:	f7ff ffab 	bl	80050ac <sbrk_aligned>
 8005156:	3001      	adds	r0, #1
 8005158:	d03f      	beq.n	80051da <_malloc_r+0xea>
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	19db      	adds	r3, r3, r7
 800515e:	6023      	str	r3, [r4, #0]
 8005160:	9b00      	ldr	r3, [sp, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d040      	beq.n	80051ea <_malloc_r+0xfa>
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	42a2      	cmp	r2, r4
 800516c:	d133      	bne.n	80051d6 <_malloc_r+0xe6>
 800516e:	2200      	movs	r2, #0
 8005170:	605a      	str	r2, [r3, #4]
 8005172:	e014      	b.n	800519e <_malloc_r+0xae>
 8005174:	2b00      	cmp	r3, #0
 8005176:	dac5      	bge.n	8005104 <_malloc_r+0x14>
 8005178:	230c      	movs	r3, #12
 800517a:	2500      	movs	r5, #0
 800517c:	6033      	str	r3, [r6, #0]
 800517e:	0028      	movs	r0, r5
 8005180:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005182:	6821      	ldr	r1, [r4, #0]
 8005184:	1bc9      	subs	r1, r1, r7
 8005186:	d420      	bmi.n	80051ca <_malloc_r+0xda>
 8005188:	290b      	cmp	r1, #11
 800518a:	d918      	bls.n	80051be <_malloc_r+0xce>
 800518c:	19e2      	adds	r2, r4, r7
 800518e:	6027      	str	r7, [r4, #0]
 8005190:	42a3      	cmp	r3, r4
 8005192:	d112      	bne.n	80051ba <_malloc_r+0xca>
 8005194:	9b00      	ldr	r3, [sp, #0]
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	6863      	ldr	r3, [r4, #4]
 800519a:	6011      	str	r1, [r2, #0]
 800519c:	6053      	str	r3, [r2, #4]
 800519e:	0030      	movs	r0, r6
 80051a0:	0025      	movs	r5, r4
 80051a2:	f000 f82f 	bl	8005204 <__malloc_unlock>
 80051a6:	2207      	movs	r2, #7
 80051a8:	350b      	adds	r5, #11
 80051aa:	1d23      	adds	r3, r4, #4
 80051ac:	4395      	bics	r5, r2
 80051ae:	1aea      	subs	r2, r5, r3
 80051b0:	429d      	cmp	r5, r3
 80051b2:	d0e4      	beq.n	800517e <_malloc_r+0x8e>
 80051b4:	1b5b      	subs	r3, r3, r5
 80051b6:	50a3      	str	r3, [r4, r2]
 80051b8:	e7e1      	b.n	800517e <_malloc_r+0x8e>
 80051ba:	605a      	str	r2, [r3, #4]
 80051bc:	e7ec      	b.n	8005198 <_malloc_r+0xa8>
 80051be:	6862      	ldr	r2, [r4, #4]
 80051c0:	42a3      	cmp	r3, r4
 80051c2:	d1d5      	bne.n	8005170 <_malloc_r+0x80>
 80051c4:	9b00      	ldr	r3, [sp, #0]
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	e7e9      	b.n	800519e <_malloc_r+0xae>
 80051ca:	0023      	movs	r3, r4
 80051cc:	6864      	ldr	r4, [r4, #4]
 80051ce:	e7a2      	b.n	8005116 <_malloc_r+0x26>
 80051d0:	002c      	movs	r4, r5
 80051d2:	686d      	ldr	r5, [r5, #4]
 80051d4:	e7ab      	b.n	800512e <_malloc_r+0x3e>
 80051d6:	0013      	movs	r3, r2
 80051d8:	e7c4      	b.n	8005164 <_malloc_r+0x74>
 80051da:	230c      	movs	r3, #12
 80051dc:	0030      	movs	r0, r6
 80051de:	6033      	str	r3, [r6, #0]
 80051e0:	f000 f810 	bl	8005204 <__malloc_unlock>
 80051e4:	e7cb      	b.n	800517e <_malloc_r+0x8e>
 80051e6:	6027      	str	r7, [r4, #0]
 80051e8:	e7d9      	b.n	800519e <_malloc_r+0xae>
 80051ea:	605b      	str	r3, [r3, #4]
 80051ec:	deff      	udf	#255	; 0xff
 80051ee:	46c0      	nop			; (mov r8, r8)
 80051f0:	20000720 	.word	0x20000720

080051f4 <__malloc_lock>:
 80051f4:	b510      	push	{r4, lr}
 80051f6:	4802      	ldr	r0, [pc, #8]	; (8005200 <__malloc_lock+0xc>)
 80051f8:	f000 f850 	bl	800529c <__retarget_lock_acquire_recursive>
 80051fc:	bd10      	pop	{r4, pc}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	20000864 	.word	0x20000864

08005204 <__malloc_unlock>:
 8005204:	b510      	push	{r4, lr}
 8005206:	4802      	ldr	r0, [pc, #8]	; (8005210 <__malloc_unlock+0xc>)
 8005208:	f000 f849 	bl	800529e <__retarget_lock_release_recursive>
 800520c:	bd10      	pop	{r4, pc}
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	20000864 	.word	0x20000864

08005214 <memset>:
 8005214:	0003      	movs	r3, r0
 8005216:	1882      	adds	r2, r0, r2
 8005218:	4293      	cmp	r3, r2
 800521a:	d100      	bne.n	800521e <memset+0xa>
 800521c:	4770      	bx	lr
 800521e:	7019      	strb	r1, [r3, #0]
 8005220:	3301      	adds	r3, #1
 8005222:	e7f9      	b.n	8005218 <memset+0x4>

08005224 <_sbrk_r>:
 8005224:	2300      	movs	r3, #0
 8005226:	b570      	push	{r4, r5, r6, lr}
 8005228:	4d06      	ldr	r5, [pc, #24]	; (8005244 <_sbrk_r+0x20>)
 800522a:	0004      	movs	r4, r0
 800522c:	0008      	movs	r0, r1
 800522e:	602b      	str	r3, [r5, #0]
 8005230:	f7fb fee8 	bl	8001004 <_sbrk>
 8005234:	1c43      	adds	r3, r0, #1
 8005236:	d103      	bne.n	8005240 <_sbrk_r+0x1c>
 8005238:	682b      	ldr	r3, [r5, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d000      	beq.n	8005240 <_sbrk_r+0x1c>
 800523e:	6023      	str	r3, [r4, #0]
 8005240:	bd70      	pop	{r4, r5, r6, pc}
 8005242:	46c0      	nop			; (mov r8, r8)
 8005244:	20000860 	.word	0x20000860

08005248 <__errno>:
 8005248:	4b01      	ldr	r3, [pc, #4]	; (8005250 <__errno+0x8>)
 800524a:	6818      	ldr	r0, [r3, #0]
 800524c:	4770      	bx	lr
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	20000060 	.word	0x20000060

08005254 <__libc_init_array>:
 8005254:	b570      	push	{r4, r5, r6, lr}
 8005256:	2600      	movs	r6, #0
 8005258:	4c0c      	ldr	r4, [pc, #48]	; (800528c <__libc_init_array+0x38>)
 800525a:	4d0d      	ldr	r5, [pc, #52]	; (8005290 <__libc_init_array+0x3c>)
 800525c:	1b64      	subs	r4, r4, r5
 800525e:	10a4      	asrs	r4, r4, #2
 8005260:	42a6      	cmp	r6, r4
 8005262:	d109      	bne.n	8005278 <__libc_init_array+0x24>
 8005264:	2600      	movs	r6, #0
 8005266:	f000 f86f 	bl	8005348 <_init>
 800526a:	4c0a      	ldr	r4, [pc, #40]	; (8005294 <__libc_init_array+0x40>)
 800526c:	4d0a      	ldr	r5, [pc, #40]	; (8005298 <__libc_init_array+0x44>)
 800526e:	1b64      	subs	r4, r4, r5
 8005270:	10a4      	asrs	r4, r4, #2
 8005272:	42a6      	cmp	r6, r4
 8005274:	d105      	bne.n	8005282 <__libc_init_array+0x2e>
 8005276:	bd70      	pop	{r4, r5, r6, pc}
 8005278:	00b3      	lsls	r3, r6, #2
 800527a:	58eb      	ldr	r3, [r5, r3]
 800527c:	4798      	blx	r3
 800527e:	3601      	adds	r6, #1
 8005280:	e7ee      	b.n	8005260 <__libc_init_array+0xc>
 8005282:	00b3      	lsls	r3, r6, #2
 8005284:	58eb      	ldr	r3, [r5, r3]
 8005286:	4798      	blx	r3
 8005288:	3601      	adds	r6, #1
 800528a:	e7f2      	b.n	8005272 <__libc_init_array+0x1e>
 800528c:	080053ac 	.word	0x080053ac
 8005290:	080053ac 	.word	0x080053ac
 8005294:	080053b0 	.word	0x080053b0
 8005298:	080053ac 	.word	0x080053ac

0800529c <__retarget_lock_acquire_recursive>:
 800529c:	4770      	bx	lr

0800529e <__retarget_lock_release_recursive>:
 800529e:	4770      	bx	lr

080052a0 <memcpy>:
 80052a0:	2300      	movs	r3, #0
 80052a2:	b510      	push	{r4, lr}
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d100      	bne.n	80052aa <memcpy+0xa>
 80052a8:	bd10      	pop	{r4, pc}
 80052aa:	5ccc      	ldrb	r4, [r1, r3]
 80052ac:	54c4      	strb	r4, [r0, r3]
 80052ae:	3301      	adds	r3, #1
 80052b0:	e7f8      	b.n	80052a4 <memcpy+0x4>
	...

080052b4 <_free_r>:
 80052b4:	b570      	push	{r4, r5, r6, lr}
 80052b6:	0005      	movs	r5, r0
 80052b8:	2900      	cmp	r1, #0
 80052ba:	d010      	beq.n	80052de <_free_r+0x2a>
 80052bc:	1f0c      	subs	r4, r1, #4
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	da00      	bge.n	80052c6 <_free_r+0x12>
 80052c4:	18e4      	adds	r4, r4, r3
 80052c6:	0028      	movs	r0, r5
 80052c8:	f7ff ff94 	bl	80051f4 <__malloc_lock>
 80052cc:	4a1d      	ldr	r2, [pc, #116]	; (8005344 <_free_r+0x90>)
 80052ce:	6813      	ldr	r3, [r2, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d105      	bne.n	80052e0 <_free_r+0x2c>
 80052d4:	6063      	str	r3, [r4, #4]
 80052d6:	6014      	str	r4, [r2, #0]
 80052d8:	0028      	movs	r0, r5
 80052da:	f7ff ff93 	bl	8005204 <__malloc_unlock>
 80052de:	bd70      	pop	{r4, r5, r6, pc}
 80052e0:	42a3      	cmp	r3, r4
 80052e2:	d908      	bls.n	80052f6 <_free_r+0x42>
 80052e4:	6820      	ldr	r0, [r4, #0]
 80052e6:	1821      	adds	r1, r4, r0
 80052e8:	428b      	cmp	r3, r1
 80052ea:	d1f3      	bne.n	80052d4 <_free_r+0x20>
 80052ec:	6819      	ldr	r1, [r3, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	1809      	adds	r1, r1, r0
 80052f2:	6021      	str	r1, [r4, #0]
 80052f4:	e7ee      	b.n	80052d4 <_free_r+0x20>
 80052f6:	001a      	movs	r2, r3
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <_free_r+0x4e>
 80052fe:	42a3      	cmp	r3, r4
 8005300:	d9f9      	bls.n	80052f6 <_free_r+0x42>
 8005302:	6811      	ldr	r1, [r2, #0]
 8005304:	1850      	adds	r0, r2, r1
 8005306:	42a0      	cmp	r0, r4
 8005308:	d10b      	bne.n	8005322 <_free_r+0x6e>
 800530a:	6820      	ldr	r0, [r4, #0]
 800530c:	1809      	adds	r1, r1, r0
 800530e:	1850      	adds	r0, r2, r1
 8005310:	6011      	str	r1, [r2, #0]
 8005312:	4283      	cmp	r3, r0
 8005314:	d1e0      	bne.n	80052d8 <_free_r+0x24>
 8005316:	6818      	ldr	r0, [r3, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	1841      	adds	r1, r0, r1
 800531c:	6011      	str	r1, [r2, #0]
 800531e:	6053      	str	r3, [r2, #4]
 8005320:	e7da      	b.n	80052d8 <_free_r+0x24>
 8005322:	42a0      	cmp	r0, r4
 8005324:	d902      	bls.n	800532c <_free_r+0x78>
 8005326:	230c      	movs	r3, #12
 8005328:	602b      	str	r3, [r5, #0]
 800532a:	e7d5      	b.n	80052d8 <_free_r+0x24>
 800532c:	6820      	ldr	r0, [r4, #0]
 800532e:	1821      	adds	r1, r4, r0
 8005330:	428b      	cmp	r3, r1
 8005332:	d103      	bne.n	800533c <_free_r+0x88>
 8005334:	6819      	ldr	r1, [r3, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	1809      	adds	r1, r1, r0
 800533a:	6021      	str	r1, [r4, #0]
 800533c:	6063      	str	r3, [r4, #4]
 800533e:	6054      	str	r4, [r2, #4]
 8005340:	e7ca      	b.n	80052d8 <_free_r+0x24>
 8005342:	46c0      	nop			; (mov r8, r8)
 8005344:	20000720 	.word	0x20000720

08005348 <_init>:
 8005348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534a:	46c0      	nop			; (mov r8, r8)
 800534c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800534e:	bc08      	pop	{r3}
 8005350:	469e      	mov	lr, r3
 8005352:	4770      	bx	lr

08005354 <_fini>:
 8005354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535a:	bc08      	pop	{r3}
 800535c:	469e      	mov	lr, r3
 800535e:	4770      	bx	lr
