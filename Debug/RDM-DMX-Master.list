
RDM-DMX-Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000303c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080030fc  080030fc  000130fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003134  08003134  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003134  08003134  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003134  08003134  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003134  08003134  00013134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003138  08003138  00013138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800313c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  2000005c  08003198  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08003198  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bad2  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019dd  00000000  00000000  0002bb99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b58  00000000  00000000  0002d578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008f1  00000000  00000000  0002e0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001dc0  00000000  00000000  0002e9c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ddd4  00000000  00000000  00030781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000712c6  00000000  00000000  0003e555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ca4  00000000  00000000  000af81c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000b24c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080030e4 	.word	0x080030e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	080030e4 	.word	0x080030e4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b08c      	sub	sp, #48	; 0x30
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fcbb 	bl	8000ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f8d3 	bl	80003d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 fa13 	bl	8000658 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000232:	f000 f9ad 	bl	8000590 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000236:	f000 f9dd 	bl	80005f4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800023a:	f000 f92d 	bl	8000498 <MX_TIM2_Init>
  MX_TIM17_Init();
 800023e:	f000 f97f 	bl	8000540 <MX_TIM17_Init>

  HAL_TIM_Base_Init(&htim17);
 8000242:	4b5f      	ldr	r3, [pc, #380]	; (80003c0 <main+0x1a0>)
 8000244:	0018      	movs	r0, r3
 8000246:	f001 fd5d 	bl	8001d04 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim17);
 800024a:	4b5d      	ldr	r3, [pc, #372]	; (80003c0 <main+0x1a0>)
 800024c:	0018      	movs	r0, r3
 800024e:	f001 fda9 	bl	8001da4 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN 2 */
	#define GUI_addr &huart1
	#define LIGHTING_addr &huart2

	uint8_t* receiveBuffer = NULL;
 8000252:	2300      	movs	r3, #0
 8000254:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t dataReceived;

	uint16_t receivedIndex = 0;
 8000256:	232a      	movs	r3, #42	; 0x2a
 8000258:	18fb      	adds	r3, r7, r3
 800025a:	2200      	movs	r2, #0
 800025c:	801a      	strh	r2, [r3, #0]
	uint8_t GUI_receiveFinished = 0;
 800025e:	2329      	movs	r3, #41	; 0x29
 8000260:	18fb      	adds	r3, r7, r3
 8000262:	2200      	movs	r2, #0
 8000264:	701a      	strb	r2, [r3, #0]
	uint8_t GUI_receive = 1;
 8000266:	2328      	movs	r3, #40	; 0x28
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	2201      	movs	r2, #1
 800026c:	701a      	strb	r2, [r3, #0]

	uint32_t currentTime;

	unsigned char viewDMX[20];

	DMX_UART_Init();
 800026e:	f000 f9c1 	bl	80005f4 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(GUI_receive == 1){
 8000272:	2328      	movs	r3, #40	; 0x28
 8000274:	18fb      	adds	r3, r7, r3
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2b01      	cmp	r3, #1
 800027a:	d14e      	bne.n	800031a <main+0xfa>
		/* Recebe dados da GUI */
		if(HAL_UART_Receive (GUI_addr, &dataReceived, 1, 200) == HAL_OK){
 800027c:	251b      	movs	r5, #27
 800027e:	1979      	adds	r1, r7, r5
 8000280:	4850      	ldr	r0, [pc, #320]	; (80003c4 <main+0x1a4>)
 8000282:	23c8      	movs	r3, #200	; 0xc8
 8000284:	2201      	movs	r2, #1
 8000286:	f002 f955 	bl	8002534 <HAL_UART_Receive>
 800028a:	1e03      	subs	r3, r0, #0
 800028c:	d11d      	bne.n	80002ca <main+0xaa>

			uint8_t* tempBuffer = (uint8_t*)realloc(receiveBuffer, (receivedIndex + 1) * sizeof(uint8_t)); /* Buffer temporario para alocacao dinamica*/
 800028e:	242a      	movs	r4, #42	; 0x2a
 8000290:	193b      	adds	r3, r7, r4
 8000292:	881b      	ldrh	r3, [r3, #0]
 8000294:	3301      	adds	r3, #1
 8000296:	001a      	movs	r2, r3
 8000298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800029a:	0011      	movs	r1, r2
 800029c:	0018      	movs	r0, r3
 800029e:	f002 fe45 	bl	8002f2c <realloc>
 80002a2:	0003      	movs	r3, r0
 80002a4:	61fb      	str	r3, [r7, #28]
			receiveBuffer = tempBuffer;
 80002a6:	69fb      	ldr	r3, [r7, #28]
 80002a8:	62fb      	str	r3, [r7, #44]	; 0x2c
			receiveBuffer[receivedIndex++] = dataReceived;
 80002aa:	193b      	adds	r3, r7, r4
 80002ac:	881b      	ldrh	r3, [r3, #0]
 80002ae:	193a      	adds	r2, r7, r4
 80002b0:	1c59      	adds	r1, r3, #1
 80002b2:	8011      	strh	r1, [r2, #0]
 80002b4:	001a      	movs	r2, r3
 80002b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002b8:	189b      	adds	r3, r3, r2
 80002ba:	197a      	adds	r2, r7, r5
 80002bc:	7812      	ldrb	r2, [r2, #0]
 80002be:	701a      	strb	r2, [r3, #0]
			GUI_receiveFinished = 1; /* Avisa que quando acabar o recebimento de bytes, pode enviar para a luminaria*/
 80002c0:	2329      	movs	r3, #41	; 0x29
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	2201      	movs	r2, #1
 80002c6:	701a      	strb	r2, [r3, #0]
 80002c8:	e7d3      	b.n	8000272 <main+0x52>

		} else if(GUI_receiveFinished == 1){
 80002ca:	2329      	movs	r3, #41	; 0x29
 80002cc:	18fb      	adds	r3, r7, r3
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d1ce      	bne.n	8000272 <main+0x52>
			/* Se acabou o recebimento, envia para a luminária e reseta os parametros de recebimento*/
			DMX_send_command(receiveBuffer, receivedIndex);
 80002d4:	232a      	movs	r3, #42	; 0x2a
 80002d6:	18fb      	adds	r3, r7, r3
 80002d8:	881a      	ldrh	r2, [r3, #0]
 80002da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002dc:	0011      	movs	r1, r2
 80002de:	0018      	movs	r0, r3
 80002e0:	f000 fa30 	bl	8000744 <DMX_send_command>

			if(receiveBuffer[0] == 0xCC){	// Se for um frame DMX, a proxima iteracao sera a espera de um comando vindo da luminaria
 80002e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2bcc      	cmp	r3, #204	; 0xcc
 80002ea:	d107      	bne.n	80002fc <main+0xdc>
				GUI_receive = 0; /* Entra para a secao que espera o recebimento de dados da luminaria e envia para a GUI*/
 80002ec:	2328      	movs	r3, #40	; 0x28
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	2200      	movs	r2, #0
 80002f2:	701a      	strb	r2, [r3, #0]
				currentTime = __HAL_TIM_GET_COUNTER(&htim2); /* Inicia timer para definir rota de retorno para este modo*/
 80002f4:	4b34      	ldr	r3, [pc, #208]	; (80003c8 <main+0x1a8>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002fa:	627b      	str	r3, [r7, #36]	; 0x24

			}

			GUI_receiveFinished = 0;
 80002fc:	2329      	movs	r3, #41	; 0x29
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	2200      	movs	r2, #0
 8000302:	701a      	strb	r2, [r3, #0]
			receivedIndex = 0;
 8000304:	232a      	movs	r3, #42	; 0x2a
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	2200      	movs	r2, #0
 800030a:	801a      	strh	r2, [r3, #0]
			free(receiveBuffer);
 800030c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800030e:	0018      	movs	r0, r3
 8000310:	f002 fd4e 	bl	8002db0 <free>
			receiveBuffer = NULL;
 8000314:	2300      	movs	r3, #0
 8000316:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000318:	e7ab      	b.n	8000272 <main+0x52>
		}
	} else{
		/* Recebe dados da luminaria */
		if(HAL_UART_Receive (LIGHTING_addr, &dataReceived, 1, 20) == HAL_OK){
 800031a:	251b      	movs	r5, #27
 800031c:	1979      	adds	r1, r7, r5
 800031e:	482b      	ldr	r0, [pc, #172]	; (80003cc <main+0x1ac>)
 8000320:	2314      	movs	r3, #20
 8000322:	2201      	movs	r2, #1
 8000324:	f002 f906 	bl	8002534 <HAL_UART_Receive>
 8000328:	1e03      	subs	r3, r0, #0
 800032a:	d11d      	bne.n	8000368 <main+0x148>
			uint8_t* tempBuffer = (uint8_t*)realloc(receiveBuffer, (receivedIndex + 1) * sizeof(uint8_t)); /* Buffer temporario para alocacao dinamica*/
 800032c:	242a      	movs	r4, #42	; 0x2a
 800032e:	193b      	adds	r3, r7, r4
 8000330:	881b      	ldrh	r3, [r3, #0]
 8000332:	3301      	adds	r3, #1
 8000334:	001a      	movs	r2, r3
 8000336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000338:	0011      	movs	r1, r2
 800033a:	0018      	movs	r0, r3
 800033c:	f002 fdf6 	bl	8002f2c <realloc>
 8000340:	0003      	movs	r3, r0
 8000342:	623b      	str	r3, [r7, #32]
			receiveBuffer = tempBuffer;
 8000344:	6a3b      	ldr	r3, [r7, #32]
 8000346:	62fb      	str	r3, [r7, #44]	; 0x2c
			receiveBuffer[receivedIndex++] = dataReceived;
 8000348:	193b      	adds	r3, r7, r4
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	193a      	adds	r2, r7, r4
 800034e:	1c59      	adds	r1, r3, #1
 8000350:	8011      	strh	r1, [r2, #0]
 8000352:	001a      	movs	r2, r3
 8000354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000356:	189b      	adds	r3, r3, r2
 8000358:	197a      	adds	r2, r7, r5
 800035a:	7812      	ldrb	r2, [r2, #0]
 800035c:	701a      	strb	r2, [r3, #0]
			GUI_receiveFinished = 1; /* Avisa que quando acabar o recebimento de bytes, pode enviar para a luminaria*/
 800035e:	2329      	movs	r3, #41	; 0x29
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	2201      	movs	r2, #1
 8000364:	701a      	strb	r2, [r3, #0]
 8000366:	e784      	b.n	8000272 <main+0x52>

		} else if(GUI_receiveFinished == 1){
 8000368:	2429      	movs	r4, #41	; 0x29
 800036a:	193b      	adds	r3, r7, r4
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	2b01      	cmp	r3, #1
 8000370:	d118      	bne.n	80003a4 <main+0x184>
			/* Se acabou o recebimento, envia para a GUI e reseta os parametros de recebimento*/
			HAL_UART_Transmit(GUI_addr, receiveBuffer, receivedIndex, TIMEOUT);
 8000372:	252a      	movs	r5, #42	; 0x2a
 8000374:	197b      	adds	r3, r7, r5
 8000376:	881a      	ldrh	r2, [r3, #0]
 8000378:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800037a:	4812      	ldr	r0, [pc, #72]	; (80003c4 <main+0x1a4>)
 800037c:	2364      	movs	r3, #100	; 0x64
 800037e:	f002 f839 	bl	80023f4 <HAL_UART_Transmit>

			GUI_receiveFinished = 0;
 8000382:	193b      	adds	r3, r7, r4
 8000384:	2200      	movs	r2, #0
 8000386:	701a      	strb	r2, [r3, #0]
			receivedIndex = 0;
 8000388:	197b      	adds	r3, r7, r5
 800038a:	2200      	movs	r2, #0
 800038c:	801a      	strh	r2, [r3, #0]
			GUI_receive = 1; /* Volta para o recebimento de dados da GUI e envio para a luminaria*/
 800038e:	2328      	movs	r3, #40	; 0x28
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	2201      	movs	r2, #1
 8000394:	701a      	strb	r2, [r3, #0]
			free(receiveBuffer);
 8000396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000398:	0018      	movs	r0, r3
 800039a:	f002 fd09 	bl	8002db0 <free>
			receiveBuffer = NULL;
 800039e:	2300      	movs	r3, #0
 80003a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80003a2:	e766      	b.n	8000272 <main+0x52>

		} else if((currentTime - __HAL_TIM_GET_COUNTER(&htim2)) > 50000){
 80003a4:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <main+0x1a8>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003ac:	1ad3      	subs	r3, r2, r3
 80003ae:	4a08      	ldr	r2, [pc, #32]	; (80003d0 <main+0x1b0>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d800      	bhi.n	80003b6 <main+0x196>
 80003b4:	e75d      	b.n	8000272 <main+0x52>
			GUI_receive = 1; /* Volta para o recebimento de dados da GUI e envio para a luminaria*/
 80003b6:	2328      	movs	r3, #40	; 0x28
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	2201      	movs	r2, #1
 80003bc:	701a      	strb	r2, [r3, #0]
	if(GUI_receive == 1){
 80003be:	e758      	b.n	8000272 <main+0x52>
 80003c0:	200000c0 	.word	0x200000c0
 80003c4:	20000108 	.word	0x20000108
 80003c8:	20000078 	.word	0x20000078
 80003cc:	20000190 	.word	0x20000190
 80003d0:	0000c350 	.word	0x0000c350

080003d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d4:	b590      	push	{r4, r7, lr}
 80003d6:	b097      	sub	sp, #92	; 0x5c
 80003d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003da:	2428      	movs	r4, #40	; 0x28
 80003dc:	193b      	adds	r3, r7, r4
 80003de:	0018      	movs	r0, r3
 80003e0:	2330      	movs	r3, #48	; 0x30
 80003e2:	001a      	movs	r2, r3
 80003e4:	2100      	movs	r1, #0
 80003e6:	f002 fdda 	bl	8002f9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ea:	2318      	movs	r3, #24
 80003ec:	18fb      	adds	r3, r7, r3
 80003ee:	0018      	movs	r0, r3
 80003f0:	2310      	movs	r3, #16
 80003f2:	001a      	movs	r2, r3
 80003f4:	2100      	movs	r1, #0
 80003f6:	f002 fdd2 	bl	8002f9e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	0018      	movs	r0, r3
 80003fe:	2314      	movs	r3, #20
 8000400:	001a      	movs	r2, r3
 8000402:	2100      	movs	r1, #0
 8000404:	f002 fdcb 	bl	8002f9e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000408:	0021      	movs	r1, r4
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2202      	movs	r2, #2
 800040e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000410:	187b      	adds	r3, r7, r1
 8000412:	2201      	movs	r2, #1
 8000414:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000416:	187b      	adds	r3, r7, r1
 8000418:	2210      	movs	r2, #16
 800041a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800041c:	187b      	adds	r3, r7, r1
 800041e:	2202      	movs	r2, #2
 8000420:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000422:	187b      	adds	r3, r7, r1
 8000424:	2200      	movs	r2, #0
 8000426:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000428:	187b      	adds	r3, r7, r1
 800042a:	22a0      	movs	r2, #160	; 0xa0
 800042c:	0392      	lsls	r2, r2, #14
 800042e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000430:	187b      	adds	r3, r7, r1
 8000432:	2200      	movs	r2, #0
 8000434:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000436:	187b      	adds	r3, r7, r1
 8000438:	0018      	movs	r0, r3
 800043a:	f000 ff27 	bl	800128c <HAL_RCC_OscConfig>
 800043e:	1e03      	subs	r3, r0, #0
 8000440:	d001      	beq.n	8000446 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000442:	f000 fa13 	bl	800086c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000446:	2118      	movs	r1, #24
 8000448:	187b      	adds	r3, r7, r1
 800044a:	2207      	movs	r2, #7
 800044c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044e:	187b      	adds	r3, r7, r1
 8000450:	2202      	movs	r2, #2
 8000452:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000454:	187b      	adds	r3, r7, r1
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800045a:	187b      	adds	r3, r7, r1
 800045c:	2200      	movs	r2, #0
 800045e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000460:	187b      	adds	r3, r7, r1
 8000462:	2101      	movs	r1, #1
 8000464:	0018      	movs	r0, r3
 8000466:	f001 fa2b 	bl	80018c0 <HAL_RCC_ClockConfig>
 800046a:	1e03      	subs	r3, r0, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800046e:	f000 f9fd 	bl	800086c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	2201      	movs	r2, #1
 8000476:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	0018      	movs	r0, r3
 8000482:	f001 fb61 	bl	8001b48 <HAL_RCCEx_PeriphCLKConfig>
 8000486:	1e03      	subs	r3, r0, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800048a:	f000 f9ef 	bl	800086c <Error_Handler>
  }
}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	b017      	add	sp, #92	; 0x5c
 8000494:	bd90      	pop	{r4, r7, pc}
	...

08000498 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b086      	sub	sp, #24
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800049e:	2308      	movs	r3, #8
 80004a0:	18fb      	adds	r3, r7, r3
 80004a2:	0018      	movs	r0, r3
 80004a4:	2310      	movs	r3, #16
 80004a6:	001a      	movs	r2, r3
 80004a8:	2100      	movs	r1, #0
 80004aa:	f002 fd78 	bl	8002f9e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ae:	003b      	movs	r3, r7
 80004b0:	0018      	movs	r0, r3
 80004b2:	2308      	movs	r3, #8
 80004b4:	001a      	movs	r2, r3
 80004b6:	2100      	movs	r1, #0
 80004b8:	f002 fd71 	bl	8002f9e <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004bc:	4b1f      	ldr	r3, [pc, #124]	; (800053c <MX_TIM2_Init+0xa4>)
 80004be:	2280      	movs	r2, #128	; 0x80
 80004c0:	05d2      	lsls	r2, r2, #23
 80004c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 80004c4:	4b1d      	ldr	r3, [pc, #116]	; (800053c <MX_TIM2_Init+0xa4>)
 80004c6:	222f      	movs	r2, #47	; 0x2f
 80004c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ca:	4b1c      	ldr	r3, [pc, #112]	; (800053c <MX_TIM2_Init+0xa4>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80004d0:	4b1a      	ldr	r3, [pc, #104]	; (800053c <MX_TIM2_Init+0xa4>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	4252      	negs	r2, r2
 80004d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d8:	4b18      	ldr	r3, [pc, #96]	; (800053c <MX_TIM2_Init+0xa4>)
 80004da:	2200      	movs	r2, #0
 80004dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004de:	4b17      	ldr	r3, [pc, #92]	; (800053c <MX_TIM2_Init+0xa4>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004e4:	4b15      	ldr	r3, [pc, #84]	; (800053c <MX_TIM2_Init+0xa4>)
 80004e6:	0018      	movs	r0, r3
 80004e8:	f001 fc0c 	bl	8001d04 <HAL_TIM_Base_Init>
 80004ec:	1e03      	subs	r3, r0, #0
 80004ee:	d001      	beq.n	80004f4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80004f0:	f000 f9bc 	bl	800086c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004f4:	2108      	movs	r1, #8
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2280      	movs	r2, #128	; 0x80
 80004fa:	0152      	lsls	r2, r2, #5
 80004fc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004fe:	187a      	adds	r2, r7, r1
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <MX_TIM2_Init+0xa4>)
 8000502:	0011      	movs	r1, r2
 8000504:	0018      	movs	r0, r3
 8000506:	f001 fc97 	bl	8001e38 <HAL_TIM_ConfigClockSource>
 800050a:	1e03      	subs	r3, r0, #0
 800050c:	d001      	beq.n	8000512 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800050e:	f000 f9ad 	bl	800086c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000512:	003b      	movs	r3, r7
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000518:	003b      	movs	r3, r7
 800051a:	2200      	movs	r2, #0
 800051c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800051e:	003a      	movs	r2, r7
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <MX_TIM2_Init+0xa4>)
 8000522:	0011      	movs	r1, r2
 8000524:	0018      	movs	r0, r3
 8000526:	f001 fe75 	bl	8002214 <HAL_TIMEx_MasterConfigSynchronization>
 800052a:	1e03      	subs	r3, r0, #0
 800052c:	d001      	beq.n	8000532 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800052e:	f000 f99d 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	b006      	add	sp, #24
 8000538:	bd80      	pop	{r7, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	20000078 	.word	0x20000078

08000540 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <MX_TIM17_Init+0x44>)
 8000546:	4a10      	ldr	r2, [pc, #64]	; (8000588 <MX_TIM17_Init+0x48>)
 8000548:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48-1;
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <MX_TIM17_Init+0x44>)
 800054c:	222f      	movs	r2, #47	; 0x2f
 800054e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <MX_TIM17_Init+0x44>)
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 0xffff;
 8000556:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <MX_TIM17_Init+0x44>)
 8000558:	4a0c      	ldr	r2, [pc, #48]	; (800058c <MX_TIM17_Init+0x4c>)
 800055a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800055c:	4b09      	ldr	r3, [pc, #36]	; (8000584 <MX_TIM17_Init+0x44>)
 800055e:	2200      	movs	r2, #0
 8000560:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <MX_TIM17_Init+0x44>)
 8000564:	2200      	movs	r2, #0
 8000566:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <MX_TIM17_Init+0x44>)
 800056a:	2200      	movs	r2, #0
 800056c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800056e:	4b05      	ldr	r3, [pc, #20]	; (8000584 <MX_TIM17_Init+0x44>)
 8000570:	0018      	movs	r0, r3
 8000572:	f001 fbc7 	bl	8001d04 <HAL_TIM_Base_Init>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 800057a:	f000 f977 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	200000c0 	.word	0x200000c0
 8000588:	40014800 	.word	0x40014800
 800058c:	0000ffff 	.word	0x0000ffff

08000590 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000594:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <MX_USART1_UART_Init+0x58>)
 8000596:	4a15      	ldr	r2, [pc, #84]	; (80005ec <MX_USART1_UART_Init+0x5c>)
 8000598:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 800059a:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <MX_USART1_UART_Init+0x58>)
 800059c:	4a14      	ldr	r2, [pc, #80]	; (80005f0 <MX_USART1_UART_Init+0x60>)
 800059e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005a0:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <MX_USART1_UART_Init+0x58>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80005a6:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <MX_USART1_UART_Init+0x58>)
 80005a8:	2280      	movs	r2, #128	; 0x80
 80005aa:	0192      	lsls	r2, r2, #6
 80005ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <MX_USART1_UART_Init+0x58>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <MX_USART1_UART_Init+0x58>)
 80005b6:	220c      	movs	r2, #12
 80005b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <MX_USART1_UART_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <MX_USART1_UART_Init+0x58>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <MX_USART1_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <MX_USART1_UART_Init+0x58>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005d2:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <MX_USART1_UART_Init+0x58>)
 80005d4:	0018      	movs	r0, r3
 80005d6:	f001 fe7b 	bl	80022d0 <HAL_UART_Init>
 80005da:	1e03      	subs	r3, r0, #0
 80005dc:	d001      	beq.n	80005e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80005de:	f000 f945 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000108 	.word	0x20000108
 80005ec:	40013800 	.word	0x40013800
 80005f0:	0003d090 	.word	0x0003d090

080005f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_USART2_UART_Init+0x58>)
 80005fa:	4a15      	ldr	r2, [pc, #84]	; (8000650 <MX_USART2_UART_Init+0x5c>)
 80005fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 250000;
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000600:	4a14      	ldr	r2, [pc, #80]	; (8000654 <MX_USART2_UART_Init+0x60>)
 8000602:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <MX_USART2_UART_Init+0x58>)
 800060c:	2280      	movs	r2, #128	; 0x80
 800060e:	0192      	lsls	r2, r2, #6
 8000610:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_USART2_UART_Init+0x58>)
 800061a:	220c      	movs	r2, #12
 800061c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000624:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <MX_USART2_UART_Init+0x58>)
 800062c:	2200      	movs	r2, #0
 800062e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000632:	2200      	movs	r2, #0
 8000634:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000638:	0018      	movs	r0, r3
 800063a:	f001 fe49 	bl	80022d0 <HAL_UART_Init>
 800063e:	1e03      	subs	r3, r0, #0
 8000640:	d001      	beq.n	8000646 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000642:	f000 f913 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000190 	.word	0x20000190
 8000650:	40004400 	.word	0x40004400
 8000654:	0003d090 	.word	0x0003d090

08000658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b089      	sub	sp, #36	; 0x24
 800065c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	240c      	movs	r4, #12
 8000660:	193b      	adds	r3, r7, r4
 8000662:	0018      	movs	r0, r3
 8000664:	2314      	movs	r3, #20
 8000666:	001a      	movs	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	f002 fc98 	bl	8002f9e <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b33      	ldr	r3, [pc, #204]	; (800073c <MX_GPIO_Init+0xe4>)
 8000670:	695a      	ldr	r2, [r3, #20]
 8000672:	4b32      	ldr	r3, [pc, #200]	; (800073c <MX_GPIO_Init+0xe4>)
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	0289      	lsls	r1, r1, #10
 8000678:	430a      	orrs	r2, r1
 800067a:	615a      	str	r2, [r3, #20]
 800067c:	4b2f      	ldr	r3, [pc, #188]	; (800073c <MX_GPIO_Init+0xe4>)
 800067e:	695a      	ldr	r2, [r3, #20]
 8000680:	2380      	movs	r3, #128	; 0x80
 8000682:	029b      	lsls	r3, r3, #10
 8000684:	4013      	ands	r3, r2
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	4b2c      	ldr	r3, [pc, #176]	; (800073c <MX_GPIO_Init+0xe4>)
 800068c:	695a      	ldr	r2, [r3, #20]
 800068e:	4b2b      	ldr	r3, [pc, #172]	; (800073c <MX_GPIO_Init+0xe4>)
 8000690:	2180      	movs	r1, #128	; 0x80
 8000692:	0309      	lsls	r1, r1, #12
 8000694:	430a      	orrs	r2, r1
 8000696:	615a      	str	r2, [r3, #20]
 8000698:	4b28      	ldr	r3, [pc, #160]	; (800073c <MX_GPIO_Init+0xe4>)
 800069a:	695a      	ldr	r2, [r3, #20]
 800069c:	2380      	movs	r3, #128	; 0x80
 800069e:	031b      	lsls	r3, r3, #12
 80006a0:	4013      	ands	r3, r2
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DMX_DE_GPIO_Port, DMX_DE_Pin, GPIO_PIN_RESET);
 80006a6:	2390      	movs	r3, #144	; 0x90
 80006a8:	05db      	lsls	r3, r3, #23
 80006aa:	2200      	movs	r2, #0
 80006ac:	2102      	movs	r1, #2
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 fdce 	bl	8001250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80006b4:	23c0      	movs	r3, #192	; 0xc0
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	4821      	ldr	r0, [pc, #132]	; (8000740 <MX_GPIO_Init+0xe8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	0019      	movs	r1, r3
 80006be:	f000 fdc7 	bl	8001250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2201      	movs	r2, #1
 80006c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2290      	movs	r2, #144	; 0x90
 80006cc:	0352      	lsls	r2, r2, #13
 80006ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006d6:	193a      	adds	r2, r7, r4
 80006d8:	2390      	movs	r3, #144	; 0x90
 80006da:	05db      	lsls	r3, r3, #23
 80006dc:	0011      	movs	r1, r2
 80006de:	0018      	movs	r0, r3
 80006e0:	f000 fb76 	bl	8000dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DMX_DE_Pin */
  GPIO_InitStruct.Pin = DMX_DE_Pin;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2202      	movs	r2, #2
 80006e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	2201      	movs	r2, #1
 80006ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DMX_DE_GPIO_Port, &GPIO_InitStruct);
 80006fc:	193a      	adds	r2, r7, r4
 80006fe:	2390      	movs	r3, #144	; 0x90
 8000700:	05db      	lsls	r3, r3, #23
 8000702:	0011      	movs	r1, r2
 8000704:	0018      	movs	r0, r3
 8000706:	f000 fb63 	bl	8000dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 800070a:	0021      	movs	r1, r4
 800070c:	187b      	adds	r3, r7, r1
 800070e:	22c0      	movs	r2, #192	; 0xc0
 8000710:	0092      	lsls	r2, r2, #2
 8000712:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2201      	movs	r2, #1
 8000718:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000726:	187b      	adds	r3, r7, r1
 8000728:	4a05      	ldr	r2, [pc, #20]	; (8000740 <MX_GPIO_Init+0xe8>)
 800072a:	0019      	movs	r1, r3
 800072c:	0010      	movs	r0, r2
 800072e:	f000 fb4f 	bl	8000dd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b009      	add	sp, #36	; 0x24
 8000738:	bd90      	pop	{r4, r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	40021000 	.word	0x40021000
 8000740:	48000800 	.word	0x48000800

08000744 <DMX_send_command>:
/* USER CODE BEGIN 4 */
/*
 * Função que envia o comando DMX seguindo os tempos de MBB, break e MAB exigidos pela norma
 *
 * */
void DMX_send_command(uint8_t* frame, uint16_t size){
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	000a      	movs	r2, r1
 800074e:	1cbb      	adds	r3, r7, #2
 8000750:	801a      	strh	r2, [r3, #0]
	DMX_UART_DeInit;
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <DMX_send_command+0x8c>)
 8000754:	0018      	movs	r0, r3
 8000756:	f001 fe0f 	bl	8002378 <HAL_UART_DeInit>
	DMX_GPIO_Init();   // Inicia DMX modo GPIO
 800075a:	f000 f851 	bl	8000800 <DMX_GPIO_Init>


	DMX_Set_DE_HIGH(); // Habilita o barramento DMX para escrita (Necessidade do RS485)
 800075e:	2390      	movs	r3, #144	; 0x90
 8000760:	05db      	lsls	r3, r3, #23
 8000762:	2201      	movs	r2, #1
 8000764:	2102      	movs	r1, #2
 8000766:	0018      	movs	r0, r3
 8000768:	f000 fd72 	bl	8001250 <HAL_GPIO_WritePin>
	delay_us(10); 	 	 // Espera um tempo antes de iniciar a transmissao
 800076c:	200a      	movs	r0, #10
 800076e:	f000 f831 	bl	80007d4 <delay_us>

	DMX_Set_HIGH();		 // Seta o MBB
 8000772:	2390      	movs	r3, #144	; 0x90
 8000774:	05db      	lsls	r3, r3, #23
 8000776:	2201      	movs	r2, #1
 8000778:	2104      	movs	r1, #4
 800077a:	0018      	movs	r0, r3
 800077c:	f000 fd68 	bl	8001250 <HAL_GPIO_WritePin>
	delay_us(50);
 8000780:	2032      	movs	r0, #50	; 0x32
 8000782:	f000 f827 	bl	80007d4 <delay_us>

	DMX_Set_LOW(); 		 // Seta o Break
 8000786:	2390      	movs	r3, #144	; 0x90
 8000788:	05db      	lsls	r3, r3, #23
 800078a:	2200      	movs	r2, #0
 800078c:	2104      	movs	r1, #4
 800078e:	0018      	movs	r0, r3
 8000790:	f000 fd5e 	bl	8001250 <HAL_GPIO_WritePin>
	delay_us(250);
 8000794:	20fa      	movs	r0, #250	; 0xfa
 8000796:	f000 f81d 	bl	80007d4 <delay_us>

	// O Time after break é implementado pela UART, através do idle frame

	DMX_GPIO_DeInit(); 	// Desativa o modo GPIO
 800079a:	2390      	movs	r3, #144	; 0x90
 800079c:	05db      	lsls	r3, r3, #23
 800079e:	2104      	movs	r1, #4
 80007a0:	0018      	movs	r0, r3
 80007a2:	f000 fc85 	bl	80010b0 <HAL_GPIO_DeInit>
	DMX_UART_Init();		// Inicia novamente o modo USART
 80007a6:	f7ff ff25 	bl	80005f4 <MX_USART2_UART_Init>
	HAL_UART_Transmit(LIGHTING_addr, frame, size, 10);
 80007aa:	1cbb      	adds	r3, r7, #2
 80007ac:	881a      	ldrh	r2, [r3, #0]
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	4807      	ldr	r0, [pc, #28]	; (80007d0 <DMX_send_command+0x8c>)
 80007b2:	230a      	movs	r3, #10
 80007b4:	f001 fe1e 	bl	80023f4 <HAL_UART_Transmit>

	DMX_Set_DE_LOW(); // Desabilita o barramento DMX para escrita (Necessidade do RS485)
 80007b8:	2390      	movs	r3, #144	; 0x90
 80007ba:	05db      	lsls	r3, r3, #23
 80007bc:	2200      	movs	r2, #0
 80007be:	2102      	movs	r1, #2
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 fd45 	bl	8001250 <HAL_GPIO_WritePin>
}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b002      	add	sp, #8
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	20000190 	.word	0x20000190

080007d4 <delay_us>:

void delay_us(uint32_t us){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim17, 0);  // set the counter value a 0
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <delay_us+0x28>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2200      	movs	r2, #0
 80007e2:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER(&htim17) < us);
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <delay_us+0x28>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d8f9      	bhi.n	80007e6 <delay_us+0x12>
}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b002      	add	sp, #8
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200000c0 	.word	0x200000c0

08000800 <DMX_GPIO_Init>:

static void DMX_GPIO_Init(void){
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b08d      	sub	sp, #52	; 0x34
 8000804:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	2418      	movs	r4, #24
 8000808:	193b      	adds	r3, r7, r4
 800080a:	0018      	movs	r0, r3
 800080c:	2314      	movs	r3, #20
 800080e:	001a      	movs	r2, r3
 8000810:	2100      	movs	r1, #0
 8000812:	f002 fbc4 	bl	8002f9e <memset>
	uint16_t receivedIndex = 0;
 8000816:	232e      	movs	r3, #46	; 0x2e
 8000818:	18fb      	adds	r3, r7, r3
 800081a:	2200      	movs	r2, #0
 800081c:	801a      	strh	r2, [r3, #0]
	uint8_t GUI_receiveFinished = 0;
 800081e:	232d      	movs	r3, #45	; 0x2d
 8000820:	18fb      	adds	r3, r7, r3
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
	uint8_t GUI_receive = 1;
 8000826:	232c      	movs	r3, #44	; 0x2c
 8000828:	18fb      	adds	r3, r7, r3
 800082a:	2201      	movs	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800082e:	2390      	movs	r3, #144	; 0x90
 8000830:	05db      	lsls	r3, r3, #23
 8000832:	2201      	movs	r2, #1
 8000834:	2104      	movs	r1, #4
 8000836:	0018      	movs	r0, r3
 8000838:	f000 fd0a 	bl	8001250 <HAL_GPIO_WritePin>
	uint32_t currentTime;

	// Configure GPIO pin as output
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800083c:	0021      	movs	r1, r4
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2204      	movs	r2, #4
 8000842:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2201      	movs	r2, #1
 8000848:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000856:	187a      	adds	r2, r7, r1
 8000858:	2390      	movs	r3, #144	; 0x90
 800085a:	05db      	lsls	r3, r3, #23
 800085c:	0011      	movs	r1, r2
 800085e:	0018      	movs	r0, r3
 8000860:	f000 fab6 	bl	8000dd0 <HAL_GPIO_Init>
	unsigned char viewDMX[20];

}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b00d      	add	sp, #52	; 0x34
 800086a:	bd90      	pop	{r4, r7, pc}

0800086c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000870:	b672      	cpsid	i
}
 8000872:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000874:	e7fe      	b.n	8000874 <Error_Handler+0x8>
	...

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <HAL_MspInit+0x44>)
 8000880:	699a      	ldr	r2, [r3, #24]
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <HAL_MspInit+0x44>)
 8000884:	2101      	movs	r1, #1
 8000886:	430a      	orrs	r2, r1
 8000888:	619a      	str	r2, [r3, #24]
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <HAL_MspInit+0x44>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	2201      	movs	r2, #1
 8000890:	4013      	ands	r3, r2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <HAL_MspInit+0x44>)
 8000898:	69da      	ldr	r2, [r3, #28]
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <HAL_MspInit+0x44>)
 800089c:	2180      	movs	r1, #128	; 0x80
 800089e:	0549      	lsls	r1, r1, #21
 80008a0:	430a      	orrs	r2, r1
 80008a2:	61da      	str	r2, [r3, #28]
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <HAL_MspInit+0x44>)
 80008a6:	69da      	ldr	r2, [r3, #28]
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	055b      	lsls	r3, r3, #21
 80008ac:	4013      	ands	r3, r2
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b002      	add	sp, #8
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	40021000 	.word	0x40021000

080008c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	05db      	lsls	r3, r3, #23
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d10c      	bne.n	80008ee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <HAL_TIM_Base_MspInit+0x5c>)
 80008d6:	69da      	ldr	r2, [r3, #28]
 80008d8:	4b10      	ldr	r3, [pc, #64]	; (800091c <HAL_TIM_Base_MspInit+0x5c>)
 80008da:	2101      	movs	r1, #1
 80008dc:	430a      	orrs	r2, r1
 80008de:	61da      	str	r2, [r3, #28]
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <HAL_TIM_Base_MspInit+0x5c>)
 80008e2:	69db      	ldr	r3, [r3, #28]
 80008e4:	2201      	movs	r2, #1
 80008e6:	4013      	ands	r3, r2
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80008ec:	e012      	b.n	8000914 <HAL_TIM_Base_MspInit+0x54>
  else if(htim_base->Instance==TIM17)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a0b      	ldr	r2, [pc, #44]	; (8000920 <HAL_TIM_Base_MspInit+0x60>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d10d      	bne.n	8000914 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <HAL_TIM_Base_MspInit+0x5c>)
 80008fa:	699a      	ldr	r2, [r3, #24]
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <HAL_TIM_Base_MspInit+0x5c>)
 80008fe:	2180      	movs	r1, #128	; 0x80
 8000900:	02c9      	lsls	r1, r1, #11
 8000902:	430a      	orrs	r2, r1
 8000904:	619a      	str	r2, [r3, #24]
 8000906:	4b05      	ldr	r3, [pc, #20]	; (800091c <HAL_TIM_Base_MspInit+0x5c>)
 8000908:	699a      	ldr	r2, [r3, #24]
 800090a:	2380      	movs	r3, #128	; 0x80
 800090c:	02db      	lsls	r3, r3, #11
 800090e:	4013      	ands	r3, r2
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b004      	add	sp, #16
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40021000 	.word	0x40021000
 8000920:	40014800 	.word	0x40014800

08000924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b08d      	sub	sp, #52	; 0x34
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	241c      	movs	r4, #28
 800092e:	193b      	adds	r3, r7, r4
 8000930:	0018      	movs	r0, r3
 8000932:	2314      	movs	r3, #20
 8000934:	001a      	movs	r2, r3
 8000936:	2100      	movs	r1, #0
 8000938:	f002 fb31 	bl	8002f9e <memset>
  if(huart->Instance==USART1)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a39      	ldr	r2, [pc, #228]	; (8000a28 <HAL_UART_MspInit+0x104>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d134      	bne.n	80009b0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000946:	4b39      	ldr	r3, [pc, #228]	; (8000a2c <HAL_UART_MspInit+0x108>)
 8000948:	699a      	ldr	r2, [r3, #24]
 800094a:	4b38      	ldr	r3, [pc, #224]	; (8000a2c <HAL_UART_MspInit+0x108>)
 800094c:	2180      	movs	r1, #128	; 0x80
 800094e:	01c9      	lsls	r1, r1, #7
 8000950:	430a      	orrs	r2, r1
 8000952:	619a      	str	r2, [r3, #24]
 8000954:	4b35      	ldr	r3, [pc, #212]	; (8000a2c <HAL_UART_MspInit+0x108>)
 8000956:	699a      	ldr	r2, [r3, #24]
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	01db      	lsls	r3, r3, #7
 800095c:	4013      	ands	r3, r2
 800095e:	61bb      	str	r3, [r7, #24]
 8000960:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	4b32      	ldr	r3, [pc, #200]	; (8000a2c <HAL_UART_MspInit+0x108>)
 8000964:	695a      	ldr	r2, [r3, #20]
 8000966:	4b31      	ldr	r3, [pc, #196]	; (8000a2c <HAL_UART_MspInit+0x108>)
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	0289      	lsls	r1, r1, #10
 800096c:	430a      	orrs	r2, r1
 800096e:	615a      	str	r2, [r3, #20]
 8000970:	4b2e      	ldr	r3, [pc, #184]	; (8000a2c <HAL_UART_MspInit+0x108>)
 8000972:	695a      	ldr	r2, [r3, #20]
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	029b      	lsls	r3, r3, #10
 8000978:	4013      	ands	r3, r2
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = debug_TX_Pin|debug_RX_Pin;
 800097e:	193b      	adds	r3, r7, r4
 8000980:	22c0      	movs	r2, #192	; 0xc0
 8000982:	00d2      	lsls	r2, r2, #3
 8000984:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	0021      	movs	r1, r4
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2202      	movs	r2, #2
 800098c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	187b      	adds	r3, r7, r1
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000994:	187b      	adds	r3, r7, r1
 8000996:	2203      	movs	r2, #3
 8000998:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800099a:	187b      	adds	r3, r7, r1
 800099c:	2201      	movs	r2, #1
 800099e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	187a      	adds	r2, r7, r1
 80009a2:	2390      	movs	r3, #144	; 0x90
 80009a4:	05db      	lsls	r3, r3, #23
 80009a6:	0011      	movs	r1, r2
 80009a8:	0018      	movs	r0, r3
 80009aa:	f000 fa11 	bl	8000dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ae:	e037      	b.n	8000a20 <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a1e      	ldr	r2, [pc, #120]	; (8000a30 <HAL_UART_MspInit+0x10c>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d132      	bne.n	8000a20 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <HAL_UART_MspInit+0x108>)
 80009bc:	69da      	ldr	r2, [r3, #28]
 80009be:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <HAL_UART_MspInit+0x108>)
 80009c0:	2180      	movs	r1, #128	; 0x80
 80009c2:	0289      	lsls	r1, r1, #10
 80009c4:	430a      	orrs	r2, r1
 80009c6:	61da      	str	r2, [r3, #28]
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <HAL_UART_MspInit+0x108>)
 80009ca:	69da      	ldr	r2, [r3, #28]
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	029b      	lsls	r3, r3, #10
 80009d0:	4013      	ands	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_UART_MspInit+0x108>)
 80009d8:	695a      	ldr	r2, [r3, #20]
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <HAL_UART_MspInit+0x108>)
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	0289      	lsls	r1, r1, #10
 80009e0:	430a      	orrs	r2, r1
 80009e2:	615a      	str	r2, [r3, #20]
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <HAL_UART_MspInit+0x108>)
 80009e6:	695a      	ldr	r2, [r3, #20]
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	029b      	lsls	r3, r3, #10
 80009ec:	4013      	ands	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DMX_TX_Pin|DMX_RX_Pin;
 80009f2:	211c      	movs	r1, #28
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	220c      	movs	r2, #12
 80009f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2202      	movs	r2, #2
 80009fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2203      	movs	r2, #3
 8000a0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2201      	movs	r2, #1
 8000a10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	187a      	adds	r2, r7, r1
 8000a14:	2390      	movs	r3, #144	; 0x90
 8000a16:	05db      	lsls	r3, r3, #23
 8000a18:	0011      	movs	r1, r2
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f000 f9d8 	bl	8000dd0 <HAL_GPIO_Init>
}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b00d      	add	sp, #52	; 0x34
 8000a26:	bd90      	pop	{r4, r7, pc}
 8000a28:	40013800 	.word	0x40013800
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40004400 	.word	0x40004400

08000a34 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a13      	ldr	r2, [pc, #76]	; (8000a90 <HAL_UART_MspDeInit+0x5c>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d10e      	bne.n	8000a64 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <HAL_UART_MspDeInit+0x60>)
 8000a48:	699a      	ldr	r2, [r3, #24]
 8000a4a:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_UART_MspDeInit+0x60>)
 8000a4c:	4912      	ldr	r1, [pc, #72]	; (8000a98 <HAL_UART_MspDeInit+0x64>)
 8000a4e:	400a      	ands	r2, r1
 8000a50:	619a      	str	r2, [r3, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, debug_TX_Pin|debug_RX_Pin);
 8000a52:	23c0      	movs	r3, #192	; 0xc0
 8000a54:	00da      	lsls	r2, r3, #3
 8000a56:	2390      	movs	r3, #144	; 0x90
 8000a58:	05db      	lsls	r3, r3, #23
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 fb27 	bl	80010b0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8000a62:	e010      	b.n	8000a86 <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0c      	ldr	r2, [pc, #48]	; (8000a9c <HAL_UART_MspDeInit+0x68>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d10b      	bne.n	8000a86 <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART2_CLK_DISABLE();
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_UART_MspDeInit+0x60>)
 8000a70:	69da      	ldr	r2, [r3, #28]
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <HAL_UART_MspDeInit+0x60>)
 8000a74:	490a      	ldr	r1, [pc, #40]	; (8000aa0 <HAL_UART_MspDeInit+0x6c>)
 8000a76:	400a      	ands	r2, r1
 8000a78:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, DMX_TX_Pin|DMX_RX_Pin);
 8000a7a:	2390      	movs	r3, #144	; 0x90
 8000a7c:	05db      	lsls	r3, r3, #23
 8000a7e:	210c      	movs	r1, #12
 8000a80:	0018      	movs	r0, r3
 8000a82:	f000 fb15 	bl	80010b0 <HAL_GPIO_DeInit>
}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b002      	add	sp, #8
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	40013800 	.word	0x40013800
 8000a94:	40021000 	.word	0x40021000
 8000a98:	ffffbfff 	.word	0xffffbfff
 8000a9c:	40004400 	.word	0x40004400
 8000aa0:	fffdffff 	.word	0xfffdffff

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <NMI_Handler+0x4>

08000aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <HardFault_Handler+0x4>

08000ab0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac8:	f000 f8b2 	bl	8000c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000adc:	4a14      	ldr	r2, [pc, #80]	; (8000b30 <_sbrk+0x5c>)
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <_sbrk+0x60>)
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d102      	bne.n	8000af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <_sbrk+0x64>)
 8000af2:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <_sbrk+0x68>)
 8000af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <_sbrk+0x64>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	18d3      	adds	r3, r2, r3
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d207      	bcs.n	8000b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b04:	f002 fa66 	bl	8002fd4 <__errno>
 8000b08:	0003      	movs	r3, r0
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	425b      	negs	r3, r3
 8000b12:	e009      	b.n	8000b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <_sbrk+0x64>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b1a:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <_sbrk+0x64>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	18d2      	adds	r2, r2, r3
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <_sbrk+0x64>)
 8000b24:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b26:	68fb      	ldr	r3, [r7, #12]
}
 8000b28:	0018      	movs	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b006      	add	sp, #24
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20002000 	.word	0x20002000
 8000b34:	00000400 	.word	0x00000400
 8000b38:	20000218 	.word	0x20000218
 8000b3c:	20000368 	.word	0x20000368

08000b40 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b4c:	480d      	ldr	r0, [pc, #52]	; (8000b84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b4e:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8000b50:	f7ff fff6 	bl	8000b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b54:	480c      	ldr	r0, [pc, #48]	; (8000b88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b56:	490d      	ldr	r1, [pc, #52]	; (8000b8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b58:	4a0d      	ldr	r2, [pc, #52]	; (8000b90 <LoopForever+0xe>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b6c:	4c0a      	ldr	r4, [pc, #40]	; (8000b98 <LoopForever+0x16>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b7a:	f002 fa31 	bl	8002fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b7e:	f7ff fb4f 	bl	8000220 <main>

08000b82 <LoopForever>:

LoopForever:
    b LoopForever
 8000b82:	e7fe      	b.n	8000b82 <LoopForever>
  ldr   r0, =_estack
 8000b84:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b8c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b90:	0800313c 	.word	0x0800313c
  ldr r2, =_sbss
 8000b94:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b98:	20000368 	.word	0x20000368

08000b9c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b9c:	e7fe      	b.n	8000b9c <ADC1_COMP_IRQHandler>
	...

08000ba0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <HAL_Init+0x24>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_Init+0x24>)
 8000baa:	2110      	movs	r1, #16
 8000bac:	430a      	orrs	r2, r1
 8000bae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f000 f809 	bl	8000bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb6:	f7ff fe5f 	bl	8000878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bba:	2300      	movs	r3, #0
}
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	40022000 	.word	0x40022000

08000bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_InitTick+0x5c>)
 8000bd2:	681c      	ldr	r4, [r3, #0]
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <HAL_InitTick+0x60>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	0019      	movs	r1, r3
 8000bda:	23fa      	movs	r3, #250	; 0xfa
 8000bdc:	0098      	lsls	r0, r3, #2
 8000bde:	f7ff fa93 	bl	8000108 <__udivsi3>
 8000be2:	0003      	movs	r3, r0
 8000be4:	0019      	movs	r1, r3
 8000be6:	0020      	movs	r0, r4
 8000be8:	f7ff fa8e 	bl	8000108 <__udivsi3>
 8000bec:	0003      	movs	r3, r0
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f000 f8e1 	bl	8000db6 <HAL_SYSTICK_Config>
 8000bf4:	1e03      	subs	r3, r0, #0
 8000bf6:	d001      	beq.n	8000bfc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e00f      	b.n	8000c1c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b03      	cmp	r3, #3
 8000c00:	d80b      	bhi.n	8000c1a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	2301      	movs	r3, #1
 8000c06:	425b      	negs	r3, r3
 8000c08:	2200      	movs	r2, #0
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f000 f8be 	bl	8000d8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_InitTick+0x64>)
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c16:	2300      	movs	r3, #0
 8000c18:	e000      	b.n	8000c1c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
}
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b003      	add	sp, #12
 8000c22:	bd90      	pop	{r4, r7, pc}
 8000c24:	20000000 	.word	0x20000000
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	20000004 	.word	0x20000004

08000c30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <HAL_IncTick+0x1c>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	001a      	movs	r2, r3
 8000c3a:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <HAL_IncTick+0x20>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	18d2      	adds	r2, r2, r3
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <HAL_IncTick+0x20>)
 8000c42:	601a      	str	r2, [r3, #0]
}
 8000c44:	46c0      	nop			; (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	2000021c 	.word	0x2000021c

08000c54 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b02      	ldr	r3, [pc, #8]	; (8000c64 <HAL_GetTick+0x10>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	2000021c 	.word	0x2000021c

08000c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	0002      	movs	r2, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c7c:	d828      	bhi.n	8000cd0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c7e:	4a2f      	ldr	r2, [pc, #188]	; (8000d3c <__NVIC_SetPriority+0xd4>)
 8000c80:	1dfb      	adds	r3, r7, #7
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	b25b      	sxtb	r3, r3
 8000c86:	089b      	lsrs	r3, r3, #2
 8000c88:	33c0      	adds	r3, #192	; 0xc0
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	589b      	ldr	r3, [r3, r2]
 8000c8e:	1dfa      	adds	r2, r7, #7
 8000c90:	7812      	ldrb	r2, [r2, #0]
 8000c92:	0011      	movs	r1, r2
 8000c94:	2203      	movs	r2, #3
 8000c96:	400a      	ands	r2, r1
 8000c98:	00d2      	lsls	r2, r2, #3
 8000c9a:	21ff      	movs	r1, #255	; 0xff
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	000a      	movs	r2, r1
 8000ca0:	43d2      	mvns	r2, r2
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	019b      	lsls	r3, r3, #6
 8000caa:	22ff      	movs	r2, #255	; 0xff
 8000cac:	401a      	ands	r2, r3
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	4003      	ands	r3, r0
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cbc:	481f      	ldr	r0, [pc, #124]	; (8000d3c <__NVIC_SetPriority+0xd4>)
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	b25b      	sxtb	r3, r3
 8000cc4:	089b      	lsrs	r3, r3, #2
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	33c0      	adds	r3, #192	; 0xc0
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cce:	e031      	b.n	8000d34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd0:	4a1b      	ldr	r2, [pc, #108]	; (8000d40 <__NVIC_SetPriority+0xd8>)
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	0019      	movs	r1, r3
 8000cd8:	230f      	movs	r3, #15
 8000cda:	400b      	ands	r3, r1
 8000cdc:	3b08      	subs	r3, #8
 8000cde:	089b      	lsrs	r3, r3, #2
 8000ce0:	3306      	adds	r3, #6
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	18d3      	adds	r3, r2, r3
 8000ce6:	3304      	adds	r3, #4
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	1dfa      	adds	r2, r7, #7
 8000cec:	7812      	ldrb	r2, [r2, #0]
 8000cee:	0011      	movs	r1, r2
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	400a      	ands	r2, r1
 8000cf4:	00d2      	lsls	r2, r2, #3
 8000cf6:	21ff      	movs	r1, #255	; 0xff
 8000cf8:	4091      	lsls	r1, r2
 8000cfa:	000a      	movs	r2, r1
 8000cfc:	43d2      	mvns	r2, r2
 8000cfe:	401a      	ands	r2, r3
 8000d00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	019b      	lsls	r3, r3, #6
 8000d06:	22ff      	movs	r2, #255	; 0xff
 8000d08:	401a      	ands	r2, r3
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	0018      	movs	r0, r3
 8000d10:	2303      	movs	r3, #3
 8000d12:	4003      	ands	r3, r0
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d18:	4809      	ldr	r0, [pc, #36]	; (8000d40 <__NVIC_SetPriority+0xd8>)
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	001c      	movs	r4, r3
 8000d20:	230f      	movs	r3, #15
 8000d22:	4023      	ands	r3, r4
 8000d24:	3b08      	subs	r3, #8
 8000d26:	089b      	lsrs	r3, r3, #2
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	3306      	adds	r3, #6
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	18c3      	adds	r3, r0, r3
 8000d30:	3304      	adds	r3, #4
 8000d32:	601a      	str	r2, [r3, #0]
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b003      	add	sp, #12
 8000d3a:	bd90      	pop	{r4, r7, pc}
 8000d3c:	e000e100 	.word	0xe000e100
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	1e5a      	subs	r2, r3, #1
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	045b      	lsls	r3, r3, #17
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d301      	bcc.n	8000d5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e010      	b.n	8000d7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <SysTick_Config+0x44>)
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	3a01      	subs	r2, #1
 8000d62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d64:	2301      	movs	r3, #1
 8000d66:	425b      	negs	r3, r3
 8000d68:	2103      	movs	r1, #3
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff ff7c 	bl	8000c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <SysTick_Config+0x44>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d76:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <SysTick_Config+0x44>)
 8000d78:	2207      	movs	r2, #7
 8000d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	0018      	movs	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b002      	add	sp, #8
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	e000e010 	.word	0xe000e010

08000d8c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	210f      	movs	r1, #15
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	1c02      	adds	r2, r0, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b25b      	sxtb	r3, r3
 8000da6:	0011      	movs	r1, r2
 8000da8:	0018      	movs	r0, r3
 8000daa:	f7ff ff5d 	bl	8000c68 <__NVIC_SetPriority>
}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	b004      	add	sp, #16
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f7ff ffbf 	bl	8000d44 <SysTick_Config>
 8000dc6:	0003      	movs	r3, r0
}
 8000dc8:	0018      	movs	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b002      	add	sp, #8
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dde:	e14f      	b.n	8001080 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2101      	movs	r1, #1
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	4091      	lsls	r1, r2
 8000dea:	000a      	movs	r2, r1
 8000dec:	4013      	ands	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d100      	bne.n	8000df8 <HAL_GPIO_Init+0x28>
 8000df6:	e140      	b.n	800107a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	4013      	ands	r3, r2
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d005      	beq.n	8000e10 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2203      	movs	r2, #3
 8000e0a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d130      	bne.n	8000e72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	409a      	lsls	r2, r3
 8000e1e:	0013      	movs	r3, r2
 8000e20:	43da      	mvns	r2, r3
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	68da      	ldr	r2, [r3, #12]
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	409a      	lsls	r2, r3
 8000e32:	0013      	movs	r3, r2
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e46:	2201      	movs	r2, #1
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
 8000e4c:	0013      	movs	r3, r2
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	091b      	lsrs	r3, r3, #4
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	401a      	ands	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	409a      	lsls	r2, r3
 8000e64:	0013      	movs	r3, r2
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2203      	movs	r2, #3
 8000e78:	4013      	ands	r3, r2
 8000e7a:	2b03      	cmp	r3, #3
 8000e7c:	d017      	beq.n	8000eae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	2203      	movs	r2, #3
 8000e8a:	409a      	lsls	r2, r3
 8000e8c:	0013      	movs	r3, r2
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	4013      	ands	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	689a      	ldr	r2, [r3, #8]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	409a      	lsls	r2, r3
 8000ea0:	0013      	movs	r3, r2
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d123      	bne.n	8000f02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	08da      	lsrs	r2, r3, #3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3208      	adds	r2, #8
 8000ec2:	0092      	lsls	r2, r2, #2
 8000ec4:	58d3      	ldr	r3, [r2, r3]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	2207      	movs	r2, #7
 8000ecc:	4013      	ands	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	220f      	movs	r2, #15
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	691a      	ldr	r2, [r3, #16]
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	2107      	movs	r1, #7
 8000ee6:	400b      	ands	r3, r1
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	409a      	lsls	r2, r3
 8000eec:	0013      	movs	r3, r2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	08da      	lsrs	r2, r3, #3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3208      	adds	r2, #8
 8000efc:	0092      	lsls	r2, r2, #2
 8000efe:	6939      	ldr	r1, [r7, #16]
 8000f00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	0013      	movs	r3, r2
 8000f12:	43da      	mvns	r2, r3
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2203      	movs	r2, #3
 8000f20:	401a      	ands	r2, r3
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	409a      	lsls	r2, r3
 8000f28:	0013      	movs	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	23c0      	movs	r3, #192	; 0xc0
 8000f3c:	029b      	lsls	r3, r3, #10
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d100      	bne.n	8000f44 <HAL_GPIO_Init+0x174>
 8000f42:	e09a      	b.n	800107a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f44:	4b54      	ldr	r3, [pc, #336]	; (8001098 <HAL_GPIO_Init+0x2c8>)
 8000f46:	699a      	ldr	r2, [r3, #24]
 8000f48:	4b53      	ldr	r3, [pc, #332]	; (8001098 <HAL_GPIO_Init+0x2c8>)
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	619a      	str	r2, [r3, #24]
 8000f50:	4b51      	ldr	r3, [pc, #324]	; (8001098 <HAL_GPIO_Init+0x2c8>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	2201      	movs	r2, #1
 8000f56:	4013      	ands	r3, r2
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f5c:	4a4f      	ldr	r2, [pc, #316]	; (800109c <HAL_GPIO_Init+0x2cc>)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	3302      	adds	r3, #2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	589b      	ldr	r3, [r3, r2]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	4013      	ands	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	220f      	movs	r2, #15
 8000f74:	409a      	lsls	r2, r3
 8000f76:	0013      	movs	r3, r2
 8000f78:	43da      	mvns	r2, r3
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	2390      	movs	r3, #144	; 0x90
 8000f84:	05db      	lsls	r3, r3, #23
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d013      	beq.n	8000fb2 <HAL_GPIO_Init+0x1e2>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a44      	ldr	r2, [pc, #272]	; (80010a0 <HAL_GPIO_Init+0x2d0>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d00d      	beq.n	8000fae <HAL_GPIO_Init+0x1de>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a43      	ldr	r2, [pc, #268]	; (80010a4 <HAL_GPIO_Init+0x2d4>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d007      	beq.n	8000faa <HAL_GPIO_Init+0x1da>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a42      	ldr	r2, [pc, #264]	; (80010a8 <HAL_GPIO_Init+0x2d8>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d101      	bne.n	8000fa6 <HAL_GPIO_Init+0x1d6>
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e006      	b.n	8000fb4 <HAL_GPIO_Init+0x1e4>
 8000fa6:	2305      	movs	r3, #5
 8000fa8:	e004      	b.n	8000fb4 <HAL_GPIO_Init+0x1e4>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e002      	b.n	8000fb4 <HAL_GPIO_Init+0x1e4>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <HAL_GPIO_Init+0x1e4>
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	2103      	movs	r1, #3
 8000fb8:	400a      	ands	r2, r1
 8000fba:	0092      	lsls	r2, r2, #2
 8000fbc:	4093      	lsls	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fc4:	4935      	ldr	r1, [pc, #212]	; (800109c <HAL_GPIO_Init+0x2cc>)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	3302      	adds	r3, #2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd2:	4b36      	ldr	r3, [pc, #216]	; (80010ac <HAL_GPIO_Init+0x2dc>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	2380      	movs	r3, #128	; 0x80
 8000fe8:	035b      	lsls	r3, r3, #13
 8000fea:	4013      	ands	r3, r2
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ff6:	4b2d      	ldr	r3, [pc, #180]	; (80010ac <HAL_GPIO_Init+0x2dc>)
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ffc:	4b2b      	ldr	r3, [pc, #172]	; (80010ac <HAL_GPIO_Init+0x2dc>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	43da      	mvns	r2, r3
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	039b      	lsls	r3, r3, #14
 8001014:	4013      	ands	r3, r2
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001020:	4b22      	ldr	r3, [pc, #136]	; (80010ac <HAL_GPIO_Init+0x2dc>)
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001026:	4b21      	ldr	r3, [pc, #132]	; (80010ac <HAL_GPIO_Init+0x2dc>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	43da      	mvns	r2, r3
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	2380      	movs	r3, #128	; 0x80
 800103c:	029b      	lsls	r3, r3, #10
 800103e:	4013      	ands	r3, r2
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <HAL_GPIO_Init+0x2dc>)
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001050:	4b16      	ldr	r3, [pc, #88]	; (80010ac <HAL_GPIO_Init+0x2dc>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	43da      	mvns	r2, r3
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	025b      	lsls	r3, r3, #9
 8001068:	4013      	ands	r3, r2
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <HAL_GPIO_Init+0x2dc>)
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	3301      	adds	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	40da      	lsrs	r2, r3
 8001088:	1e13      	subs	r3, r2, #0
 800108a:	d000      	beq.n	800108e <HAL_GPIO_Init+0x2be>
 800108c:	e6a8      	b.n	8000de0 <HAL_GPIO_Init+0x10>
  } 
}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	b006      	add	sp, #24
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021000 	.word	0x40021000
 800109c:	40010000 	.word	0x40010000
 80010a0:	48000400 	.word	0x48000400
 80010a4:	48000800 	.word	0x48000800
 80010a8:	48000c00 	.word	0x48000c00
 80010ac:	40010400 	.word	0x40010400

080010b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80010be:	e0b1      	b.n	8001224 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80010c0:	2201      	movs	r2, #1
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	409a      	lsls	r2, r3
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d100      	bne.n	80010d4 <HAL_GPIO_DeInit+0x24>
 80010d2:	e0a4      	b.n	800121e <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80010d4:	4a59      	ldr	r2, [pc, #356]	; (800123c <HAL_GPIO_DeInit+0x18c>)
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	3302      	adds	r3, #2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	589b      	ldr	r3, [r3, r2]
 80010e0:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	2203      	movs	r2, #3
 80010e6:	4013      	ands	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	220f      	movs	r2, #15
 80010ec:	409a      	lsls	r2, r3
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4013      	ands	r3, r2
 80010f2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	2390      	movs	r3, #144	; 0x90
 80010f8:	05db      	lsls	r3, r3, #23
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d013      	beq.n	8001126 <HAL_GPIO_DeInit+0x76>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4f      	ldr	r2, [pc, #316]	; (8001240 <HAL_GPIO_DeInit+0x190>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d00d      	beq.n	8001122 <HAL_GPIO_DeInit+0x72>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4e      	ldr	r2, [pc, #312]	; (8001244 <HAL_GPIO_DeInit+0x194>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d007      	beq.n	800111e <HAL_GPIO_DeInit+0x6e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4d      	ldr	r2, [pc, #308]	; (8001248 <HAL_GPIO_DeInit+0x198>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d101      	bne.n	800111a <HAL_GPIO_DeInit+0x6a>
 8001116:	2303      	movs	r3, #3
 8001118:	e006      	b.n	8001128 <HAL_GPIO_DeInit+0x78>
 800111a:	2305      	movs	r3, #5
 800111c:	e004      	b.n	8001128 <HAL_GPIO_DeInit+0x78>
 800111e:	2302      	movs	r3, #2
 8001120:	e002      	b.n	8001128 <HAL_GPIO_DeInit+0x78>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <HAL_GPIO_DeInit+0x78>
 8001126:	2300      	movs	r3, #0
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	2103      	movs	r1, #3
 800112c:	400a      	ands	r2, r1
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	4093      	lsls	r3, r2
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	429a      	cmp	r2, r3
 8001136:	d132      	bne.n	800119e <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001138:	4b44      	ldr	r3, [pc, #272]	; (800124c <HAL_GPIO_DeInit+0x19c>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	43d9      	mvns	r1, r3
 8001140:	4b42      	ldr	r3, [pc, #264]	; (800124c <HAL_GPIO_DeInit+0x19c>)
 8001142:	400a      	ands	r2, r1
 8001144:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001146:	4b41      	ldr	r3, [pc, #260]	; (800124c <HAL_GPIO_DeInit+0x19c>)
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	43d9      	mvns	r1, r3
 800114e:	4b3f      	ldr	r3, [pc, #252]	; (800124c <HAL_GPIO_DeInit+0x19c>)
 8001150:	400a      	ands	r2, r1
 8001152:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001154:	4b3d      	ldr	r3, [pc, #244]	; (800124c <HAL_GPIO_DeInit+0x19c>)
 8001156:	68da      	ldr	r2, [r3, #12]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	43d9      	mvns	r1, r3
 800115c:	4b3b      	ldr	r3, [pc, #236]	; (800124c <HAL_GPIO_DeInit+0x19c>)
 800115e:	400a      	ands	r2, r1
 8001160:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001162:	4b3a      	ldr	r3, [pc, #232]	; (800124c <HAL_GPIO_DeInit+0x19c>)
 8001164:	689a      	ldr	r2, [r3, #8]
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	43d9      	mvns	r1, r3
 800116a:	4b38      	ldr	r3, [pc, #224]	; (800124c <HAL_GPIO_DeInit+0x19c>)
 800116c:	400a      	ands	r2, r1
 800116e:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	2203      	movs	r2, #3
 8001174:	4013      	ands	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	220f      	movs	r2, #15
 800117a:	409a      	lsls	r2, r3
 800117c:	0013      	movs	r3, r2
 800117e:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001180:	4a2e      	ldr	r2, [pc, #184]	; (800123c <HAL_GPIO_DeInit+0x18c>)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	089b      	lsrs	r3, r3, #2
 8001186:	3302      	adds	r3, #2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	589a      	ldr	r2, [r3, r2]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	43d9      	mvns	r1, r3
 8001190:	482a      	ldr	r0, [pc, #168]	; (800123c <HAL_GPIO_DeInit+0x18c>)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	400a      	ands	r2, r1
 8001198:	3302      	adds	r3, #2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	0052      	lsls	r2, r2, #1
 80011a6:	2103      	movs	r1, #3
 80011a8:	4091      	lsls	r1, r2
 80011aa:	000a      	movs	r2, r1
 80011ac:	43d2      	mvns	r2, r2
 80011ae:	401a      	ands	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	08da      	lsrs	r2, r3, #3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3208      	adds	r2, #8
 80011bc:	0092      	lsls	r2, r2, #2
 80011be:	58d3      	ldr	r3, [r2, r3]
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	2107      	movs	r1, #7
 80011c4:	400a      	ands	r2, r1
 80011c6:	0092      	lsls	r2, r2, #2
 80011c8:	210f      	movs	r1, #15
 80011ca:	4091      	lsls	r1, r2
 80011cc:	000a      	movs	r2, r1
 80011ce:	43d1      	mvns	r1, r2
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	08d2      	lsrs	r2, r2, #3
 80011d4:	4019      	ands	r1, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3208      	adds	r2, #8
 80011da:	0092      	lsls	r2, r2, #2
 80011dc:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	0052      	lsls	r2, r2, #1
 80011e6:	2103      	movs	r1, #3
 80011e8:	4091      	lsls	r1, r2
 80011ea:	000a      	movs	r2, r1
 80011ec:	43d2      	mvns	r2, r2
 80011ee:	401a      	ands	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2101      	movs	r1, #1
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	4091      	lsls	r1, r2
 80011fe:	000a      	movs	r2, r1
 8001200:	43d2      	mvns	r2, r2
 8001202:	401a      	ands	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	0052      	lsls	r2, r2, #1
 8001210:	2103      	movs	r1, #3
 8001212:	4091      	lsls	r1, r2
 8001214:	000a      	movs	r2, r1
 8001216:	43d2      	mvns	r2, r2
 8001218:	401a      	ands	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	609a      	str	r2, [r3, #8]

    }

    position++;
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	3301      	adds	r3, #1
 8001222:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	40da      	lsrs	r2, r3
 800122a:	1e13      	subs	r3, r2, #0
 800122c:	d000      	beq.n	8001230 <HAL_GPIO_DeInit+0x180>
 800122e:	e747      	b.n	80010c0 <HAL_GPIO_DeInit+0x10>
  }
}
 8001230:	46c0      	nop			; (mov r8, r8)
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	b006      	add	sp, #24
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	40010000 	.word	0x40010000
 8001240:	48000400 	.word	0x48000400
 8001244:	48000800 	.word	0x48000800
 8001248:	48000c00 	.word	0x48000c00
 800124c:	40010400 	.word	0x40010400

08001250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	0008      	movs	r0, r1
 800125a:	0011      	movs	r1, r2
 800125c:	1cbb      	adds	r3, r7, #2
 800125e:	1c02      	adds	r2, r0, #0
 8001260:	801a      	strh	r2, [r3, #0]
 8001262:	1c7b      	adds	r3, r7, #1
 8001264:	1c0a      	adds	r2, r1, #0
 8001266:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001268:	1c7b      	adds	r3, r7, #1
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d004      	beq.n	800127a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001270:	1cbb      	adds	r3, r7, #2
 8001272:	881a      	ldrh	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001278:	e003      	b.n	8001282 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800127a:	1cbb      	adds	r3, r7, #2
 800127c:	881a      	ldrh	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	46bd      	mov	sp, r7
 8001286:	b002      	add	sp, #8
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e301      	b.n	80018a2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2201      	movs	r2, #1
 80012a4:	4013      	ands	r3, r2
 80012a6:	d100      	bne.n	80012aa <HAL_RCC_OscConfig+0x1e>
 80012a8:	e08d      	b.n	80013c6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012aa:	4bc3      	ldr	r3, [pc, #780]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	220c      	movs	r2, #12
 80012b0:	4013      	ands	r3, r2
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d00e      	beq.n	80012d4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012b6:	4bc0      	ldr	r3, [pc, #768]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	220c      	movs	r2, #12
 80012bc:	4013      	ands	r3, r2
 80012be:	2b08      	cmp	r3, #8
 80012c0:	d116      	bne.n	80012f0 <HAL_RCC_OscConfig+0x64>
 80012c2:	4bbd      	ldr	r3, [pc, #756]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	025b      	lsls	r3, r3, #9
 80012ca:	401a      	ands	r2, r3
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	025b      	lsls	r3, r3, #9
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d10d      	bne.n	80012f0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d4:	4bb8      	ldr	r3, [pc, #736]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	2380      	movs	r3, #128	; 0x80
 80012da:	029b      	lsls	r3, r3, #10
 80012dc:	4013      	ands	r3, r2
 80012de:	d100      	bne.n	80012e2 <HAL_RCC_OscConfig+0x56>
 80012e0:	e070      	b.n	80013c4 <HAL_RCC_OscConfig+0x138>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d000      	beq.n	80012ec <HAL_RCC_OscConfig+0x60>
 80012ea:	e06b      	b.n	80013c4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e2d8      	b.n	80018a2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d107      	bne.n	8001308 <HAL_RCC_OscConfig+0x7c>
 80012f8:	4baf      	ldr	r3, [pc, #700]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4bae      	ldr	r3, [pc, #696]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80012fe:	2180      	movs	r1, #128	; 0x80
 8001300:	0249      	lsls	r1, r1, #9
 8001302:	430a      	orrs	r2, r1
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	e02f      	b.n	8001368 <HAL_RCC_OscConfig+0xdc>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d10c      	bne.n	800132a <HAL_RCC_OscConfig+0x9e>
 8001310:	4ba9      	ldr	r3, [pc, #676]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4ba8      	ldr	r3, [pc, #672]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001316:	49a9      	ldr	r1, [pc, #676]	; (80015bc <HAL_RCC_OscConfig+0x330>)
 8001318:	400a      	ands	r2, r1
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	4ba6      	ldr	r3, [pc, #664]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4ba5      	ldr	r3, [pc, #660]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001322:	49a7      	ldr	r1, [pc, #668]	; (80015c0 <HAL_RCC_OscConfig+0x334>)
 8001324:	400a      	ands	r2, r1
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	e01e      	b.n	8001368 <HAL_RCC_OscConfig+0xdc>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b05      	cmp	r3, #5
 8001330:	d10e      	bne.n	8001350 <HAL_RCC_OscConfig+0xc4>
 8001332:	4ba1      	ldr	r3, [pc, #644]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4ba0      	ldr	r3, [pc, #640]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001338:	2180      	movs	r1, #128	; 0x80
 800133a:	02c9      	lsls	r1, r1, #11
 800133c:	430a      	orrs	r2, r1
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	4b9d      	ldr	r3, [pc, #628]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b9c      	ldr	r3, [pc, #624]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001346:	2180      	movs	r1, #128	; 0x80
 8001348:	0249      	lsls	r1, r1, #9
 800134a:	430a      	orrs	r2, r1
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	e00b      	b.n	8001368 <HAL_RCC_OscConfig+0xdc>
 8001350:	4b99      	ldr	r3, [pc, #612]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b98      	ldr	r3, [pc, #608]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001356:	4999      	ldr	r1, [pc, #612]	; (80015bc <HAL_RCC_OscConfig+0x330>)
 8001358:	400a      	ands	r2, r1
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	4b96      	ldr	r3, [pc, #600]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b95      	ldr	r3, [pc, #596]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001362:	4997      	ldr	r1, [pc, #604]	; (80015c0 <HAL_RCC_OscConfig+0x334>)
 8001364:	400a      	ands	r2, r1
 8001366:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d014      	beq.n	800139a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fc70 	bl	8000c54 <HAL_GetTick>
 8001374:	0003      	movs	r3, r0
 8001376:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800137a:	f7ff fc6b 	bl	8000c54 <HAL_GetTick>
 800137e:	0002      	movs	r2, r0
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b64      	cmp	r3, #100	; 0x64
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e28a      	b.n	80018a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138c:	4b8a      	ldr	r3, [pc, #552]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	029b      	lsls	r3, r3, #10
 8001394:	4013      	ands	r3, r2
 8001396:	d0f0      	beq.n	800137a <HAL_RCC_OscConfig+0xee>
 8001398:	e015      	b.n	80013c6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139a:	f7ff fc5b 	bl	8000c54 <HAL_GetTick>
 800139e:	0003      	movs	r3, r0
 80013a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a4:	f7ff fc56 	bl	8000c54 <HAL_GetTick>
 80013a8:	0002      	movs	r2, r0
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	; 0x64
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e275      	b.n	80018a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b6:	4b80      	ldr	r3, [pc, #512]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	029b      	lsls	r3, r3, #10
 80013be:	4013      	ands	r3, r2
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x118>
 80013c2:	e000      	b.n	80013c6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2202      	movs	r2, #2
 80013cc:	4013      	ands	r3, r2
 80013ce:	d100      	bne.n	80013d2 <HAL_RCC_OscConfig+0x146>
 80013d0:	e069      	b.n	80014a6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013d2:	4b79      	ldr	r3, [pc, #484]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	220c      	movs	r2, #12
 80013d8:	4013      	ands	r3, r2
 80013da:	d00b      	beq.n	80013f4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013dc:	4b76      	ldr	r3, [pc, #472]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	220c      	movs	r2, #12
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b08      	cmp	r3, #8
 80013e6:	d11c      	bne.n	8001422 <HAL_RCC_OscConfig+0x196>
 80013e8:	4b73      	ldr	r3, [pc, #460]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	025b      	lsls	r3, r3, #9
 80013f0:	4013      	ands	r3, r2
 80013f2:	d116      	bne.n	8001422 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f4:	4b70      	ldr	r3, [pc, #448]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2202      	movs	r2, #2
 80013fa:	4013      	ands	r3, r2
 80013fc:	d005      	beq.n	800140a <HAL_RCC_OscConfig+0x17e>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d001      	beq.n	800140a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e24b      	b.n	80018a2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140a:	4b6b      	ldr	r3, [pc, #428]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	22f8      	movs	r2, #248	; 0xf8
 8001410:	4393      	bics	r3, r2
 8001412:	0019      	movs	r1, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	00da      	lsls	r2, r3, #3
 800141a:	4b67      	ldr	r3, [pc, #412]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 800141c:	430a      	orrs	r2, r1
 800141e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001420:	e041      	b.n	80014a6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d024      	beq.n	8001474 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800142a:	4b63      	ldr	r3, [pc, #396]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4b62      	ldr	r3, [pc, #392]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001430:	2101      	movs	r1, #1
 8001432:	430a      	orrs	r2, r1
 8001434:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001436:	f7ff fc0d 	bl	8000c54 <HAL_GetTick>
 800143a:	0003      	movs	r3, r0
 800143c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001440:	f7ff fc08 	bl	8000c54 <HAL_GetTick>
 8001444:	0002      	movs	r2, r0
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e227      	b.n	80018a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001452:	4b59      	ldr	r3, [pc, #356]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2202      	movs	r2, #2
 8001458:	4013      	ands	r3, r2
 800145a:	d0f1      	beq.n	8001440 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145c:	4b56      	ldr	r3, [pc, #344]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	22f8      	movs	r2, #248	; 0xf8
 8001462:	4393      	bics	r3, r2
 8001464:	0019      	movs	r1, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	00da      	lsls	r2, r3, #3
 800146c:	4b52      	ldr	r3, [pc, #328]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 800146e:	430a      	orrs	r2, r1
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	e018      	b.n	80014a6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001474:	4b50      	ldr	r3, [pc, #320]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b4f      	ldr	r3, [pc, #316]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 800147a:	2101      	movs	r1, #1
 800147c:	438a      	bics	r2, r1
 800147e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001480:	f7ff fbe8 	bl	8000c54 <HAL_GetTick>
 8001484:	0003      	movs	r3, r0
 8001486:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800148a:	f7ff fbe3 	bl	8000c54 <HAL_GetTick>
 800148e:	0002      	movs	r2, r0
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e202      	b.n	80018a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149c:	4b46      	ldr	r3, [pc, #280]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2202      	movs	r2, #2
 80014a2:	4013      	ands	r3, r2
 80014a4:	d1f1      	bne.n	800148a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2208      	movs	r2, #8
 80014ac:	4013      	ands	r3, r2
 80014ae:	d036      	beq.n	800151e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d019      	beq.n	80014ec <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b8:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80014ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014bc:	4b3e      	ldr	r3, [pc, #248]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80014be:	2101      	movs	r1, #1
 80014c0:	430a      	orrs	r2, r1
 80014c2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c4:	f7ff fbc6 	bl	8000c54 <HAL_GetTick>
 80014c8:	0003      	movs	r3, r0
 80014ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ce:	f7ff fbc1 	bl	8000c54 <HAL_GetTick>
 80014d2:	0002      	movs	r2, r0
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e1e0      	b.n	80018a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e0:	4b35      	ldr	r3, [pc, #212]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	2202      	movs	r2, #2
 80014e6:	4013      	ands	r3, r2
 80014e8:	d0f1      	beq.n	80014ce <HAL_RCC_OscConfig+0x242>
 80014ea:	e018      	b.n	800151e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ec:	4b32      	ldr	r3, [pc, #200]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80014ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014f0:	4b31      	ldr	r3, [pc, #196]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80014f2:	2101      	movs	r1, #1
 80014f4:	438a      	bics	r2, r1
 80014f6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f8:	f7ff fbac 	bl	8000c54 <HAL_GetTick>
 80014fc:	0003      	movs	r3, r0
 80014fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001502:	f7ff fba7 	bl	8000c54 <HAL_GetTick>
 8001506:	0002      	movs	r2, r0
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e1c6      	b.n	80018a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001514:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	2202      	movs	r2, #2
 800151a:	4013      	ands	r3, r2
 800151c:	d1f1      	bne.n	8001502 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2204      	movs	r2, #4
 8001524:	4013      	ands	r3, r2
 8001526:	d100      	bne.n	800152a <HAL_RCC_OscConfig+0x29e>
 8001528:	e0b4      	b.n	8001694 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152a:	201f      	movs	r0, #31
 800152c:	183b      	adds	r3, r7, r0
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001532:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001534:	69da      	ldr	r2, [r3, #28]
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	055b      	lsls	r3, r3, #21
 800153a:	4013      	ands	r3, r2
 800153c:	d110      	bne.n	8001560 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001540:	69da      	ldr	r2, [r3, #28]
 8001542:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 8001544:	2180      	movs	r1, #128	; 0x80
 8001546:	0549      	lsls	r1, r1, #21
 8001548:	430a      	orrs	r2, r1
 800154a:	61da      	str	r2, [r3, #28]
 800154c:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 800154e:	69da      	ldr	r2, [r3, #28]
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	055b      	lsls	r3, r3, #21
 8001554:	4013      	ands	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800155a:	183b      	adds	r3, r7, r0
 800155c:	2201      	movs	r2, #1
 800155e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001560:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4013      	ands	r3, r2
 800156a:	d11a      	bne.n	80015a2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800156c:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 8001572:	2180      	movs	r1, #128	; 0x80
 8001574:	0049      	lsls	r1, r1, #1
 8001576:	430a      	orrs	r2, r1
 8001578:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800157a:	f7ff fb6b 	bl	8000c54 <HAL_GetTick>
 800157e:	0003      	movs	r3, r0
 8001580:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001584:	f7ff fb66 	bl	8000c54 <HAL_GetTick>
 8001588:	0002      	movs	r2, r0
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b64      	cmp	r3, #100	; 0x64
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e185      	b.n	80018a2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	2380      	movs	r3, #128	; 0x80
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4013      	ands	r3, r2
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d10e      	bne.n	80015c8 <HAL_RCC_OscConfig+0x33c>
 80015aa:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80015ac:	6a1a      	ldr	r2, [r3, #32]
 80015ae:	4b02      	ldr	r3, [pc, #8]	; (80015b8 <HAL_RCC_OscConfig+0x32c>)
 80015b0:	2101      	movs	r1, #1
 80015b2:	430a      	orrs	r2, r1
 80015b4:	621a      	str	r2, [r3, #32]
 80015b6:	e035      	b.n	8001624 <HAL_RCC_OscConfig+0x398>
 80015b8:	40021000 	.word	0x40021000
 80015bc:	fffeffff 	.word	0xfffeffff
 80015c0:	fffbffff 	.word	0xfffbffff
 80015c4:	40007000 	.word	0x40007000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d10c      	bne.n	80015ea <HAL_RCC_OscConfig+0x35e>
 80015d0:	4bb6      	ldr	r3, [pc, #728]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 80015d2:	6a1a      	ldr	r2, [r3, #32]
 80015d4:	4bb5      	ldr	r3, [pc, #724]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 80015d6:	2101      	movs	r1, #1
 80015d8:	438a      	bics	r2, r1
 80015da:	621a      	str	r2, [r3, #32]
 80015dc:	4bb3      	ldr	r3, [pc, #716]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 80015de:	6a1a      	ldr	r2, [r3, #32]
 80015e0:	4bb2      	ldr	r3, [pc, #712]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 80015e2:	2104      	movs	r1, #4
 80015e4:	438a      	bics	r2, r1
 80015e6:	621a      	str	r2, [r3, #32]
 80015e8:	e01c      	b.n	8001624 <HAL_RCC_OscConfig+0x398>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b05      	cmp	r3, #5
 80015f0:	d10c      	bne.n	800160c <HAL_RCC_OscConfig+0x380>
 80015f2:	4bae      	ldr	r3, [pc, #696]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 80015f4:	6a1a      	ldr	r2, [r3, #32]
 80015f6:	4bad      	ldr	r3, [pc, #692]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 80015f8:	2104      	movs	r1, #4
 80015fa:	430a      	orrs	r2, r1
 80015fc:	621a      	str	r2, [r3, #32]
 80015fe:	4bab      	ldr	r3, [pc, #684]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 8001600:	6a1a      	ldr	r2, [r3, #32]
 8001602:	4baa      	ldr	r3, [pc, #680]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 8001604:	2101      	movs	r1, #1
 8001606:	430a      	orrs	r2, r1
 8001608:	621a      	str	r2, [r3, #32]
 800160a:	e00b      	b.n	8001624 <HAL_RCC_OscConfig+0x398>
 800160c:	4ba7      	ldr	r3, [pc, #668]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 800160e:	6a1a      	ldr	r2, [r3, #32]
 8001610:	4ba6      	ldr	r3, [pc, #664]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 8001612:	2101      	movs	r1, #1
 8001614:	438a      	bics	r2, r1
 8001616:	621a      	str	r2, [r3, #32]
 8001618:	4ba4      	ldr	r3, [pc, #656]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 800161a:	6a1a      	ldr	r2, [r3, #32]
 800161c:	4ba3      	ldr	r3, [pc, #652]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 800161e:	2104      	movs	r1, #4
 8001620:	438a      	bics	r2, r1
 8001622:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d014      	beq.n	8001656 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162c:	f7ff fb12 	bl	8000c54 <HAL_GetTick>
 8001630:	0003      	movs	r3, r0
 8001632:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001634:	e009      	b.n	800164a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001636:	f7ff fb0d 	bl	8000c54 <HAL_GetTick>
 800163a:	0002      	movs	r2, r0
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	4a9b      	ldr	r2, [pc, #620]	; (80018b0 <HAL_RCC_OscConfig+0x624>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e12b      	b.n	80018a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800164a:	4b98      	ldr	r3, [pc, #608]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	2202      	movs	r2, #2
 8001650:	4013      	ands	r3, r2
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x3aa>
 8001654:	e013      	b.n	800167e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001656:	f7ff fafd 	bl	8000c54 <HAL_GetTick>
 800165a:	0003      	movs	r3, r0
 800165c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800165e:	e009      	b.n	8001674 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001660:	f7ff faf8 	bl	8000c54 <HAL_GetTick>
 8001664:	0002      	movs	r2, r0
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	4a91      	ldr	r2, [pc, #580]	; (80018b0 <HAL_RCC_OscConfig+0x624>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e116      	b.n	80018a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001674:	4b8d      	ldr	r3, [pc, #564]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	2202      	movs	r2, #2
 800167a:	4013      	ands	r3, r2
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800167e:	231f      	movs	r3, #31
 8001680:	18fb      	adds	r3, r7, r3
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d105      	bne.n	8001694 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001688:	4b88      	ldr	r3, [pc, #544]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 800168a:	69da      	ldr	r2, [r3, #28]
 800168c:	4b87      	ldr	r3, [pc, #540]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 800168e:	4989      	ldr	r1, [pc, #548]	; (80018b4 <HAL_RCC_OscConfig+0x628>)
 8001690:	400a      	ands	r2, r1
 8001692:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2210      	movs	r2, #16
 800169a:	4013      	ands	r3, r2
 800169c:	d063      	beq.n	8001766 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d12a      	bne.n	80016fc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016a6:	4b81      	ldr	r3, [pc, #516]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 80016a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016aa:	4b80      	ldr	r3, [pc, #512]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 80016ac:	2104      	movs	r1, #4
 80016ae:	430a      	orrs	r2, r1
 80016b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80016b2:	4b7e      	ldr	r3, [pc, #504]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 80016b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016b6:	4b7d      	ldr	r3, [pc, #500]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 80016b8:	2101      	movs	r1, #1
 80016ba:	430a      	orrs	r2, r1
 80016bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016be:	f7ff fac9 	bl	8000c54 <HAL_GetTick>
 80016c2:	0003      	movs	r3, r0
 80016c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016c8:	f7ff fac4 	bl	8000c54 <HAL_GetTick>
 80016cc:	0002      	movs	r2, r0
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e0e3      	b.n	80018a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016da:	4b74      	ldr	r3, [pc, #464]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 80016dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016de:	2202      	movs	r2, #2
 80016e0:	4013      	ands	r3, r2
 80016e2:	d0f1      	beq.n	80016c8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016e4:	4b71      	ldr	r3, [pc, #452]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 80016e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e8:	22f8      	movs	r2, #248	; 0xf8
 80016ea:	4393      	bics	r3, r2
 80016ec:	0019      	movs	r1, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	00da      	lsls	r2, r3, #3
 80016f4:	4b6d      	ldr	r3, [pc, #436]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 80016f6:	430a      	orrs	r2, r1
 80016f8:	635a      	str	r2, [r3, #52]	; 0x34
 80016fa:	e034      	b.n	8001766 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	3305      	adds	r3, #5
 8001702:	d111      	bne.n	8001728 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001704:	4b69      	ldr	r3, [pc, #420]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 8001706:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001708:	4b68      	ldr	r3, [pc, #416]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 800170a:	2104      	movs	r1, #4
 800170c:	438a      	bics	r2, r1
 800170e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001710:	4b66      	ldr	r3, [pc, #408]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 8001712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001714:	22f8      	movs	r2, #248	; 0xf8
 8001716:	4393      	bics	r3, r2
 8001718:	0019      	movs	r1, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	00da      	lsls	r2, r3, #3
 8001720:	4b62      	ldr	r3, [pc, #392]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 8001722:	430a      	orrs	r2, r1
 8001724:	635a      	str	r2, [r3, #52]	; 0x34
 8001726:	e01e      	b.n	8001766 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001728:	4b60      	ldr	r3, [pc, #384]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 800172a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800172c:	4b5f      	ldr	r3, [pc, #380]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 800172e:	2104      	movs	r1, #4
 8001730:	430a      	orrs	r2, r1
 8001732:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001734:	4b5d      	ldr	r3, [pc, #372]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 8001736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001738:	4b5c      	ldr	r3, [pc, #368]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 800173a:	2101      	movs	r1, #1
 800173c:	438a      	bics	r2, r1
 800173e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001740:	f7ff fa88 	bl	8000c54 <HAL_GetTick>
 8001744:	0003      	movs	r3, r0
 8001746:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800174a:	f7ff fa83 	bl	8000c54 <HAL_GetTick>
 800174e:	0002      	movs	r2, r0
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e0a2      	b.n	80018a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800175c:	4b53      	ldr	r3, [pc, #332]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 800175e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001760:	2202      	movs	r2, #2
 8001762:	4013      	ands	r3, r2
 8001764:	d1f1      	bne.n	800174a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d100      	bne.n	8001770 <HAL_RCC_OscConfig+0x4e4>
 800176e:	e097      	b.n	80018a0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001770:	4b4e      	ldr	r3, [pc, #312]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	220c      	movs	r2, #12
 8001776:	4013      	ands	r3, r2
 8001778:	2b08      	cmp	r3, #8
 800177a:	d100      	bne.n	800177e <HAL_RCC_OscConfig+0x4f2>
 800177c:	e06b      	b.n	8001856 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d14c      	bne.n	8001820 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001786:	4b49      	ldr	r3, [pc, #292]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	4b48      	ldr	r3, [pc, #288]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 800178c:	494a      	ldr	r1, [pc, #296]	; (80018b8 <HAL_RCC_OscConfig+0x62c>)
 800178e:	400a      	ands	r2, r1
 8001790:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001792:	f7ff fa5f 	bl	8000c54 <HAL_GetTick>
 8001796:	0003      	movs	r3, r0
 8001798:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800179c:	f7ff fa5a 	bl	8000c54 <HAL_GetTick>
 80017a0:	0002      	movs	r2, r0
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e079      	b.n	80018a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ae:	4b3f      	ldr	r3, [pc, #252]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	049b      	lsls	r3, r3, #18
 80017b6:	4013      	ands	r3, r2
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ba:	4b3c      	ldr	r3, [pc, #240]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	220f      	movs	r2, #15
 80017c0:	4393      	bics	r3, r2
 80017c2:	0019      	movs	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c8:	4b38      	ldr	r3, [pc, #224]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 80017ca:	430a      	orrs	r2, r1
 80017cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80017ce:	4b37      	ldr	r3, [pc, #220]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4a3a      	ldr	r2, [pc, #232]	; (80018bc <HAL_RCC_OscConfig+0x630>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	0019      	movs	r1, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	431a      	orrs	r2, r3
 80017e2:	4b32      	ldr	r3, [pc, #200]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 80017e4:	430a      	orrs	r2, r1
 80017e6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017e8:	4b30      	ldr	r3, [pc, #192]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b2f      	ldr	r3, [pc, #188]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 80017ee:	2180      	movs	r1, #128	; 0x80
 80017f0:	0449      	lsls	r1, r1, #17
 80017f2:	430a      	orrs	r2, r1
 80017f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f6:	f7ff fa2d 	bl	8000c54 <HAL_GetTick>
 80017fa:	0003      	movs	r3, r0
 80017fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001800:	f7ff fa28 	bl	8000c54 <HAL_GetTick>
 8001804:	0002      	movs	r2, r0
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e047      	b.n	80018a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001812:	4b26      	ldr	r3, [pc, #152]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	049b      	lsls	r3, r3, #18
 800181a:	4013      	ands	r3, r2
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0x574>
 800181e:	e03f      	b.n	80018a0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001820:	4b22      	ldr	r3, [pc, #136]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b21      	ldr	r3, [pc, #132]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 8001826:	4924      	ldr	r1, [pc, #144]	; (80018b8 <HAL_RCC_OscConfig+0x62c>)
 8001828:	400a      	ands	r2, r1
 800182a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182c:	f7ff fa12 	bl	8000c54 <HAL_GetTick>
 8001830:	0003      	movs	r3, r0
 8001832:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001836:	f7ff fa0d 	bl	8000c54 <HAL_GetTick>
 800183a:	0002      	movs	r2, r0
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e02c      	b.n	80018a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001848:	4b18      	ldr	r3, [pc, #96]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	049b      	lsls	r3, r3, #18
 8001850:	4013      	ands	r3, r2
 8001852:	d1f0      	bne.n	8001836 <HAL_RCC_OscConfig+0x5aa>
 8001854:	e024      	b.n	80018a0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e01f      	b.n	80018a2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001868:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_RCC_OscConfig+0x620>)
 800186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	025b      	lsls	r3, r3, #9
 8001874:	401a      	ands	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	429a      	cmp	r2, r3
 800187c:	d10e      	bne.n	800189c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	220f      	movs	r2, #15
 8001882:	401a      	ands	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001888:	429a      	cmp	r2, r3
 800188a:	d107      	bne.n	800189c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	23f0      	movs	r3, #240	; 0xf0
 8001890:	039b      	lsls	r3, r3, #14
 8001892:	401a      	ands	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001898:	429a      	cmp	r2, r3
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e000      	b.n	80018a2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	0018      	movs	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	b008      	add	sp, #32
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	40021000 	.word	0x40021000
 80018b0:	00001388 	.word	0x00001388
 80018b4:	efffffff 	.word	0xefffffff
 80018b8:	feffffff 	.word	0xfeffffff
 80018bc:	ffc2ffff 	.word	0xffc2ffff

080018c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0b3      	b.n	8001a3c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018d4:	4b5b      	ldr	r3, [pc, #364]	; (8001a44 <HAL_RCC_ClockConfig+0x184>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2201      	movs	r2, #1
 80018da:	4013      	ands	r3, r2
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d911      	bls.n	8001906 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	4b58      	ldr	r3, [pc, #352]	; (8001a44 <HAL_RCC_ClockConfig+0x184>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2201      	movs	r2, #1
 80018e8:	4393      	bics	r3, r2
 80018ea:	0019      	movs	r1, r3
 80018ec:	4b55      	ldr	r3, [pc, #340]	; (8001a44 <HAL_RCC_ClockConfig+0x184>)
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f4:	4b53      	ldr	r3, [pc, #332]	; (8001a44 <HAL_RCC_ClockConfig+0x184>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2201      	movs	r2, #1
 80018fa:	4013      	ands	r3, r2
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d001      	beq.n	8001906 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e09a      	b.n	8001a3c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2202      	movs	r2, #2
 800190c:	4013      	ands	r3, r2
 800190e:	d015      	beq.n	800193c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2204      	movs	r2, #4
 8001916:	4013      	ands	r3, r2
 8001918:	d006      	beq.n	8001928 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800191a:	4b4b      	ldr	r3, [pc, #300]	; (8001a48 <HAL_RCC_ClockConfig+0x188>)
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	4b4a      	ldr	r3, [pc, #296]	; (8001a48 <HAL_RCC_ClockConfig+0x188>)
 8001920:	21e0      	movs	r1, #224	; 0xe0
 8001922:	00c9      	lsls	r1, r1, #3
 8001924:	430a      	orrs	r2, r1
 8001926:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001928:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <HAL_RCC_ClockConfig+0x188>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	22f0      	movs	r2, #240	; 0xf0
 800192e:	4393      	bics	r3, r2
 8001930:	0019      	movs	r1, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	4b44      	ldr	r3, [pc, #272]	; (8001a48 <HAL_RCC_ClockConfig+0x188>)
 8001938:	430a      	orrs	r2, r1
 800193a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2201      	movs	r2, #1
 8001942:	4013      	ands	r3, r2
 8001944:	d040      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d107      	bne.n	800195e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194e:	4b3e      	ldr	r3, [pc, #248]	; (8001a48 <HAL_RCC_ClockConfig+0x188>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	2380      	movs	r3, #128	; 0x80
 8001954:	029b      	lsls	r3, r3, #10
 8001956:	4013      	ands	r3, r2
 8001958:	d114      	bne.n	8001984 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e06e      	b.n	8001a3c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b02      	cmp	r3, #2
 8001964:	d107      	bne.n	8001976 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001966:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <HAL_RCC_ClockConfig+0x188>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	049b      	lsls	r3, r3, #18
 800196e:	4013      	ands	r3, r2
 8001970:	d108      	bne.n	8001984 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e062      	b.n	8001a3c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001976:	4b34      	ldr	r3, [pc, #208]	; (8001a48 <HAL_RCC_ClockConfig+0x188>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2202      	movs	r2, #2
 800197c:	4013      	ands	r3, r2
 800197e:	d101      	bne.n	8001984 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e05b      	b.n	8001a3c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001984:	4b30      	ldr	r3, [pc, #192]	; (8001a48 <HAL_RCC_ClockConfig+0x188>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2203      	movs	r2, #3
 800198a:	4393      	bics	r3, r2
 800198c:	0019      	movs	r1, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <HAL_RCC_ClockConfig+0x188>)
 8001994:	430a      	orrs	r2, r1
 8001996:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001998:	f7ff f95c 	bl	8000c54 <HAL_GetTick>
 800199c:	0003      	movs	r3, r0
 800199e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a0:	e009      	b.n	80019b6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a2:	f7ff f957 	bl	8000c54 <HAL_GetTick>
 80019a6:	0002      	movs	r2, r0
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	4a27      	ldr	r2, [pc, #156]	; (8001a4c <HAL_RCC_ClockConfig+0x18c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e042      	b.n	8001a3c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b6:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <HAL_RCC_ClockConfig+0x188>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	220c      	movs	r2, #12
 80019bc:	401a      	ands	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d1ec      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019c8:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <HAL_RCC_ClockConfig+0x184>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2201      	movs	r2, #1
 80019ce:	4013      	ands	r3, r2
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d211      	bcs.n	80019fa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d6:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <HAL_RCC_ClockConfig+0x184>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2201      	movs	r2, #1
 80019dc:	4393      	bics	r3, r2
 80019de:	0019      	movs	r1, r3
 80019e0:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_RCC_ClockConfig+0x184>)
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <HAL_RCC_ClockConfig+0x184>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2201      	movs	r2, #1
 80019ee:	4013      	ands	r3, r2
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d001      	beq.n	80019fa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e020      	b.n	8001a3c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2204      	movs	r2, #4
 8001a00:	4013      	ands	r3, r2
 8001a02:	d009      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a04:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <HAL_RCC_ClockConfig+0x188>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	4a11      	ldr	r2, [pc, #68]	; (8001a50 <HAL_RCC_ClockConfig+0x190>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	0019      	movs	r1, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <HAL_RCC_ClockConfig+0x188>)
 8001a14:	430a      	orrs	r2, r1
 8001a16:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a18:	f000 f820 	bl	8001a5c <HAL_RCC_GetSysClockFreq>
 8001a1c:	0001      	movs	r1, r0
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_RCC_ClockConfig+0x188>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	091b      	lsrs	r3, r3, #4
 8001a24:	220f      	movs	r2, #15
 8001a26:	4013      	ands	r3, r2
 8001a28:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <HAL_RCC_ClockConfig+0x194>)
 8001a2a:	5cd3      	ldrb	r3, [r2, r3]
 8001a2c:	000a      	movs	r2, r1
 8001a2e:	40da      	lsrs	r2, r3
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_RCC_ClockConfig+0x198>)
 8001a32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a34:	2000      	movs	r0, #0
 8001a36:	f7ff f8c7 	bl	8000bc8 <HAL_InitTick>
  
  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b004      	add	sp, #16
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40022000 	.word	0x40022000
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	00001388 	.word	0x00001388
 8001a50:	fffff8ff 	.word	0xfffff8ff
 8001a54:	080030fc 	.word	0x080030fc
 8001a58:	20000000 	.word	0x20000000

08001a5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001a76:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	220c      	movs	r2, #12
 8001a80:	4013      	ands	r3, r2
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d002      	beq.n	8001a8c <HAL_RCC_GetSysClockFreq+0x30>
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d003      	beq.n	8001a92 <HAL_RCC_GetSysClockFreq+0x36>
 8001a8a:	e02c      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a8e:	613b      	str	r3, [r7, #16]
      break;
 8001a90:	e02c      	b.n	8001aec <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	0c9b      	lsrs	r3, r3, #18
 8001a96:	220f      	movs	r2, #15
 8001a98:	4013      	ands	r3, r2
 8001a9a:	4a19      	ldr	r2, [pc, #100]	; (8001b00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a9c:	5cd3      	ldrb	r3, [r2, r3]
 8001a9e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001aa0:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa4:	220f      	movs	r2, #15
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	4a16      	ldr	r2, [pc, #88]	; (8001b04 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001aaa:	5cd3      	ldrb	r3, [r2, r3]
 8001aac:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	025b      	lsls	r3, r3, #9
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d009      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	4810      	ldr	r0, [pc, #64]	; (8001afc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001abc:	f7fe fb24 	bl	8000108 <__udivsi3>
 8001ac0:	0003      	movs	r3, r0
 8001ac2:	001a      	movs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4353      	muls	r3, r2
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	e009      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	000a      	movs	r2, r1
 8001ad0:	0152      	lsls	r2, r2, #5
 8001ad2:	1a52      	subs	r2, r2, r1
 8001ad4:	0193      	lsls	r3, r2, #6
 8001ad6:	1a9b      	subs	r3, r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	185b      	adds	r3, r3, r1
 8001adc:	021b      	lsls	r3, r3, #8
 8001ade:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	613b      	str	r3, [r7, #16]
      break;
 8001ae4:	e002      	b.n	8001aec <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ae8:	613b      	str	r3, [r7, #16]
      break;
 8001aea:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001aec:	693b      	ldr	r3, [r7, #16]
}
 8001aee:	0018      	movs	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	b006      	add	sp, #24
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	40021000 	.word	0x40021000
 8001afc:	007a1200 	.word	0x007a1200
 8001b00:	08003114 	.word	0x08003114
 8001b04:	08003124 	.word	0x08003124

08001b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b0c:	4b02      	ldr	r3, [pc, #8]	; (8001b18 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
}
 8001b10:	0018      	movs	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	20000000 	.word	0x20000000

08001b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001b20:	f7ff fff2 	bl	8001b08 <HAL_RCC_GetHCLKFreq>
 8001b24:	0001      	movs	r1, r0
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	0a1b      	lsrs	r3, r3, #8
 8001b2c:	2207      	movs	r2, #7
 8001b2e:	4013      	ands	r3, r2
 8001b30:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b32:	5cd3      	ldrb	r3, [r2, r3]
 8001b34:	40d9      	lsrs	r1, r3
 8001b36:	000b      	movs	r3, r1
}    
 8001b38:	0018      	movs	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	40021000 	.word	0x40021000
 8001b44:	0800310c 	.word	0x0800310c

08001b48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	025b      	lsls	r3, r3, #9
 8001b60:	4013      	ands	r3, r2
 8001b62:	d100      	bne.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001b64:	e08e      	b.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001b66:	2017      	movs	r0, #23
 8001b68:	183b      	adds	r3, r7, r0
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b6e:	4b5f      	ldr	r3, [pc, #380]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001b70:	69da      	ldr	r2, [r3, #28]
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	055b      	lsls	r3, r3, #21
 8001b76:	4013      	ands	r3, r2
 8001b78:	d110      	bne.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b7a:	4b5c      	ldr	r3, [pc, #368]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001b7c:	69da      	ldr	r2, [r3, #28]
 8001b7e:	4b5b      	ldr	r3, [pc, #364]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001b80:	2180      	movs	r1, #128	; 0x80
 8001b82:	0549      	lsls	r1, r1, #21
 8001b84:	430a      	orrs	r2, r1
 8001b86:	61da      	str	r2, [r3, #28]
 8001b88:	4b58      	ldr	r3, [pc, #352]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001b8a:	69da      	ldr	r2, [r3, #28]
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	055b      	lsls	r3, r3, #21
 8001b90:	4013      	ands	r3, r2
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b96:	183b      	adds	r3, r7, r0
 8001b98:	2201      	movs	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9c:	4b54      	ldr	r3, [pc, #336]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d11a      	bne.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ba8:	4b51      	ldr	r3, [pc, #324]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b50      	ldr	r3, [pc, #320]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001bae:	2180      	movs	r1, #128	; 0x80
 8001bb0:	0049      	lsls	r1, r1, #1
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bb6:	f7ff f84d 	bl	8000c54 <HAL_GetTick>
 8001bba:	0003      	movs	r3, r0
 8001bbc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc0:	f7ff f848 	bl	8000c54 <HAL_GetTick>
 8001bc4:	0002      	movs	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b64      	cmp	r3, #100	; 0x64
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e087      	b.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd2:	4b47      	ldr	r3, [pc, #284]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bde:	4b43      	ldr	r3, [pc, #268]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001be0:	6a1a      	ldr	r2, [r3, #32]
 8001be2:	23c0      	movs	r3, #192	; 0xc0
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4013      	ands	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d034      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	23c0      	movs	r3, #192	; 0xc0
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d02c      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c00:	4b3a      	ldr	r3, [pc, #232]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	4a3b      	ldr	r2, [pc, #236]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c0a:	4b38      	ldr	r3, [pc, #224]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c0c:	6a1a      	ldr	r2, [r3, #32]
 8001c0e:	4b37      	ldr	r3, [pc, #220]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c10:	2180      	movs	r1, #128	; 0x80
 8001c12:	0249      	lsls	r1, r1, #9
 8001c14:	430a      	orrs	r2, r1
 8001c16:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c18:	4b34      	ldr	r3, [pc, #208]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c1a:	6a1a      	ldr	r2, [r3, #32]
 8001c1c:	4b33      	ldr	r3, [pc, #204]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c1e:	4936      	ldr	r1, [pc, #216]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001c20:	400a      	ands	r2, r1
 8001c22:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c24:	4b31      	ldr	r3, [pc, #196]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d013      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c32:	f7ff f80f 	bl	8000c54 <HAL_GetTick>
 8001c36:	0003      	movs	r3, r0
 8001c38:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c3a:	e009      	b.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3c:	f7ff f80a 	bl	8000c54 <HAL_GetTick>
 8001c40:	0002      	movs	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	4a2d      	ldr	r2, [pc, #180]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e048      	b.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c50:	4b26      	ldr	r3, [pc, #152]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	2202      	movs	r2, #2
 8001c56:	4013      	ands	r3, r2
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c5a:	4b24      	ldr	r3, [pc, #144]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	4a25      	ldr	r2, [pc, #148]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	0019      	movs	r1, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	4b20      	ldr	r3, [pc, #128]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c6e:	2317      	movs	r3, #23
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d105      	bne.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c78:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c7a:	69da      	ldr	r2, [r3, #28]
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c7e:	4920      	ldr	r1, [pc, #128]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c80:	400a      	ands	r2, r1
 8001c82:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d009      	beq.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c8e:	4b17      	ldr	r3, [pc, #92]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	2203      	movs	r2, #3
 8001c94:	4393      	bics	r3, r2
 8001c96:	0019      	movs	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	4b13      	ldr	r3, [pc, #76]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d009      	beq.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001cac:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb0:	2210      	movs	r2, #16
 8001cb2:	4393      	bics	r3, r2
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d009      	beq.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ccc:	4b07      	ldr	r3, [pc, #28]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd0:	2240      	movs	r2, #64	; 0x40
 8001cd2:	4393      	bics	r3, r2
 8001cd4:	0019      	movs	r1, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691a      	ldr	r2, [r3, #16]
 8001cda:	4b04      	ldr	r3, [pc, #16]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	b006      	add	sp, #24
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40007000 	.word	0x40007000
 8001cf4:	fffffcff 	.word	0xfffffcff
 8001cf8:	fffeffff 	.word	0xfffeffff
 8001cfc:	00001388 	.word	0x00001388
 8001d00:	efffffff 	.word	0xefffffff

08001d04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e042      	b.n	8001d9c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	223d      	movs	r2, #61	; 0x3d
 8001d1a:	5c9b      	ldrb	r3, [r3, r2]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d107      	bne.n	8001d32 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	223c      	movs	r2, #60	; 0x3c
 8001d26:	2100      	movs	r1, #0
 8001d28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f7fe fdc7 	bl	80008c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	223d      	movs	r2, #61	; 0x3d
 8001d36:	2102      	movs	r1, #2
 8001d38:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3304      	adds	r3, #4
 8001d42:	0019      	movs	r1, r3
 8001d44:	0010      	movs	r0, r2
 8001d46:	f000 f94b 	bl	8001fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2246      	movs	r2, #70	; 0x46
 8001d4e:	2101      	movs	r1, #1
 8001d50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	223e      	movs	r2, #62	; 0x3e
 8001d56:	2101      	movs	r1, #1
 8001d58:	5499      	strb	r1, [r3, r2]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	223f      	movs	r2, #63	; 0x3f
 8001d5e:	2101      	movs	r1, #1
 8001d60:	5499      	strb	r1, [r3, r2]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2240      	movs	r2, #64	; 0x40
 8001d66:	2101      	movs	r1, #1
 8001d68:	5499      	strb	r1, [r3, r2]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2241      	movs	r2, #65	; 0x41
 8001d6e:	2101      	movs	r1, #1
 8001d70:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2242      	movs	r2, #66	; 0x42
 8001d76:	2101      	movs	r1, #1
 8001d78:	5499      	strb	r1, [r3, r2]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2243      	movs	r2, #67	; 0x43
 8001d7e:	2101      	movs	r1, #1
 8001d80:	5499      	strb	r1, [r3, r2]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2244      	movs	r2, #68	; 0x44
 8001d86:	2101      	movs	r1, #1
 8001d88:	5499      	strb	r1, [r3, r2]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2245      	movs	r2, #69	; 0x45
 8001d8e:	2101      	movs	r1, #1
 8001d90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	223d      	movs	r2, #61	; 0x3d
 8001d96:	2101      	movs	r1, #1
 8001d98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b002      	add	sp, #8
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	223d      	movs	r2, #61	; 0x3d
 8001db0:	5c9b      	ldrb	r3, [r3, r2]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d001      	beq.n	8001dbc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e033      	b.n	8001e24 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	223d      	movs	r2, #61	; 0x3d
 8001dc0:	2102      	movs	r1, #2
 8001dc2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a18      	ldr	r2, [pc, #96]	; (8001e2c <HAL_TIM_Base_Start+0x88>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d00f      	beq.n	8001dee <HAL_TIM_Base_Start+0x4a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	2380      	movs	r3, #128	; 0x80
 8001dd4:	05db      	lsls	r3, r3, #23
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d009      	beq.n	8001dee <HAL_TIM_Base_Start+0x4a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <HAL_TIM_Base_Start+0x8c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d004      	beq.n	8001dee <HAL_TIM_Base_Start+0x4a>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a12      	ldr	r2, [pc, #72]	; (8001e34 <HAL_TIM_Base_Start+0x90>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d111      	bne.n	8001e12 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2207      	movs	r2, #7
 8001df6:	4013      	ands	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2b06      	cmp	r3, #6
 8001dfe:	d010      	beq.n	8001e22 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e10:	e007      	b.n	8001e22 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	0018      	movs	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b004      	add	sp, #16
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40012c00 	.word	0x40012c00
 8001e30:	40000400 	.word	0x40000400
 8001e34:	40014000 	.word	0x40014000

08001e38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e42:	230f      	movs	r3, #15
 8001e44:	18fb      	adds	r3, r7, r3
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	223c      	movs	r2, #60	; 0x3c
 8001e4e:	5c9b      	ldrb	r3, [r3, r2]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <HAL_TIM_ConfigClockSource+0x20>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e0bc      	b.n	8001fd2 <HAL_TIM_ConfigClockSource+0x19a>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	223c      	movs	r2, #60	; 0x3c
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	223d      	movs	r2, #61	; 0x3d
 8001e64:	2102      	movs	r1, #2
 8001e66:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2277      	movs	r2, #119	; 0x77
 8001e74:	4393      	bics	r3, r2
 8001e76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4a58      	ldr	r2, [pc, #352]	; (8001fdc <HAL_TIM_ConfigClockSource+0x1a4>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68ba      	ldr	r2, [r7, #8]
 8001e86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2280      	movs	r2, #128	; 0x80
 8001e8e:	0192      	lsls	r2, r2, #6
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d040      	beq.n	8001f16 <HAL_TIM_ConfigClockSource+0xde>
 8001e94:	2280      	movs	r2, #128	; 0x80
 8001e96:	0192      	lsls	r2, r2, #6
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d900      	bls.n	8001e9e <HAL_TIM_ConfigClockSource+0x66>
 8001e9c:	e088      	b.n	8001fb0 <HAL_TIM_ConfigClockSource+0x178>
 8001e9e:	2280      	movs	r2, #128	; 0x80
 8001ea0:	0152      	lsls	r2, r2, #5
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d100      	bne.n	8001ea8 <HAL_TIM_ConfigClockSource+0x70>
 8001ea6:	e088      	b.n	8001fba <HAL_TIM_ConfigClockSource+0x182>
 8001ea8:	2280      	movs	r2, #128	; 0x80
 8001eaa:	0152      	lsls	r2, r2, #5
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d900      	bls.n	8001eb2 <HAL_TIM_ConfigClockSource+0x7a>
 8001eb0:	e07e      	b.n	8001fb0 <HAL_TIM_ConfigClockSource+0x178>
 8001eb2:	2b70      	cmp	r3, #112	; 0x70
 8001eb4:	d018      	beq.n	8001ee8 <HAL_TIM_ConfigClockSource+0xb0>
 8001eb6:	d900      	bls.n	8001eba <HAL_TIM_ConfigClockSource+0x82>
 8001eb8:	e07a      	b.n	8001fb0 <HAL_TIM_ConfigClockSource+0x178>
 8001eba:	2b60      	cmp	r3, #96	; 0x60
 8001ebc:	d04f      	beq.n	8001f5e <HAL_TIM_ConfigClockSource+0x126>
 8001ebe:	d900      	bls.n	8001ec2 <HAL_TIM_ConfigClockSource+0x8a>
 8001ec0:	e076      	b.n	8001fb0 <HAL_TIM_ConfigClockSource+0x178>
 8001ec2:	2b50      	cmp	r3, #80	; 0x50
 8001ec4:	d03b      	beq.n	8001f3e <HAL_TIM_ConfigClockSource+0x106>
 8001ec6:	d900      	bls.n	8001eca <HAL_TIM_ConfigClockSource+0x92>
 8001ec8:	e072      	b.n	8001fb0 <HAL_TIM_ConfigClockSource+0x178>
 8001eca:	2b40      	cmp	r3, #64	; 0x40
 8001ecc:	d057      	beq.n	8001f7e <HAL_TIM_ConfigClockSource+0x146>
 8001ece:	d900      	bls.n	8001ed2 <HAL_TIM_ConfigClockSource+0x9a>
 8001ed0:	e06e      	b.n	8001fb0 <HAL_TIM_ConfigClockSource+0x178>
 8001ed2:	2b30      	cmp	r3, #48	; 0x30
 8001ed4:	d063      	beq.n	8001f9e <HAL_TIM_ConfigClockSource+0x166>
 8001ed6:	d86b      	bhi.n	8001fb0 <HAL_TIM_ConfigClockSource+0x178>
 8001ed8:	2b20      	cmp	r3, #32
 8001eda:	d060      	beq.n	8001f9e <HAL_TIM_ConfigClockSource+0x166>
 8001edc:	d868      	bhi.n	8001fb0 <HAL_TIM_ConfigClockSource+0x178>
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d05d      	beq.n	8001f9e <HAL_TIM_ConfigClockSource+0x166>
 8001ee2:	2b10      	cmp	r3, #16
 8001ee4:	d05b      	beq.n	8001f9e <HAL_TIM_ConfigClockSource+0x166>
 8001ee6:	e063      	b.n	8001fb0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ef8:	f000 f96c 	bl	80021d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2277      	movs	r2, #119	; 0x77
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	609a      	str	r2, [r3, #8]
      break;
 8001f14:	e052      	b.n	8001fbc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f26:	f000 f955 	bl	80021d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2180      	movs	r1, #128	; 0x80
 8001f36:	01c9      	lsls	r1, r1, #7
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	609a      	str	r2, [r3, #8]
      break;
 8001f3c:	e03e      	b.n	8001fbc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f4a:	001a      	movs	r2, r3
 8001f4c:	f000 f8c8 	bl	80020e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2150      	movs	r1, #80	; 0x50
 8001f56:	0018      	movs	r0, r3
 8001f58:	f000 f922 	bl	80021a0 <TIM_ITRx_SetConfig>
      break;
 8001f5c:	e02e      	b.n	8001fbc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f6a:	001a      	movs	r2, r3
 8001f6c:	f000 f8e6 	bl	800213c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2160      	movs	r1, #96	; 0x60
 8001f76:	0018      	movs	r0, r3
 8001f78:	f000 f912 	bl	80021a0 <TIM_ITRx_SetConfig>
      break;
 8001f7c:	e01e      	b.n	8001fbc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f8a:	001a      	movs	r2, r3
 8001f8c:	f000 f8a8 	bl	80020e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2140      	movs	r1, #64	; 0x40
 8001f96:	0018      	movs	r0, r3
 8001f98:	f000 f902 	bl	80021a0 <TIM_ITRx_SetConfig>
      break;
 8001f9c:	e00e      	b.n	8001fbc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	0019      	movs	r1, r3
 8001fa8:	0010      	movs	r0, r2
 8001faa:	f000 f8f9 	bl	80021a0 <TIM_ITRx_SetConfig>
      break;
 8001fae:	e005      	b.n	8001fbc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001fb0:	230f      	movs	r3, #15
 8001fb2:	18fb      	adds	r3, r7, r3
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	701a      	strb	r2, [r3, #0]
      break;
 8001fb8:	e000      	b.n	8001fbc <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001fba:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	223d      	movs	r2, #61	; 0x3d
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	223c      	movs	r2, #60	; 0x3c
 8001fc8:	2100      	movs	r1, #0
 8001fca:	5499      	strb	r1, [r3, r2]

  return status;
 8001fcc:	230f      	movs	r3, #15
 8001fce:	18fb      	adds	r3, r7, r3
 8001fd0:	781b      	ldrb	r3, [r3, #0]
}
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	b004      	add	sp, #16
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	ffff00ff 	.word	0xffff00ff

08001fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a34      	ldr	r2, [pc, #208]	; (80020c4 <TIM_Base_SetConfig+0xe4>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d008      	beq.n	800200a <TIM_Base_SetConfig+0x2a>
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	05db      	lsls	r3, r3, #23
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d003      	beq.n	800200a <TIM_Base_SetConfig+0x2a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a30      	ldr	r2, [pc, #192]	; (80020c8 <TIM_Base_SetConfig+0xe8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d108      	bne.n	800201c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2270      	movs	r2, #112	; 0x70
 800200e:	4393      	bics	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4313      	orrs	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a29      	ldr	r2, [pc, #164]	; (80020c4 <TIM_Base_SetConfig+0xe4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d018      	beq.n	8002056 <TIM_Base_SetConfig+0x76>
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	05db      	lsls	r3, r3, #23
 800202a:	429a      	cmp	r2, r3
 800202c:	d013      	beq.n	8002056 <TIM_Base_SetConfig+0x76>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a25      	ldr	r2, [pc, #148]	; (80020c8 <TIM_Base_SetConfig+0xe8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00f      	beq.n	8002056 <TIM_Base_SetConfig+0x76>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a24      	ldr	r2, [pc, #144]	; (80020cc <TIM_Base_SetConfig+0xec>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00b      	beq.n	8002056 <TIM_Base_SetConfig+0x76>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a23      	ldr	r2, [pc, #140]	; (80020d0 <TIM_Base_SetConfig+0xf0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d007      	beq.n	8002056 <TIM_Base_SetConfig+0x76>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a22      	ldr	r2, [pc, #136]	; (80020d4 <TIM_Base_SetConfig+0xf4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d003      	beq.n	8002056 <TIM_Base_SetConfig+0x76>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a21      	ldr	r2, [pc, #132]	; (80020d8 <TIM_Base_SetConfig+0xf8>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d108      	bne.n	8002068 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4a20      	ldr	r2, [pc, #128]	; (80020dc <TIM_Base_SetConfig+0xfc>)
 800205a:	4013      	ands	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4313      	orrs	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2280      	movs	r2, #128	; 0x80
 800206c:	4393      	bics	r3, r2
 800206e:	001a      	movs	r2, r3
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	4313      	orrs	r3, r2
 8002076:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a0c      	ldr	r2, [pc, #48]	; (80020c4 <TIM_Base_SetConfig+0xe4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00b      	beq.n	80020ae <TIM_Base_SetConfig+0xce>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a0d      	ldr	r2, [pc, #52]	; (80020d0 <TIM_Base_SetConfig+0xf0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d007      	beq.n	80020ae <TIM_Base_SetConfig+0xce>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a0c      	ldr	r2, [pc, #48]	; (80020d4 <TIM_Base_SetConfig+0xf4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d003      	beq.n	80020ae <TIM_Base_SetConfig+0xce>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <TIM_Base_SetConfig+0xf8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d103      	bne.n	80020b6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	691a      	ldr	r2, [r3, #16]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	615a      	str	r2, [r3, #20]
}
 80020bc:	46c0      	nop			; (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	b004      	add	sp, #16
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40012c00 	.word	0x40012c00
 80020c8:	40000400 	.word	0x40000400
 80020cc:	40002000 	.word	0x40002000
 80020d0:	40014000 	.word	0x40014000
 80020d4:	40014400 	.word	0x40014400
 80020d8:	40014800 	.word	0x40014800
 80020dc:	fffffcff 	.word	0xfffffcff

080020e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	2201      	movs	r2, #1
 80020f8:	4393      	bics	r3, r2
 80020fa:	001a      	movs	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	22f0      	movs	r2, #240	; 0xf0
 800210a:	4393      	bics	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	220a      	movs	r2, #10
 800211c:	4393      	bics	r3, r2
 800211e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	4313      	orrs	r3, r2
 8002126:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	621a      	str	r2, [r3, #32]
}
 8002134:	46c0      	nop			; (mov r8, r8)
 8002136:	46bd      	mov	sp, r7
 8002138:	b006      	add	sp, #24
 800213a:	bd80      	pop	{r7, pc}

0800213c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	2210      	movs	r2, #16
 800214e:	4393      	bics	r3, r2
 8002150:	001a      	movs	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	4a0d      	ldr	r2, [pc, #52]	; (800219c <TIM_TI2_ConfigInputStage+0x60>)
 8002166:	4013      	ands	r3, r2
 8002168:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	031b      	lsls	r3, r3, #12
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	4313      	orrs	r3, r2
 8002172:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	22a0      	movs	r2, #160	; 0xa0
 8002178:	4393      	bics	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	621a      	str	r2, [r3, #32]
}
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	46bd      	mov	sp, r7
 8002196:	b006      	add	sp, #24
 8002198:	bd80      	pop	{r7, pc}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	ffff0fff 	.word	0xffff0fff

080021a0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2270      	movs	r2, #112	; 0x70
 80021b4:	4393      	bics	r3, r2
 80021b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4313      	orrs	r3, r2
 80021be:	2207      	movs	r2, #7
 80021c0:	4313      	orrs	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	609a      	str	r2, [r3, #8]
}
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	46bd      	mov	sp, r7
 80021ce:	b004      	add	sp, #16
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	4a09      	ldr	r2, [pc, #36]	; (8002210 <TIM_ETR_SetConfig+0x3c>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	021a      	lsls	r2, r3, #8
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	431a      	orrs	r2, r3
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	4313      	orrs	r3, r2
 8002200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	609a      	str	r2, [r3, #8]
}
 8002208:	46c0      	nop			; (mov r8, r8)
 800220a:	46bd      	mov	sp, r7
 800220c:	b006      	add	sp, #24
 800220e:	bd80      	pop	{r7, pc}
 8002210:	ffff00ff 	.word	0xffff00ff

08002214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	223c      	movs	r2, #60	; 0x3c
 8002222:	5c9b      	ldrb	r3, [r3, r2]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002228:	2302      	movs	r3, #2
 800222a:	e047      	b.n	80022bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	223c      	movs	r2, #60	; 0x3c
 8002230:	2101      	movs	r1, #1
 8002232:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	223d      	movs	r2, #61	; 0x3d
 8002238:	2102      	movs	r1, #2
 800223a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2270      	movs	r2, #112	; 0x70
 8002250:	4393      	bics	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	4313      	orrs	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a16      	ldr	r2, [pc, #88]	; (80022c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d00f      	beq.n	8002290 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	2380      	movs	r3, #128	; 0x80
 8002276:	05db      	lsls	r3, r3, #23
 8002278:	429a      	cmp	r2, r3
 800227a:	d009      	beq.n	8002290 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a11      	ldr	r2, [pc, #68]	; (80022c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d004      	beq.n	8002290 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a10      	ldr	r2, [pc, #64]	; (80022cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d10c      	bne.n	80022aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2280      	movs	r2, #128	; 0x80
 8002294:	4393      	bics	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	4313      	orrs	r3, r2
 80022a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	223d      	movs	r2, #61	; 0x3d
 80022ae:	2101      	movs	r1, #1
 80022b0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	223c      	movs	r2, #60	; 0x3c
 80022b6:	2100      	movs	r1, #0
 80022b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	0018      	movs	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	b004      	add	sp, #16
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40012c00 	.word	0x40012c00
 80022c8:	40000400 	.word	0x40000400
 80022cc:	40014000 	.word	0x40014000

080022d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e044      	b.n	800236c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d107      	bne.n	80022fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2278      	movs	r2, #120	; 0x78
 80022ee:	2100      	movs	r1, #0
 80022f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	0018      	movs	r0, r3
 80022f6:	f7fe fb15 	bl	8000924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2224      	movs	r2, #36	; 0x24
 80022fe:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2101      	movs	r1, #1
 800230c:	438a      	bics	r2, r1
 800230e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	0018      	movs	r0, r3
 8002314:	f000 f9e2 	bl	80026dc <UART_SetConfig>
 8002318:	0003      	movs	r3, r0
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e024      	b.n	800236c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	0018      	movs	r0, r3
 800232e:	f000 fb15 	bl	800295c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	490d      	ldr	r1, [pc, #52]	; (8002374 <HAL_UART_Init+0xa4>)
 800233e:	400a      	ands	r2, r1
 8002340:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	212a      	movs	r1, #42	; 0x2a
 800234e:	438a      	bics	r2, r1
 8002350:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2101      	movs	r1, #1
 800235e:	430a      	orrs	r2, r1
 8002360:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	0018      	movs	r0, r3
 8002366:	f000 fbad 	bl	8002ac4 <UART_CheckIdleState>
 800236a:	0003      	movs	r3, r0
}
 800236c:	0018      	movs	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	b002      	add	sp, #8
 8002372:	bd80      	pop	{r7, pc}
 8002374:	ffffb7ff 	.word	0xffffb7ff

08002378 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e030      	b.n	80023ec <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2224      	movs	r2, #36	; 0x24
 800238e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2101      	movs	r1, #1
 800239c:	438a      	bics	r2, r1
 800239e:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2200      	movs	r2, #0
 80023ae:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	0018      	movs	r0, r3
 80023bc:	f7fe fb3a 	bl	8000a34 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2284      	movs	r2, #132	; 0x84
 80023c4:	2100      	movs	r1, #0
 80023c6:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2280      	movs	r2, #128	; 0x80
 80023d2:	2100      	movs	r1, #0
 80023d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2278      	movs	r2, #120	; 0x78
 80023e6:	2100      	movs	r1, #0
 80023e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	0018      	movs	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	b002      	add	sp, #8
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08a      	sub	sp, #40	; 0x28
 80023f8:	af02      	add	r7, sp, #8
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	603b      	str	r3, [r7, #0]
 8002400:	1dbb      	adds	r3, r7, #6
 8002402:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002408:	2b20      	cmp	r3, #32
 800240a:	d000      	beq.n	800240e <HAL_UART_Transmit+0x1a>
 800240c:	e08d      	b.n	800252a <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_UART_Transmit+0x28>
 8002414:	1dbb      	adds	r3, r7, #6
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e085      	b.n	800252c <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	2380      	movs	r3, #128	; 0x80
 8002426:	015b      	lsls	r3, r3, #5
 8002428:	429a      	cmp	r2, r3
 800242a:	d109      	bne.n	8002440 <HAL_UART_Transmit+0x4c>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d105      	bne.n	8002440 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2201      	movs	r2, #1
 8002438:	4013      	ands	r3, r2
 800243a:	d001      	beq.n	8002440 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e075      	b.n	800252c <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2284      	movs	r2, #132	; 0x84
 8002444:	2100      	movs	r1, #0
 8002446:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2221      	movs	r2, #33	; 0x21
 800244c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800244e:	f7fe fc01 	bl	8000c54 <HAL_GetTick>
 8002452:	0003      	movs	r3, r0
 8002454:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1dba      	adds	r2, r7, #6
 800245a:	2150      	movs	r1, #80	; 0x50
 800245c:	8812      	ldrh	r2, [r2, #0]
 800245e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	1dba      	adds	r2, r7, #6
 8002464:	2152      	movs	r1, #82	; 0x52
 8002466:	8812      	ldrh	r2, [r2, #0]
 8002468:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	2380      	movs	r3, #128	; 0x80
 8002470:	015b      	lsls	r3, r3, #5
 8002472:	429a      	cmp	r2, r3
 8002474:	d108      	bne.n	8002488 <HAL_UART_Transmit+0x94>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d104      	bne.n	8002488 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	61bb      	str	r3, [r7, #24]
 8002486:	e003      	b.n	8002490 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800248c:	2300      	movs	r3, #0
 800248e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002490:	e030      	b.n	80024f4 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	0013      	movs	r3, r2
 800249c:	2200      	movs	r2, #0
 800249e:	2180      	movs	r1, #128	; 0x80
 80024a0:	f000 fbb8 	bl	8002c14 <UART_WaitOnFlagUntilTimeout>
 80024a4:	1e03      	subs	r3, r0, #0
 80024a6:	d004      	beq.n	80024b2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2220      	movs	r2, #32
 80024ac:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e03c      	b.n	800252c <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10b      	bne.n	80024d0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	881a      	ldrh	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	05d2      	lsls	r2, r2, #23
 80024c2:	0dd2      	lsrs	r2, r2, #23
 80024c4:	b292      	uxth	r2, r2
 80024c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	3302      	adds	r3, #2
 80024cc:	61bb      	str	r3, [r7, #24]
 80024ce:	e008      	b.n	80024e2 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	781a      	ldrb	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	b292      	uxth	r2, r2
 80024da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	3301      	adds	r3, #1
 80024e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2252      	movs	r2, #82	; 0x52
 80024e6:	5a9b      	ldrh	r3, [r3, r2]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b299      	uxth	r1, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2252      	movs	r2, #82	; 0x52
 80024f2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2252      	movs	r2, #82	; 0x52
 80024f8:	5a9b      	ldrh	r3, [r3, r2]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1c8      	bne.n	8002492 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	0013      	movs	r3, r2
 800250a:	2200      	movs	r2, #0
 800250c:	2140      	movs	r1, #64	; 0x40
 800250e:	f000 fb81 	bl	8002c14 <UART_WaitOnFlagUntilTimeout>
 8002512:	1e03      	subs	r3, r0, #0
 8002514:	d004      	beq.n	8002520 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e005      	b.n	800252c <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2220      	movs	r2, #32
 8002524:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e000      	b.n	800252c <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800252a:	2302      	movs	r3, #2
  }
}
 800252c:	0018      	movs	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	b008      	add	sp, #32
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	; 0x28
 8002538:	af02      	add	r7, sp, #8
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	1dbb      	adds	r3, r7, #6
 8002542:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2280      	movs	r2, #128	; 0x80
 8002548:	589b      	ldr	r3, [r3, r2]
 800254a:	2b20      	cmp	r3, #32
 800254c:	d000      	beq.n	8002550 <HAL_UART_Receive+0x1c>
 800254e:	e0bd      	b.n	80026cc <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_UART_Receive+0x2a>
 8002556:	1dbb      	adds	r3, r7, #6
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e0b5      	b.n	80026ce <HAL_UART_Receive+0x19a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	015b      	lsls	r3, r3, #5
 800256a:	429a      	cmp	r2, r3
 800256c:	d109      	bne.n	8002582 <HAL_UART_Receive+0x4e>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d105      	bne.n	8002582 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2201      	movs	r2, #1
 800257a:	4013      	ands	r3, r2
 800257c:	d001      	beq.n	8002582 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e0a5      	b.n	80026ce <HAL_UART_Receive+0x19a>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2284      	movs	r2, #132	; 0x84
 8002586:	2100      	movs	r1, #0
 8002588:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2280      	movs	r2, #128	; 0x80
 800258e:	2122      	movs	r1, #34	; 0x22
 8002590:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002598:	f7fe fb5c 	bl	8000c54 <HAL_GetTick>
 800259c:	0003      	movs	r3, r0
 800259e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	1dba      	adds	r2, r7, #6
 80025a4:	2158      	movs	r1, #88	; 0x58
 80025a6:	8812      	ldrh	r2, [r2, #0]
 80025a8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1dba      	adds	r2, r7, #6
 80025ae:	215a      	movs	r1, #90	; 0x5a
 80025b0:	8812      	ldrh	r2, [r2, #0]
 80025b2:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	015b      	lsls	r3, r3, #5
 80025bc:	429a      	cmp	r2, r3
 80025be:	d10d      	bne.n	80025dc <HAL_UART_Receive+0xa8>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d104      	bne.n	80025d2 <HAL_UART_Receive+0x9e>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	225c      	movs	r2, #92	; 0x5c
 80025cc:	4942      	ldr	r1, [pc, #264]	; (80026d8 <HAL_UART_Receive+0x1a4>)
 80025ce:	5299      	strh	r1, [r3, r2]
 80025d0:	e01a      	b.n	8002608 <HAL_UART_Receive+0xd4>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	225c      	movs	r2, #92	; 0x5c
 80025d6:	21ff      	movs	r1, #255	; 0xff
 80025d8:	5299      	strh	r1, [r3, r2]
 80025da:	e015      	b.n	8002608 <HAL_UART_Receive+0xd4>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10d      	bne.n	8002600 <HAL_UART_Receive+0xcc>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d104      	bne.n	80025f6 <HAL_UART_Receive+0xc2>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	225c      	movs	r2, #92	; 0x5c
 80025f0:	21ff      	movs	r1, #255	; 0xff
 80025f2:	5299      	strh	r1, [r3, r2]
 80025f4:	e008      	b.n	8002608 <HAL_UART_Receive+0xd4>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	225c      	movs	r2, #92	; 0x5c
 80025fa:	217f      	movs	r1, #127	; 0x7f
 80025fc:	5299      	strh	r1, [r3, r2]
 80025fe:	e003      	b.n	8002608 <HAL_UART_Receive+0xd4>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	225c      	movs	r2, #92	; 0x5c
 8002604:	2100      	movs	r1, #0
 8002606:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002608:	2312      	movs	r3, #18
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	215c      	movs	r1, #92	; 0x5c
 8002610:	5a52      	ldrh	r2, [r2, r1]
 8002612:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	015b      	lsls	r3, r3, #5
 800261c:	429a      	cmp	r2, r3
 800261e:	d108      	bne.n	8002632 <HAL_UART_Receive+0xfe>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d104      	bne.n	8002632 <HAL_UART_Receive+0xfe>
    {
      pdata8bits  = NULL;
 8002628:	2300      	movs	r3, #0
 800262a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	61bb      	str	r3, [r7, #24]
 8002630:	e003      	b.n	800263a <HAL_UART_Receive+0x106>
    }
    else
    {
      pdata8bits  = pData;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002636:	2300      	movs	r3, #0
 8002638:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800263a:	e03b      	b.n	80026b4 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	0013      	movs	r3, r2
 8002646:	2200      	movs	r2, #0
 8002648:	2120      	movs	r1, #32
 800264a:	f000 fae3 	bl	8002c14 <UART_WaitOnFlagUntilTimeout>
 800264e:	1e03      	subs	r3, r0, #0
 8002650:	d005      	beq.n	800265e <HAL_UART_Receive+0x12a>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2280      	movs	r2, #128	; 0x80
 8002656:	2120      	movs	r1, #32
 8002658:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e037      	b.n	80026ce <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10e      	bne.n	8002682 <HAL_UART_Receive+0x14e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800266a:	b29b      	uxth	r3, r3
 800266c:	2212      	movs	r2, #18
 800266e:	18ba      	adds	r2, r7, r2
 8002670:	8812      	ldrh	r2, [r2, #0]
 8002672:	4013      	ands	r3, r2
 8002674:	b29a      	uxth	r2, r3
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	3302      	adds	r3, #2
 800267e:	61bb      	str	r3, [r7, #24]
 8002680:	e00f      	b.n	80026a2 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002688:	b29b      	uxth	r3, r3
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2212      	movs	r2, #18
 800268e:	18ba      	adds	r2, r7, r2
 8002690:	8812      	ldrh	r2, [r2, #0]
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	4013      	ands	r3, r2
 8002696:	b2da      	uxtb	r2, r3
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	3301      	adds	r3, #1
 80026a0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	225a      	movs	r2, #90	; 0x5a
 80026a6:	5a9b      	ldrh	r3, [r3, r2]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b299      	uxth	r1, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	225a      	movs	r2, #90	; 0x5a
 80026b2:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	225a      	movs	r2, #90	; 0x5a
 80026b8:	5a9b      	ldrh	r3, [r3, r2]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1bd      	bne.n	800263c <HAL_UART_Receive+0x108>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2280      	movs	r2, #128	; 0x80
 80026c4:	2120      	movs	r1, #32
 80026c6:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e000      	b.n	80026ce <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80026cc:	2302      	movs	r3, #2
  }
}
 80026ce:	0018      	movs	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b008      	add	sp, #32
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	000001ff 	.word	0x000001ff

080026dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b088      	sub	sp, #32
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026e4:	231e      	movs	r3, #30
 80026e6:	18fb      	adds	r3, r7, r3
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	4313      	orrs	r3, r2
 8002702:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a8d      	ldr	r2, [pc, #564]	; (8002940 <UART_SetConfig+0x264>)
 800270c:	4013      	ands	r3, r2
 800270e:	0019      	movs	r1, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	430a      	orrs	r2, r1
 8002718:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4a88      	ldr	r2, [pc, #544]	; (8002944 <UART_SetConfig+0x268>)
 8002722:	4013      	ands	r3, r2
 8002724:	0019      	movs	r1, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	4313      	orrs	r3, r2
 8002740:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	4a7f      	ldr	r2, [pc, #508]	; (8002948 <UART_SetConfig+0x26c>)
 800274a:	4013      	ands	r3, r2
 800274c:	0019      	movs	r1, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	430a      	orrs	r2, r1
 8002756:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a7b      	ldr	r2, [pc, #492]	; (800294c <UART_SetConfig+0x270>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d127      	bne.n	80027b2 <UART_SetConfig+0xd6>
 8002762:	4b7b      	ldr	r3, [pc, #492]	; (8002950 <UART_SetConfig+0x274>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	2203      	movs	r2, #3
 8002768:	4013      	ands	r3, r2
 800276a:	2b03      	cmp	r3, #3
 800276c:	d00d      	beq.n	800278a <UART_SetConfig+0xae>
 800276e:	d81b      	bhi.n	80027a8 <UART_SetConfig+0xcc>
 8002770:	2b02      	cmp	r3, #2
 8002772:	d014      	beq.n	800279e <UART_SetConfig+0xc2>
 8002774:	d818      	bhi.n	80027a8 <UART_SetConfig+0xcc>
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <UART_SetConfig+0xa4>
 800277a:	2b01      	cmp	r3, #1
 800277c:	d00a      	beq.n	8002794 <UART_SetConfig+0xb8>
 800277e:	e013      	b.n	80027a8 <UART_SetConfig+0xcc>
 8002780:	231f      	movs	r3, #31
 8002782:	18fb      	adds	r3, r7, r3
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]
 8002788:	e021      	b.n	80027ce <UART_SetConfig+0xf2>
 800278a:	231f      	movs	r3, #31
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	2202      	movs	r2, #2
 8002790:	701a      	strb	r2, [r3, #0]
 8002792:	e01c      	b.n	80027ce <UART_SetConfig+0xf2>
 8002794:	231f      	movs	r3, #31
 8002796:	18fb      	adds	r3, r7, r3
 8002798:	2204      	movs	r2, #4
 800279a:	701a      	strb	r2, [r3, #0]
 800279c:	e017      	b.n	80027ce <UART_SetConfig+0xf2>
 800279e:	231f      	movs	r3, #31
 80027a0:	18fb      	adds	r3, r7, r3
 80027a2:	2208      	movs	r2, #8
 80027a4:	701a      	strb	r2, [r3, #0]
 80027a6:	e012      	b.n	80027ce <UART_SetConfig+0xf2>
 80027a8:	231f      	movs	r3, #31
 80027aa:	18fb      	adds	r3, r7, r3
 80027ac:	2210      	movs	r2, #16
 80027ae:	701a      	strb	r2, [r3, #0]
 80027b0:	e00d      	b.n	80027ce <UART_SetConfig+0xf2>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a67      	ldr	r2, [pc, #412]	; (8002954 <UART_SetConfig+0x278>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d104      	bne.n	80027c6 <UART_SetConfig+0xea>
 80027bc:	231f      	movs	r3, #31
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]
 80027c4:	e003      	b.n	80027ce <UART_SetConfig+0xf2>
 80027c6:	231f      	movs	r3, #31
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	2210      	movs	r2, #16
 80027cc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69da      	ldr	r2, [r3, #28]
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	021b      	lsls	r3, r3, #8
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d15c      	bne.n	8002894 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80027da:	231f      	movs	r3, #31
 80027dc:	18fb      	adds	r3, r7, r3
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d015      	beq.n	8002810 <UART_SetConfig+0x134>
 80027e4:	dc18      	bgt.n	8002818 <UART_SetConfig+0x13c>
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d00d      	beq.n	8002806 <UART_SetConfig+0x12a>
 80027ea:	dc15      	bgt.n	8002818 <UART_SetConfig+0x13c>
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <UART_SetConfig+0x11a>
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d005      	beq.n	8002800 <UART_SetConfig+0x124>
 80027f4:	e010      	b.n	8002818 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027f6:	f7ff f991 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 80027fa:	0003      	movs	r3, r0
 80027fc:	61bb      	str	r3, [r7, #24]
        break;
 80027fe:	e012      	b.n	8002826 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002800:	4b55      	ldr	r3, [pc, #340]	; (8002958 <UART_SetConfig+0x27c>)
 8002802:	61bb      	str	r3, [r7, #24]
        break;
 8002804:	e00f      	b.n	8002826 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002806:	f7ff f929 	bl	8001a5c <HAL_RCC_GetSysClockFreq>
 800280a:	0003      	movs	r3, r0
 800280c:	61bb      	str	r3, [r7, #24]
        break;
 800280e:	e00a      	b.n	8002826 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	61bb      	str	r3, [r7, #24]
        break;
 8002816:	e006      	b.n	8002826 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800281c:	231e      	movs	r3, #30
 800281e:	18fb      	adds	r3, r7, r3
 8002820:	2201      	movs	r2, #1
 8002822:	701a      	strb	r2, [r3, #0]
        break;
 8002824:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d100      	bne.n	800282e <UART_SetConfig+0x152>
 800282c:	e07a      	b.n	8002924 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	005a      	lsls	r2, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	085b      	lsrs	r3, r3, #1
 8002838:	18d2      	adds	r2, r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	0019      	movs	r1, r3
 8002840:	0010      	movs	r0, r2
 8002842:	f7fd fc61 	bl	8000108 <__udivsi3>
 8002846:	0003      	movs	r3, r0
 8002848:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	2b0f      	cmp	r3, #15
 800284e:	d91c      	bls.n	800288a <UART_SetConfig+0x1ae>
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	2380      	movs	r3, #128	; 0x80
 8002854:	025b      	lsls	r3, r3, #9
 8002856:	429a      	cmp	r2, r3
 8002858:	d217      	bcs.n	800288a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	b29a      	uxth	r2, r3
 800285e:	200e      	movs	r0, #14
 8002860:	183b      	adds	r3, r7, r0
 8002862:	210f      	movs	r1, #15
 8002864:	438a      	bics	r2, r1
 8002866:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	085b      	lsrs	r3, r3, #1
 800286c:	b29b      	uxth	r3, r3
 800286e:	2207      	movs	r2, #7
 8002870:	4013      	ands	r3, r2
 8002872:	b299      	uxth	r1, r3
 8002874:	183b      	adds	r3, r7, r0
 8002876:	183a      	adds	r2, r7, r0
 8002878:	8812      	ldrh	r2, [r2, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	183a      	adds	r2, r7, r0
 8002884:	8812      	ldrh	r2, [r2, #0]
 8002886:	60da      	str	r2, [r3, #12]
 8002888:	e04c      	b.n	8002924 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800288a:	231e      	movs	r3, #30
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	2201      	movs	r2, #1
 8002890:	701a      	strb	r2, [r3, #0]
 8002892:	e047      	b.n	8002924 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002894:	231f      	movs	r3, #31
 8002896:	18fb      	adds	r3, r7, r3
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b08      	cmp	r3, #8
 800289c:	d015      	beq.n	80028ca <UART_SetConfig+0x1ee>
 800289e:	dc18      	bgt.n	80028d2 <UART_SetConfig+0x1f6>
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d00d      	beq.n	80028c0 <UART_SetConfig+0x1e4>
 80028a4:	dc15      	bgt.n	80028d2 <UART_SetConfig+0x1f6>
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <UART_SetConfig+0x1d4>
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d005      	beq.n	80028ba <UART_SetConfig+0x1de>
 80028ae:	e010      	b.n	80028d2 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028b0:	f7ff f934 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 80028b4:	0003      	movs	r3, r0
 80028b6:	61bb      	str	r3, [r7, #24]
        break;
 80028b8:	e012      	b.n	80028e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028ba:	4b27      	ldr	r3, [pc, #156]	; (8002958 <UART_SetConfig+0x27c>)
 80028bc:	61bb      	str	r3, [r7, #24]
        break;
 80028be:	e00f      	b.n	80028e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028c0:	f7ff f8cc 	bl	8001a5c <HAL_RCC_GetSysClockFreq>
 80028c4:	0003      	movs	r3, r0
 80028c6:	61bb      	str	r3, [r7, #24]
        break;
 80028c8:	e00a      	b.n	80028e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028ca:	2380      	movs	r3, #128	; 0x80
 80028cc:	021b      	lsls	r3, r3, #8
 80028ce:	61bb      	str	r3, [r7, #24]
        break;
 80028d0:	e006      	b.n	80028e0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80028d6:	231e      	movs	r3, #30
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	2201      	movs	r2, #1
 80028dc:	701a      	strb	r2, [r3, #0]
        break;
 80028de:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d01e      	beq.n	8002924 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	085a      	lsrs	r2, r3, #1
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	18d2      	adds	r2, r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	0019      	movs	r1, r3
 80028f6:	0010      	movs	r0, r2
 80028f8:	f7fd fc06 	bl	8000108 <__udivsi3>
 80028fc:	0003      	movs	r3, r0
 80028fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	2b0f      	cmp	r3, #15
 8002904:	d90a      	bls.n	800291c <UART_SetConfig+0x240>
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	2380      	movs	r3, #128	; 0x80
 800290a:	025b      	lsls	r3, r3, #9
 800290c:	429a      	cmp	r2, r3
 800290e:	d205      	bcs.n	800291c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	b29a      	uxth	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	60da      	str	r2, [r3, #12]
 800291a:	e003      	b.n	8002924 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800291c:	231e      	movs	r3, #30
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	2201      	movs	r2, #1
 8002922:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002930:	231e      	movs	r3, #30
 8002932:	18fb      	adds	r3, r7, r3
 8002934:	781b      	ldrb	r3, [r3, #0]
}
 8002936:	0018      	movs	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	b008      	add	sp, #32
 800293c:	bd80      	pop	{r7, pc}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	ffff69f3 	.word	0xffff69f3
 8002944:	ffffcfff 	.word	0xffffcfff
 8002948:	fffff4ff 	.word	0xfffff4ff
 800294c:	40013800 	.word	0x40013800
 8002950:	40021000 	.word	0x40021000
 8002954:	40004400 	.word	0x40004400
 8002958:	007a1200 	.word	0x007a1200

0800295c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	2201      	movs	r2, #1
 800296a:	4013      	ands	r3, r2
 800296c:	d00b      	beq.n	8002986 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	4a4a      	ldr	r2, [pc, #296]	; (8002aa0 <UART_AdvFeatureConfig+0x144>)
 8002976:	4013      	ands	r3, r2
 8002978:	0019      	movs	r1, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	2202      	movs	r2, #2
 800298c:	4013      	ands	r3, r2
 800298e:	d00b      	beq.n	80029a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	4a43      	ldr	r2, [pc, #268]	; (8002aa4 <UART_AdvFeatureConfig+0x148>)
 8002998:	4013      	ands	r3, r2
 800299a:	0019      	movs	r1, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	2204      	movs	r2, #4
 80029ae:	4013      	ands	r3, r2
 80029b0:	d00b      	beq.n	80029ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	4a3b      	ldr	r2, [pc, #236]	; (8002aa8 <UART_AdvFeatureConfig+0x14c>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	0019      	movs	r1, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	2208      	movs	r2, #8
 80029d0:	4013      	ands	r3, r2
 80029d2:	d00b      	beq.n	80029ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	4a34      	ldr	r2, [pc, #208]	; (8002aac <UART_AdvFeatureConfig+0x150>)
 80029dc:	4013      	ands	r3, r2
 80029de:	0019      	movs	r1, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	2210      	movs	r2, #16
 80029f2:	4013      	ands	r3, r2
 80029f4:	d00b      	beq.n	8002a0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	4a2c      	ldr	r2, [pc, #176]	; (8002ab0 <UART_AdvFeatureConfig+0x154>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	0019      	movs	r1, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	2220      	movs	r2, #32
 8002a14:	4013      	ands	r3, r2
 8002a16:	d00b      	beq.n	8002a30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	4a25      	ldr	r2, [pc, #148]	; (8002ab4 <UART_AdvFeatureConfig+0x158>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	0019      	movs	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	2240      	movs	r2, #64	; 0x40
 8002a36:	4013      	ands	r3, r2
 8002a38:	d01d      	beq.n	8002a76 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4a1d      	ldr	r2, [pc, #116]	; (8002ab8 <UART_AdvFeatureConfig+0x15c>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	0019      	movs	r1, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a56:	2380      	movs	r3, #128	; 0x80
 8002a58:	035b      	lsls	r3, r3, #13
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d10b      	bne.n	8002a76 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	4a15      	ldr	r2, [pc, #84]	; (8002abc <UART_AdvFeatureConfig+0x160>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	0019      	movs	r1, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	2280      	movs	r2, #128	; 0x80
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d00b      	beq.n	8002a98 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	4a0e      	ldr	r2, [pc, #56]	; (8002ac0 <UART_AdvFeatureConfig+0x164>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	0019      	movs	r1, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	605a      	str	r2, [r3, #4]
  }
}
 8002a98:	46c0      	nop			; (mov r8, r8)
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b002      	add	sp, #8
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	fffdffff 	.word	0xfffdffff
 8002aa4:	fffeffff 	.word	0xfffeffff
 8002aa8:	fffbffff 	.word	0xfffbffff
 8002aac:	ffff7fff 	.word	0xffff7fff
 8002ab0:	ffffefff 	.word	0xffffefff
 8002ab4:	ffffdfff 	.word	0xffffdfff
 8002ab8:	ffefffff 	.word	0xffefffff
 8002abc:	ff9fffff 	.word	0xff9fffff
 8002ac0:	fff7ffff 	.word	0xfff7ffff

08002ac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b092      	sub	sp, #72	; 0x48
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2284      	movs	r2, #132	; 0x84
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ad4:	f7fe f8be 	bl	8000c54 <HAL_GetTick>
 8002ad8:	0003      	movs	r3, r0
 8002ada:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2208      	movs	r2, #8
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d12c      	bne.n	8002b44 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aec:	2280      	movs	r2, #128	; 0x80
 8002aee:	0391      	lsls	r1, r2, #14
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	4a46      	ldr	r2, [pc, #280]	; (8002c0c <UART_CheckIdleState+0x148>)
 8002af4:	9200      	str	r2, [sp, #0]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f000 f88c 	bl	8002c14 <UART_WaitOnFlagUntilTimeout>
 8002afc:	1e03      	subs	r3, r0, #0
 8002afe:	d021      	beq.n	8002b44 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b00:	f3ef 8310 	mrs	r3, PRIMASK
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002b08:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b10:	f383 8810 	msr	PRIMASK, r3
}
 8002b14:	46c0      	nop			; (mov r8, r8)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2180      	movs	r1, #128	; 0x80
 8002b22:	438a      	bics	r2, r1
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2c:	f383 8810 	msr	PRIMASK, r3
}
 8002b30:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2220      	movs	r2, #32
 8002b36:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2278      	movs	r2, #120	; 0x78
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e05f      	b.n	8002c04 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d146      	bne.n	8002be0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b54:	2280      	movs	r2, #128	; 0x80
 8002b56:	03d1      	lsls	r1, r2, #15
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	4a2c      	ldr	r2, [pc, #176]	; (8002c0c <UART_CheckIdleState+0x148>)
 8002b5c:	9200      	str	r2, [sp, #0]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f000 f858 	bl	8002c14 <UART_WaitOnFlagUntilTimeout>
 8002b64:	1e03      	subs	r3, r0, #0
 8002b66:	d03b      	beq.n	8002be0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b68:	f3ef 8310 	mrs	r3, PRIMASK
 8002b6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b70:	637b      	str	r3, [r7, #52]	; 0x34
 8002b72:	2301      	movs	r3, #1
 8002b74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f383 8810 	msr	PRIMASK, r3
}
 8002b7c:	46c0      	nop			; (mov r8, r8)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4921      	ldr	r1, [pc, #132]	; (8002c10 <UART_CheckIdleState+0x14c>)
 8002b8a:	400a      	ands	r2, r1
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f383 8810 	msr	PRIMASK, r3
}
 8002b98:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b9e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ba0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ba2:	633b      	str	r3, [r7, #48]	; 0x30
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f383 8810 	msr	PRIMASK, r3
}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2101      	movs	r1, #1
 8002bbc:	438a      	bics	r2, r1
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	f383 8810 	msr	PRIMASK, r3
}
 8002bca:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2280      	movs	r2, #128	; 0x80
 8002bd0:	2120      	movs	r1, #32
 8002bd2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2278      	movs	r2, #120	; 0x78
 8002bd8:	2100      	movs	r1, #0
 8002bda:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e011      	b.n	8002c04 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2220      	movs	r2, #32
 8002be4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2280      	movs	r2, #128	; 0x80
 8002bea:	2120      	movs	r1, #32
 8002bec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2278      	movs	r2, #120	; 0x78
 8002bfe:	2100      	movs	r1, #0
 8002c00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	0018      	movs	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b010      	add	sp, #64	; 0x40
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	01ffffff 	.word	0x01ffffff
 8002c10:	fffffedf 	.word	0xfffffedf

08002c14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	1dfb      	adds	r3, r7, #7
 8002c22:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c24:	e04b      	b.n	8002cbe <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	d048      	beq.n	8002cbe <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c2c:	f7fe f812 	bl	8000c54 <HAL_GetTick>
 8002c30:	0002      	movs	r2, r0
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d302      	bcc.n	8002c42 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e04b      	b.n	8002cde <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d035      	beq.n	8002cbe <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	2208      	movs	r2, #8
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d111      	bne.n	8002c84 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2208      	movs	r2, #8
 8002c66:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f000 f83c 	bl	8002ce8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2284      	movs	r2, #132	; 0x84
 8002c74:	2108      	movs	r1, #8
 8002c76:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2278      	movs	r2, #120	; 0x78
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e02c      	b.n	8002cde <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	69da      	ldr	r2, [r3, #28]
 8002c8a:	2380      	movs	r3, #128	; 0x80
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	401a      	ands	r2, r3
 8002c90:	2380      	movs	r3, #128	; 0x80
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d112      	bne.n	8002cbe <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2280      	movs	r2, #128	; 0x80
 8002c9e:	0112      	lsls	r2, r2, #4
 8002ca0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f000 f81f 	bl	8002ce8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2284      	movs	r2, #132	; 0x84
 8002cae:	2120      	movs	r1, #32
 8002cb0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2278      	movs	r2, #120	; 0x78
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e00f      	b.n	8002cde <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	425a      	negs	r2, r3
 8002cce:	4153      	adcs	r3, r2
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	001a      	movs	r2, r3
 8002cd4:	1dfb      	adds	r3, r7, #7
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d0a4      	beq.n	8002c26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	0018      	movs	r0, r3
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b004      	add	sp, #16
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08e      	sub	sp, #56	; 0x38
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8002cf4:	617b      	str	r3, [r7, #20]
  return(result);
 8002cf6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cf8:	637b      	str	r3, [r7, #52]	; 0x34
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	f383 8810 	msr	PRIMASK, r3
}
 8002d04:	46c0      	nop			; (mov r8, r8)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4926      	ldr	r1, [pc, #152]	; (8002dac <UART_EndRxTransfer+0xc4>)
 8002d12:	400a      	ands	r2, r1
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f383 8810 	msr	PRIMASK, r3
}
 8002d20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d22:	f3ef 8310 	mrs	r3, PRIMASK
 8002d26:	623b      	str	r3, [r7, #32]
  return(result);
 8002d28:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d2a:	633b      	str	r3, [r7, #48]	; 0x30
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	f383 8810 	msr	PRIMASK, r3
}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2101      	movs	r1, #1
 8002d44:	438a      	bics	r2, r1
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4e:	f383 8810 	msr	PRIMASK, r3
}
 8002d52:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d118      	bne.n	8002d8e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d5c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d60:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d62:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d66:	2301      	movs	r3, #1
 8002d68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f383 8810 	msr	PRIMASK, r3
}
 8002d70:	46c0      	nop			; (mov r8, r8)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2110      	movs	r1, #16
 8002d7e:	438a      	bics	r2, r1
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f383 8810 	msr	PRIMASK, r3
}
 8002d8c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2280      	movs	r2, #128	; 0x80
 8002d92:	2120      	movs	r1, #32
 8002d94:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b00e      	add	sp, #56	; 0x38
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	fffffedf 	.word	0xfffffedf

08002db0 <free>:
 8002db0:	b510      	push	{r4, lr}
 8002db2:	4b03      	ldr	r3, [pc, #12]	; (8002dc0 <free+0x10>)
 8002db4:	0001      	movs	r1, r0
 8002db6:	6818      	ldr	r0, [r3, #0]
 8002db8:	f000 f942 	bl	8003040 <_free_r>
 8002dbc:	bd10      	pop	{r4, pc}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	20000058 	.word	0x20000058

08002dc4 <sbrk_aligned>:
 8002dc4:	b570      	push	{r4, r5, r6, lr}
 8002dc6:	4e0f      	ldr	r6, [pc, #60]	; (8002e04 <sbrk_aligned+0x40>)
 8002dc8:	000d      	movs	r5, r1
 8002dca:	6831      	ldr	r1, [r6, #0]
 8002dcc:	0004      	movs	r4, r0
 8002dce:	2900      	cmp	r1, #0
 8002dd0:	d102      	bne.n	8002dd8 <sbrk_aligned+0x14>
 8002dd2:	f000 f8ed 	bl	8002fb0 <_sbrk_r>
 8002dd6:	6030      	str	r0, [r6, #0]
 8002dd8:	0029      	movs	r1, r5
 8002dda:	0020      	movs	r0, r4
 8002ddc:	f000 f8e8 	bl	8002fb0 <_sbrk_r>
 8002de0:	1c43      	adds	r3, r0, #1
 8002de2:	d00a      	beq.n	8002dfa <sbrk_aligned+0x36>
 8002de4:	2303      	movs	r3, #3
 8002de6:	1cc5      	adds	r5, r0, #3
 8002de8:	439d      	bics	r5, r3
 8002dea:	42a8      	cmp	r0, r5
 8002dec:	d007      	beq.n	8002dfe <sbrk_aligned+0x3a>
 8002dee:	1a29      	subs	r1, r5, r0
 8002df0:	0020      	movs	r0, r4
 8002df2:	f000 f8dd 	bl	8002fb0 <_sbrk_r>
 8002df6:	3001      	adds	r0, #1
 8002df8:	d101      	bne.n	8002dfe <sbrk_aligned+0x3a>
 8002dfa:	2501      	movs	r5, #1
 8002dfc:	426d      	negs	r5, r5
 8002dfe:	0028      	movs	r0, r5
 8002e00:	bd70      	pop	{r4, r5, r6, pc}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	20000224 	.word	0x20000224

08002e08 <_malloc_r>:
 8002e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	1ccb      	adds	r3, r1, #3
 8002e0e:	4393      	bics	r3, r2
 8002e10:	3308      	adds	r3, #8
 8002e12:	0006      	movs	r6, r0
 8002e14:	001f      	movs	r7, r3
 8002e16:	2b0c      	cmp	r3, #12
 8002e18:	d238      	bcs.n	8002e8c <_malloc_r+0x84>
 8002e1a:	270c      	movs	r7, #12
 8002e1c:	42b9      	cmp	r1, r7
 8002e1e:	d837      	bhi.n	8002e90 <_malloc_r+0x88>
 8002e20:	0030      	movs	r0, r6
 8002e22:	f000 f873 	bl	8002f0c <__malloc_lock>
 8002e26:	4b38      	ldr	r3, [pc, #224]	; (8002f08 <_malloc_r+0x100>)
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	001c      	movs	r4, r3
 8002e2e:	2c00      	cmp	r4, #0
 8002e30:	d133      	bne.n	8002e9a <_malloc_r+0x92>
 8002e32:	0039      	movs	r1, r7
 8002e34:	0030      	movs	r0, r6
 8002e36:	f7ff ffc5 	bl	8002dc4 <sbrk_aligned>
 8002e3a:	0004      	movs	r4, r0
 8002e3c:	1c43      	adds	r3, r0, #1
 8002e3e:	d15e      	bne.n	8002efe <_malloc_r+0xf6>
 8002e40:	9b00      	ldr	r3, [sp, #0]
 8002e42:	681c      	ldr	r4, [r3, #0]
 8002e44:	0025      	movs	r5, r4
 8002e46:	2d00      	cmp	r5, #0
 8002e48:	d14e      	bne.n	8002ee8 <_malloc_r+0xe0>
 8002e4a:	2c00      	cmp	r4, #0
 8002e4c:	d051      	beq.n	8002ef2 <_malloc_r+0xea>
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	0029      	movs	r1, r5
 8002e52:	18e3      	adds	r3, r4, r3
 8002e54:	0030      	movs	r0, r6
 8002e56:	9301      	str	r3, [sp, #4]
 8002e58:	f000 f8aa 	bl	8002fb0 <_sbrk_r>
 8002e5c:	9b01      	ldr	r3, [sp, #4]
 8002e5e:	4283      	cmp	r3, r0
 8002e60:	d147      	bne.n	8002ef2 <_malloc_r+0xea>
 8002e62:	6823      	ldr	r3, [r4, #0]
 8002e64:	0030      	movs	r0, r6
 8002e66:	1aff      	subs	r7, r7, r3
 8002e68:	0039      	movs	r1, r7
 8002e6a:	f7ff ffab 	bl	8002dc4 <sbrk_aligned>
 8002e6e:	3001      	adds	r0, #1
 8002e70:	d03f      	beq.n	8002ef2 <_malloc_r+0xea>
 8002e72:	6823      	ldr	r3, [r4, #0]
 8002e74:	19db      	adds	r3, r3, r7
 8002e76:	6023      	str	r3, [r4, #0]
 8002e78:	9b00      	ldr	r3, [sp, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d040      	beq.n	8002f02 <_malloc_r+0xfa>
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	42a2      	cmp	r2, r4
 8002e84:	d133      	bne.n	8002eee <_malloc_r+0xe6>
 8002e86:	2200      	movs	r2, #0
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	e014      	b.n	8002eb6 <_malloc_r+0xae>
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	dac5      	bge.n	8002e1c <_malloc_r+0x14>
 8002e90:	230c      	movs	r3, #12
 8002e92:	2500      	movs	r5, #0
 8002e94:	6033      	str	r3, [r6, #0]
 8002e96:	0028      	movs	r0, r5
 8002e98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e9a:	6821      	ldr	r1, [r4, #0]
 8002e9c:	1bc9      	subs	r1, r1, r7
 8002e9e:	d420      	bmi.n	8002ee2 <_malloc_r+0xda>
 8002ea0:	290b      	cmp	r1, #11
 8002ea2:	d918      	bls.n	8002ed6 <_malloc_r+0xce>
 8002ea4:	19e2      	adds	r2, r4, r7
 8002ea6:	6027      	str	r7, [r4, #0]
 8002ea8:	42a3      	cmp	r3, r4
 8002eaa:	d112      	bne.n	8002ed2 <_malloc_r+0xca>
 8002eac:	9b00      	ldr	r3, [sp, #0]
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	6863      	ldr	r3, [r4, #4]
 8002eb2:	6011      	str	r1, [r2, #0]
 8002eb4:	6053      	str	r3, [r2, #4]
 8002eb6:	0030      	movs	r0, r6
 8002eb8:	0025      	movs	r5, r4
 8002eba:	f000 f82f 	bl	8002f1c <__malloc_unlock>
 8002ebe:	2207      	movs	r2, #7
 8002ec0:	350b      	adds	r5, #11
 8002ec2:	1d23      	adds	r3, r4, #4
 8002ec4:	4395      	bics	r5, r2
 8002ec6:	1aea      	subs	r2, r5, r3
 8002ec8:	429d      	cmp	r5, r3
 8002eca:	d0e4      	beq.n	8002e96 <_malloc_r+0x8e>
 8002ecc:	1b5b      	subs	r3, r3, r5
 8002ece:	50a3      	str	r3, [r4, r2]
 8002ed0:	e7e1      	b.n	8002e96 <_malloc_r+0x8e>
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	e7ec      	b.n	8002eb0 <_malloc_r+0xa8>
 8002ed6:	6862      	ldr	r2, [r4, #4]
 8002ed8:	42a3      	cmp	r3, r4
 8002eda:	d1d5      	bne.n	8002e88 <_malloc_r+0x80>
 8002edc:	9b00      	ldr	r3, [sp, #0]
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	e7e9      	b.n	8002eb6 <_malloc_r+0xae>
 8002ee2:	0023      	movs	r3, r4
 8002ee4:	6864      	ldr	r4, [r4, #4]
 8002ee6:	e7a2      	b.n	8002e2e <_malloc_r+0x26>
 8002ee8:	002c      	movs	r4, r5
 8002eea:	686d      	ldr	r5, [r5, #4]
 8002eec:	e7ab      	b.n	8002e46 <_malloc_r+0x3e>
 8002eee:	0013      	movs	r3, r2
 8002ef0:	e7c4      	b.n	8002e7c <_malloc_r+0x74>
 8002ef2:	230c      	movs	r3, #12
 8002ef4:	0030      	movs	r0, r6
 8002ef6:	6033      	str	r3, [r6, #0]
 8002ef8:	f000 f810 	bl	8002f1c <__malloc_unlock>
 8002efc:	e7cb      	b.n	8002e96 <_malloc_r+0x8e>
 8002efe:	6027      	str	r7, [r4, #0]
 8002f00:	e7d9      	b.n	8002eb6 <_malloc_r+0xae>
 8002f02:	605b      	str	r3, [r3, #4]
 8002f04:	deff      	udf	#255	; 0xff
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	20000220 	.word	0x20000220

08002f0c <__malloc_lock>:
 8002f0c:	b510      	push	{r4, lr}
 8002f0e:	4802      	ldr	r0, [pc, #8]	; (8002f18 <__malloc_lock+0xc>)
 8002f10:	f000 f88a 	bl	8003028 <__retarget_lock_acquire_recursive>
 8002f14:	bd10      	pop	{r4, pc}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	20000364 	.word	0x20000364

08002f1c <__malloc_unlock>:
 8002f1c:	b510      	push	{r4, lr}
 8002f1e:	4802      	ldr	r0, [pc, #8]	; (8002f28 <__malloc_unlock+0xc>)
 8002f20:	f000 f883 	bl	800302a <__retarget_lock_release_recursive>
 8002f24:	bd10      	pop	{r4, pc}
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	20000364 	.word	0x20000364

08002f2c <realloc>:
 8002f2c:	b510      	push	{r4, lr}
 8002f2e:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <realloc+0x10>)
 8002f30:	000a      	movs	r2, r1
 8002f32:	0001      	movs	r1, r0
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	f000 f803 	bl	8002f40 <_realloc_r>
 8002f3a:	bd10      	pop	{r4, pc}
 8002f3c:	20000058 	.word	0x20000058

08002f40 <_realloc_r>:
 8002f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f42:	0007      	movs	r7, r0
 8002f44:	000e      	movs	r6, r1
 8002f46:	0014      	movs	r4, r2
 8002f48:	2900      	cmp	r1, #0
 8002f4a:	d105      	bne.n	8002f58 <_realloc_r+0x18>
 8002f4c:	0011      	movs	r1, r2
 8002f4e:	f7ff ff5b 	bl	8002e08 <_malloc_r>
 8002f52:	0005      	movs	r5, r0
 8002f54:	0028      	movs	r0, r5
 8002f56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f58:	2a00      	cmp	r2, #0
 8002f5a:	d103      	bne.n	8002f64 <_realloc_r+0x24>
 8002f5c:	f000 f870 	bl	8003040 <_free_r>
 8002f60:	0025      	movs	r5, r4
 8002f62:	e7f7      	b.n	8002f54 <_realloc_r+0x14>
 8002f64:	f000 f8b6 	bl	80030d4 <_malloc_usable_size_r>
 8002f68:	9001      	str	r0, [sp, #4]
 8002f6a:	4284      	cmp	r4, r0
 8002f6c:	d803      	bhi.n	8002f76 <_realloc_r+0x36>
 8002f6e:	0035      	movs	r5, r6
 8002f70:	0843      	lsrs	r3, r0, #1
 8002f72:	42a3      	cmp	r3, r4
 8002f74:	d3ee      	bcc.n	8002f54 <_realloc_r+0x14>
 8002f76:	0021      	movs	r1, r4
 8002f78:	0038      	movs	r0, r7
 8002f7a:	f7ff ff45 	bl	8002e08 <_malloc_r>
 8002f7e:	1e05      	subs	r5, r0, #0
 8002f80:	d0e8      	beq.n	8002f54 <_realloc_r+0x14>
 8002f82:	9b01      	ldr	r3, [sp, #4]
 8002f84:	0022      	movs	r2, r4
 8002f86:	429c      	cmp	r4, r3
 8002f88:	d900      	bls.n	8002f8c <_realloc_r+0x4c>
 8002f8a:	001a      	movs	r2, r3
 8002f8c:	0031      	movs	r1, r6
 8002f8e:	0028      	movs	r0, r5
 8002f90:	f000 f84c 	bl	800302c <memcpy>
 8002f94:	0031      	movs	r1, r6
 8002f96:	0038      	movs	r0, r7
 8002f98:	f000 f852 	bl	8003040 <_free_r>
 8002f9c:	e7da      	b.n	8002f54 <_realloc_r+0x14>

08002f9e <memset>:
 8002f9e:	0003      	movs	r3, r0
 8002fa0:	1882      	adds	r2, r0, r2
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d100      	bne.n	8002fa8 <memset+0xa>
 8002fa6:	4770      	bx	lr
 8002fa8:	7019      	strb	r1, [r3, #0]
 8002faa:	3301      	adds	r3, #1
 8002fac:	e7f9      	b.n	8002fa2 <memset+0x4>
	...

08002fb0 <_sbrk_r>:
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	b570      	push	{r4, r5, r6, lr}
 8002fb4:	4d06      	ldr	r5, [pc, #24]	; (8002fd0 <_sbrk_r+0x20>)
 8002fb6:	0004      	movs	r4, r0
 8002fb8:	0008      	movs	r0, r1
 8002fba:	602b      	str	r3, [r5, #0]
 8002fbc:	f7fd fd8a 	bl	8000ad4 <_sbrk>
 8002fc0:	1c43      	adds	r3, r0, #1
 8002fc2:	d103      	bne.n	8002fcc <_sbrk_r+0x1c>
 8002fc4:	682b      	ldr	r3, [r5, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d000      	beq.n	8002fcc <_sbrk_r+0x1c>
 8002fca:	6023      	str	r3, [r4, #0]
 8002fcc:	bd70      	pop	{r4, r5, r6, pc}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	20000360 	.word	0x20000360

08002fd4 <__errno>:
 8002fd4:	4b01      	ldr	r3, [pc, #4]	; (8002fdc <__errno+0x8>)
 8002fd6:	6818      	ldr	r0, [r3, #0]
 8002fd8:	4770      	bx	lr
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	20000058 	.word	0x20000058

08002fe0 <__libc_init_array>:
 8002fe0:	b570      	push	{r4, r5, r6, lr}
 8002fe2:	2600      	movs	r6, #0
 8002fe4:	4c0c      	ldr	r4, [pc, #48]	; (8003018 <__libc_init_array+0x38>)
 8002fe6:	4d0d      	ldr	r5, [pc, #52]	; (800301c <__libc_init_array+0x3c>)
 8002fe8:	1b64      	subs	r4, r4, r5
 8002fea:	10a4      	asrs	r4, r4, #2
 8002fec:	42a6      	cmp	r6, r4
 8002fee:	d109      	bne.n	8003004 <__libc_init_array+0x24>
 8002ff0:	2600      	movs	r6, #0
 8002ff2:	f000 f877 	bl	80030e4 <_init>
 8002ff6:	4c0a      	ldr	r4, [pc, #40]	; (8003020 <__libc_init_array+0x40>)
 8002ff8:	4d0a      	ldr	r5, [pc, #40]	; (8003024 <__libc_init_array+0x44>)
 8002ffa:	1b64      	subs	r4, r4, r5
 8002ffc:	10a4      	asrs	r4, r4, #2
 8002ffe:	42a6      	cmp	r6, r4
 8003000:	d105      	bne.n	800300e <__libc_init_array+0x2e>
 8003002:	bd70      	pop	{r4, r5, r6, pc}
 8003004:	00b3      	lsls	r3, r6, #2
 8003006:	58eb      	ldr	r3, [r5, r3]
 8003008:	4798      	blx	r3
 800300a:	3601      	adds	r6, #1
 800300c:	e7ee      	b.n	8002fec <__libc_init_array+0xc>
 800300e:	00b3      	lsls	r3, r6, #2
 8003010:	58eb      	ldr	r3, [r5, r3]
 8003012:	4798      	blx	r3
 8003014:	3601      	adds	r6, #1
 8003016:	e7f2      	b.n	8002ffe <__libc_init_array+0x1e>
 8003018:	08003134 	.word	0x08003134
 800301c:	08003134 	.word	0x08003134
 8003020:	08003138 	.word	0x08003138
 8003024:	08003134 	.word	0x08003134

08003028 <__retarget_lock_acquire_recursive>:
 8003028:	4770      	bx	lr

0800302a <__retarget_lock_release_recursive>:
 800302a:	4770      	bx	lr

0800302c <memcpy>:
 800302c:	2300      	movs	r3, #0
 800302e:	b510      	push	{r4, lr}
 8003030:	429a      	cmp	r2, r3
 8003032:	d100      	bne.n	8003036 <memcpy+0xa>
 8003034:	bd10      	pop	{r4, pc}
 8003036:	5ccc      	ldrb	r4, [r1, r3]
 8003038:	54c4      	strb	r4, [r0, r3]
 800303a:	3301      	adds	r3, #1
 800303c:	e7f8      	b.n	8003030 <memcpy+0x4>
	...

08003040 <_free_r>:
 8003040:	b570      	push	{r4, r5, r6, lr}
 8003042:	0005      	movs	r5, r0
 8003044:	2900      	cmp	r1, #0
 8003046:	d010      	beq.n	800306a <_free_r+0x2a>
 8003048:	1f0c      	subs	r4, r1, #4
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	da00      	bge.n	8003052 <_free_r+0x12>
 8003050:	18e4      	adds	r4, r4, r3
 8003052:	0028      	movs	r0, r5
 8003054:	f7ff ff5a 	bl	8002f0c <__malloc_lock>
 8003058:	4a1d      	ldr	r2, [pc, #116]	; (80030d0 <_free_r+0x90>)
 800305a:	6813      	ldr	r3, [r2, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d105      	bne.n	800306c <_free_r+0x2c>
 8003060:	6063      	str	r3, [r4, #4]
 8003062:	6014      	str	r4, [r2, #0]
 8003064:	0028      	movs	r0, r5
 8003066:	f7ff ff59 	bl	8002f1c <__malloc_unlock>
 800306a:	bd70      	pop	{r4, r5, r6, pc}
 800306c:	42a3      	cmp	r3, r4
 800306e:	d908      	bls.n	8003082 <_free_r+0x42>
 8003070:	6820      	ldr	r0, [r4, #0]
 8003072:	1821      	adds	r1, r4, r0
 8003074:	428b      	cmp	r3, r1
 8003076:	d1f3      	bne.n	8003060 <_free_r+0x20>
 8003078:	6819      	ldr	r1, [r3, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	1809      	adds	r1, r1, r0
 800307e:	6021      	str	r1, [r4, #0]
 8003080:	e7ee      	b.n	8003060 <_free_r+0x20>
 8003082:	001a      	movs	r2, r3
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <_free_r+0x4e>
 800308a:	42a3      	cmp	r3, r4
 800308c:	d9f9      	bls.n	8003082 <_free_r+0x42>
 800308e:	6811      	ldr	r1, [r2, #0]
 8003090:	1850      	adds	r0, r2, r1
 8003092:	42a0      	cmp	r0, r4
 8003094:	d10b      	bne.n	80030ae <_free_r+0x6e>
 8003096:	6820      	ldr	r0, [r4, #0]
 8003098:	1809      	adds	r1, r1, r0
 800309a:	1850      	adds	r0, r2, r1
 800309c:	6011      	str	r1, [r2, #0]
 800309e:	4283      	cmp	r3, r0
 80030a0:	d1e0      	bne.n	8003064 <_free_r+0x24>
 80030a2:	6818      	ldr	r0, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	1841      	adds	r1, r0, r1
 80030a8:	6011      	str	r1, [r2, #0]
 80030aa:	6053      	str	r3, [r2, #4]
 80030ac:	e7da      	b.n	8003064 <_free_r+0x24>
 80030ae:	42a0      	cmp	r0, r4
 80030b0:	d902      	bls.n	80030b8 <_free_r+0x78>
 80030b2:	230c      	movs	r3, #12
 80030b4:	602b      	str	r3, [r5, #0]
 80030b6:	e7d5      	b.n	8003064 <_free_r+0x24>
 80030b8:	6820      	ldr	r0, [r4, #0]
 80030ba:	1821      	adds	r1, r4, r0
 80030bc:	428b      	cmp	r3, r1
 80030be:	d103      	bne.n	80030c8 <_free_r+0x88>
 80030c0:	6819      	ldr	r1, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	1809      	adds	r1, r1, r0
 80030c6:	6021      	str	r1, [r4, #0]
 80030c8:	6063      	str	r3, [r4, #4]
 80030ca:	6054      	str	r4, [r2, #4]
 80030cc:	e7ca      	b.n	8003064 <_free_r+0x24>
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	20000220 	.word	0x20000220

080030d4 <_malloc_usable_size_r>:
 80030d4:	1f0b      	subs	r3, r1, #4
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	1f18      	subs	r0, r3, #4
 80030da:	2b00      	cmp	r3, #0
 80030dc:	da01      	bge.n	80030e2 <_malloc_usable_size_r+0xe>
 80030de:	580b      	ldr	r3, [r1, r0]
 80030e0:	18c0      	adds	r0, r0, r3
 80030e2:	4770      	bx	lr

080030e4 <_init>:
 80030e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ea:	bc08      	pop	{r3}
 80030ec:	469e      	mov	lr, r3
 80030ee:	4770      	bx	lr

080030f0 <_fini>:
 80030f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030f6:	bc08      	pop	{r3}
 80030f8:	469e      	mov	lr, r3
 80030fa:	4770      	bx	lr
