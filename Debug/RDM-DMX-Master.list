
RDM-DMX-Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000347c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800353c  0800353c  0001353c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800367c  0800367c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800367c  0800367c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800367c  0800367c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800367c  0800367c  0001367c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003680  08003680  00013680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000070  080036f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  080036f4  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c415  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000194d  00000000  00000000  0002c4ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  0002de00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa0  00000000  00000000  0002e948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001c44  00000000  00000000  0002f3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d519  00000000  00000000  0003102c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006f369  00000000  00000000  0003e545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ad8ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dac  00000000  00000000  000ad900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003524 	.word	0x08003524

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003524 	.word	0x08003524

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	4c92      	ldr	r4, [pc, #584]	; (8000480 <main+0x24c>)
 8000238:	44a5      	add	sp, r4
 800023a:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  HAL_Init();
 800023c:	f000 fca2 	bl	8000b84 <HAL_Init>

	  SystemClock_Config();
 8000240:	f000 f98c 	bl	800055c <SystemClock_Config>

	  /* Initialize all configured peripherals */
	  MX_GPIO_Init();
 8000244:	f000 faa4 	bl	8000790 <MX_GPIO_Init>
	  MX_USART1_UART_Init();
 8000248:	f000 fa3e 	bl	80006c8 <MX_USART1_UART_Init>
	  MX_TIM2_Init();
 800024c:	f000 f9e8 	bl	8000620 <MX_TIM2_Init>
	  /* USER CODE BEGIN 2 */
	  //char data_to_send[100] = "Hello World\n";
	  //HAL_UART_Transmit(&huart1, data_to_send, strlen(data_to_send), TIMEOUT);

		uint8_t TN = 0x00;
 8000250:	4b8c      	ldr	r3, [pc, #560]	; (8000484 <main+0x250>)
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	2200      	movs	r2, #0
 8000256:	701a      	strb	r2, [r3, #0]
		uint8_t ID = 0x01;
 8000258:	4b8b      	ldr	r3, [pc, #556]	; (8000488 <main+0x254>)
 800025a:	18fb      	adds	r3, r7, r3
 800025c:	2201      	movs	r2, #1
 800025e:	701a      	strb	r2, [r3, #0]
		uint8_t Identify_start_stop = 0x01;
 8000260:	4b8a      	ldr	r3, [pc, #552]	; (800048c <main+0x258>)
 8000262:	18fb      	adds	r3, r7, r3
 8000264:	2201      	movs	r2, #1
 8000266:	701a      	strb	r2, [r3, #0]
		uint16_t PID_Resquested = 0x25FA;
 8000268:	4b89      	ldr	r3, [pc, #548]	; (8000490 <main+0x25c>)
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	4a89      	ldr	r2, [pc, #548]	; (8000494 <main+0x260>)
 800026e:	801a      	strh	r2, [r3, #0]
		uint16_t DMX_address = 0xC13F;
 8000270:	4b89      	ldr	r3, [pc, #548]	; (8000498 <main+0x264>)
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	4a89      	ldr	r2, [pc, #548]	; (800049c <main+0x268>)
 8000276:	801a      	strh	r2, [r3, #0]
		uint16_t Sub_Dev = 0x2AF7;
 8000278:	4b89      	ldr	r3, [pc, #548]	; (80004a0 <main+0x26c>)
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	4a89      	ldr	r2, [pc, #548]	; (80004a4 <main+0x270>)
 800027e:	801a      	strh	r2, [r3, #0]
		uint64_t LB_PD = 0x0;
 8000280:	2200      	movs	r2, #0
 8000282:	2300      	movs	r3, #0
 8000284:	2197      	movs	r1, #151	; 0x97
 8000286:	00c9      	lsls	r1, r1, #3
 8000288:	1879      	adds	r1, r7, r1
 800028a:	600a      	str	r2, [r1, #0]
 800028c:	604b      	str	r3, [r1, #4]
		uint64_t UB_PD = 0xFFFFFFFFFFFF;
 800028e:	2201      	movs	r2, #1
 8000290:	4252      	negs	r2, r2
 8000292:	4b85      	ldr	r3, [pc, #532]	; (80004a8 <main+0x274>)
 8000294:	2196      	movs	r1, #150	; 0x96
 8000296:	00c9      	lsls	r1, r1, #3
 8000298:	1879      	adds	r1, r7, r1
 800029a:	600a      	str	r2, [r1, #0]
 800029c:	604b      	str	r3, [r1, #4]
		//uint64_t UID_D = 0x123456789ABC;
		uint64_t UID_D = 0xFFFFFFFFFFFF;
 800029e:	2201      	movs	r2, #1
 80002a0:	4252      	negs	r2, r2
 80002a2:	4b81      	ldr	r3, [pc, #516]	; (80004a8 <main+0x274>)
 80002a4:	2195      	movs	r1, #149	; 0x95
 80002a6:	00c9      	lsls	r1, r1, #3
 80002a8:	1879      	adds	r1, r7, r1
 80002aa:	600a      	str	r2, [r1, #0]
 80002ac:	604b      	str	r3, [r1, #4]
		uint64_t UID_S = 0xCBA987654321;
 80002ae:	4a7f      	ldr	r2, [pc, #508]	; (80004ac <main+0x278>)
 80002b0:	4b7f      	ldr	r3, [pc, #508]	; (80004b0 <main+0x27c>)
 80002b2:	2194      	movs	r1, #148	; 0x94
 80002b4:	00c9      	lsls	r1, r1, #3
 80002b6:	1879      	adds	r1, r7, r1
 80002b8:	600a      	str	r2, [r1, #0]
 80002ba:	604b      	str	r3, [r1, #4]

		uint8_t rxBuffer[MAX_BUFFER_SIZE];
		uint16_t rxDataLength = 0;
 80002bc:	4b7d      	ldr	r3, [pc, #500]	; (80004b4 <main+0x280>)
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	2200      	movs	r2, #0
 80002c2:	801a      	strh	r2, [r3, #0]

		unsigned char data_send_message[] = "\nData de Envio:\r\n"; //Data to send
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <main+0x284>)
 80002c6:	249a      	movs	r4, #154	; 0x9a
 80002c8:	00e4      	lsls	r4, r4, #3
 80002ca:	191b      	adds	r3, r3, r4
 80002cc:	19db      	adds	r3, r3, r7
 80002ce:	4a7b      	ldr	r2, [pc, #492]	; (80004bc <main+0x288>)
 80002d0:	ca23      	ldmia	r2!, {r0, r1, r5}
 80002d2:	c323      	stmia	r3!, {r0, r1, r5}
 80002d4:	6811      	ldr	r1, [r2, #0]
 80002d6:	6019      	str	r1, [r3, #0]
 80002d8:	8892      	ldrh	r2, [r2, #4]
 80002da:	809a      	strh	r2, [r3, #4]

		/* Envio de dados ----------------------------------------------------------------------------------------------*/

		//uint8_t* dmx_rdm_data = SET_identify_device(UID_D, UID_S, TN, ID, Sub_Dev, Identify_start_stop);
		//uint8_t* dmx_rdm_data = DISC_unique_branch(UID_D, UID_S, TN, ID, LB_PD, UB_PD);
		uint8_t dmx_rdm_data[56] = {0x00, 0x00, 0x36, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 80002dc:	4b78      	ldr	r3, [pc, #480]	; (80004c0 <main+0x28c>)
 80002de:	191b      	adds	r3, r3, r4
 80002e0:	19da      	adds	r2, r3, r7
 80002e2:	4b78      	ldr	r3, [pc, #480]	; (80004c4 <main+0x290>)
 80002e4:	0010      	movs	r0, r2
 80002e6:	0019      	movs	r1, r3
 80002e8:	2338      	movs	r3, #56	; 0x38
 80002ea:	001a      	movs	r2, r3
 80002ec:	f002 fca8 	bl	8002c40 <memcpy>
														    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
														    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00};

		// Envia para a serial debug os dados a serem enviados
		unsigned char viewMessage[15];
		HAL_UART_Transmit(&huart1, data_send_message, sizeof(data_send_message), 10);	// Sending in normal mode
 80002f0:	2388      	movs	r3, #136	; 0x88
 80002f2:	18f9      	adds	r1, r7, r3
 80002f4:	4874      	ldr	r0, [pc, #464]	; (80004c8 <main+0x294>)
 80002f6:	230a      	movs	r3, #10
 80002f8:	2212      	movs	r2, #18
 80002fa:	f002 f86d 	bl	80023d8 <HAL_UART_Transmit>

	 // Faz a transmissão  de fato


		HAL_TIM_Base_Start(&htim2);
 80002fe:	4b73      	ldr	r3, [pc, #460]	; (80004cc <main+0x298>)
 8000300:	0018      	movs	r0, r3
 8000302:	f001 fd41 	bl	8001d88 <HAL_TIM_Base_Start>

		DMX_GPIO_Init(); // Inicia DMX modo GPIO
 8000306:	f000 f8eb 	bl	80004e0 <DMX_GPIO_Init>
		delay_us(2000); // Delay para começar a comunicar
 800030a:	23fa      	movs	r3, #250	; 0xfa
 800030c:	00db      	lsls	r3, r3, #3
 800030e:	0018      	movs	r0, r3
 8000310:	f000 f90e 	bl	8000530 <delay_us>

		DMX_Set_DE_HIGH(); // Habilita o barramento DMX para escrita (Necessidade do RS485)
 8000314:	2390      	movs	r3, #144	; 0x90
 8000316:	05db      	lsls	r3, r3, #23
 8000318:	2201      	movs	r2, #1
 800031a:	2102      	movs	r1, #2
 800031c:	0018      	movs	r0, r3
 800031e:	f000 ff89 	bl	8001234 <HAL_GPIO_WritePin>

		DMX_Set_HIGH();
 8000322:	2390      	movs	r3, #144	; 0x90
 8000324:	05db      	lsls	r3, r3, #23
 8000326:	2201      	movs	r2, #1
 8000328:	2104      	movs	r1, #4
 800032a:	0018      	movs	r0, r3
 800032c:	f000 ff82 	bl	8001234 <HAL_GPIO_WritePin>
		delay_us(20);
 8000330:	2014      	movs	r0, #20
 8000332:	f000 f8fd 	bl	8000530 <delay_us>

		DMX_Set_LOW(); // Setando Break
 8000336:	2390      	movs	r3, #144	; 0x90
 8000338:	05db      	lsls	r3, r3, #23
 800033a:	2200      	movs	r2, #0
 800033c:	2104      	movs	r1, #4
 800033e:	0018      	movs	r0, r3
 8000340:	f000 ff78 	bl	8001234 <HAL_GPIO_WritePin>
		delay_us(176);
 8000344:	20b0      	movs	r0, #176	; 0xb0
 8000346:	f000 f8f3 	bl	8000530 <delay_us>

		// O Time after break é implementado pela UART, através do idle frame

		DMX_GPIO_DeInit(); // Desativa o modo GPIO
 800034a:	2390      	movs	r3, #144	; 0x90
 800034c:	05db      	lsls	r3, r3, #23
 800034e:	2104      	movs	r1, #4
 8000350:	0018      	movs	r0, r3
 8000352:	f000 fe9f 	bl	8001094 <HAL_GPIO_DeInit>

		DMX_UART_Init();// Inicia novamente o modo USART
 8000356:	f000 f9e9 	bl	800072c <MX_USART2_UART_Init>

		HAL_UART_Transmit(&huart2, dmx_rdm_data, dmx_rdm_data[2] + 2, TIMEOUT);
 800035a:	4b59      	ldr	r3, [pc, #356]	; (80004c0 <main+0x28c>)
 800035c:	191b      	adds	r3, r3, r4
 800035e:	19db      	adds	r3, r3, r7
 8000360:	789b      	ldrb	r3, [r3, #2]
 8000362:	b29b      	uxth	r3, r3
 8000364:	3302      	adds	r3, #2
 8000366:	b29a      	uxth	r2, r3
 8000368:	2328      	movs	r3, #40	; 0x28
 800036a:	18f9      	adds	r1, r7, r3
 800036c:	4858      	ldr	r0, [pc, #352]	; (80004d0 <main+0x29c>)
 800036e:	2364      	movs	r3, #100	; 0x64
 8000370:	f002 f832 	bl	80023d8 <HAL_UART_Transmit>

		DMX_Set_DE_LOW(); // Desabilita o barramento DMX para escrita (Necessidade do RS485)
 8000374:	2390      	movs	r3, #144	; 0x90
 8000376:	05db      	lsls	r3, r3, #23
 8000378:	2200      	movs	r2, #0
 800037a:	2102      	movs	r1, #2
 800037c:	0018      	movs	r0, r3
 800037e:	f000 ff59 	bl	8001234 <HAL_GPIO_WritePin>

		DMX_UART_DeInit;
 8000382:	4b53      	ldr	r3, [pc, #332]	; (80004d0 <main+0x29c>)
 8000384:	0018      	movs	r0, r3
 8000386:	f001 ffe9 	bl	800235c <HAL_UART_DeInit>


		for(int i = 0; i < dmx_rdm_data[2] + 2; i++){
 800038a:	2300      	movs	r3, #0
 800038c:	4a51      	ldr	r2, [pc, #324]	; (80004d4 <main+0x2a0>)
 800038e:	18ba      	adds	r2, r7, r2
 8000390:	6013      	str	r3, [r2, #0]
 8000392:	e01b      	b.n	80003cc <main+0x198>
				sprintf(viewMessage, "[%d] - 0x%02x\r\n", i, dmx_rdm_data[i]);
 8000394:	4b4a      	ldr	r3, [pc, #296]	; (80004c0 <main+0x28c>)
 8000396:	229a      	movs	r2, #154	; 0x9a
 8000398:	00d2      	lsls	r2, r2, #3
 800039a:	189b      	adds	r3, r3, r2
 800039c:	19da      	adds	r2, r3, r7
 800039e:	4c4d      	ldr	r4, [pc, #308]	; (80004d4 <main+0x2a0>)
 80003a0:	193b      	adds	r3, r7, r4
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	18d3      	adds	r3, r2, r3
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	193a      	adds	r2, r7, r4
 80003aa:	6812      	ldr	r2, [r2, #0]
 80003ac:	494a      	ldr	r1, [pc, #296]	; (80004d8 <main+0x2a4>)
 80003ae:	2518      	movs	r5, #24
 80003b0:	1978      	adds	r0, r7, r5
 80003b2:	f002 fd4b 	bl	8002e4c <siprintf>
				HAL_UART_Transmit(&huart1, viewMessage, sizeof(viewMessage), TIMEOUT);
 80003b6:	1979      	adds	r1, r7, r5
 80003b8:	4843      	ldr	r0, [pc, #268]	; (80004c8 <main+0x294>)
 80003ba:	2364      	movs	r3, #100	; 0x64
 80003bc:	220f      	movs	r2, #15
 80003be:	f002 f80b 	bl	80023d8 <HAL_UART_Transmit>
		for(int i = 0; i < dmx_rdm_data[2] + 2; i++){
 80003c2:	193b      	adds	r3, r7, r4
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	3301      	adds	r3, #1
 80003c8:	193a      	adds	r2, r7, r4
 80003ca:	6013      	str	r3, [r2, #0]
 80003cc:	4b3c      	ldr	r3, [pc, #240]	; (80004c0 <main+0x28c>)
 80003ce:	219a      	movs	r1, #154	; 0x9a
 80003d0:	00c9      	lsls	r1, r1, #3
 80003d2:	185b      	adds	r3, r3, r1
 80003d4:	19db      	adds	r3, r3, r7
 80003d6:	789b      	ldrb	r3, [r3, #2]
 80003d8:	3301      	adds	r3, #1
 80003da:	4a3e      	ldr	r2, [pc, #248]	; (80004d4 <main+0x2a0>)
 80003dc:	18ba      	adds	r2, r7, r2
 80003de:	6812      	ldr	r2, [r2, #0]
 80003e0:	429a      	cmp	r2, r3
 80003e2:	ddd7      	ble.n	8000394 <main+0x160>
		/* Recepção de dados -----------------------------------------------------------------------------------------------------------*/

		//HAL_UART_Receive(&huart2, data_received_message, 40, TIMEOUT);

		// Envia para a serial debug os dados lidos do RDM
		unsigned char data_receive_message[] = "\nData de Recebimento:\r\n";
 80003e4:	4b26      	ldr	r3, [pc, #152]	; (8000480 <main+0x24c>)
 80003e6:	185b      	adds	r3, r3, r1
 80003e8:	19db      	adds	r3, r3, r7
 80003ea:	4a3c      	ldr	r2, [pc, #240]	; (80004dc <main+0x2a8>)
 80003ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80003ee:	c313      	stmia	r3!, {r0, r1, r4}
 80003f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80003f2:	c313      	stmia	r3!, {r0, r1, r4}
		HAL_UART_Transmit(&huart1, data_receive_message, sizeof(data_receive_message), 10);	// Sending in normal mode
 80003f4:	0039      	movs	r1, r7
 80003f6:	4834      	ldr	r0, [pc, #208]	; (80004c8 <main+0x294>)
 80003f8:	230a      	movs	r3, #10
 80003fa:	2218      	movs	r2, #24
 80003fc:	f001 ffec 	bl	80023d8 <HAL_UART_Transmit>
	  /* Infinite loop */
	  /* USER CODE BEGIN WHILE */
	  while (1)
	  {

	  	DMX_GPIO_Init(); // Inicia DMX modo GPIO
 8000400:	f000 f86e 	bl	80004e0 <DMX_GPIO_Init>

			DMX_Set_DE_HIGH(); // Habilita o barramento DMX para escrita (Necessidade do RS485)
 8000404:	2390      	movs	r3, #144	; 0x90
 8000406:	05db      	lsls	r3, r3, #23
 8000408:	2201      	movs	r2, #1
 800040a:	2102      	movs	r1, #2
 800040c:	0018      	movs	r0, r3
 800040e:	f000 ff11 	bl	8001234 <HAL_GPIO_WritePin>

			DMX_Set_HIGH();
 8000412:	2390      	movs	r3, #144	; 0x90
 8000414:	05db      	lsls	r3, r3, #23
 8000416:	2201      	movs	r2, #1
 8000418:	2104      	movs	r1, #4
 800041a:	0018      	movs	r0, r3
 800041c:	f000 ff0a 	bl	8001234 <HAL_GPIO_WritePin>
			delay_us(20);
 8000420:	2014      	movs	r0, #20
 8000422:	f000 f885 	bl	8000530 <delay_us>

			DMX_Set_LOW(); // Setando Break
 8000426:	2390      	movs	r3, #144	; 0x90
 8000428:	05db      	lsls	r3, r3, #23
 800042a:	2200      	movs	r2, #0
 800042c:	2104      	movs	r1, #4
 800042e:	0018      	movs	r0, r3
 8000430:	f000 ff00 	bl	8001234 <HAL_GPIO_WritePin>
			delay_us(176);
 8000434:	20b0      	movs	r0, #176	; 0xb0
 8000436:	f000 f87b 	bl	8000530 <delay_us>

			// O Time after break é implementado pela UART, através do idle frame

			DMX_GPIO_DeInit(); // Desativa o modo GPIO
 800043a:	2390      	movs	r3, #144	; 0x90
 800043c:	05db      	lsls	r3, r3, #23
 800043e:	2104      	movs	r1, #4
 8000440:	0018      	movs	r0, r3
 8000442:	f000 fe27 	bl	8001094 <HAL_GPIO_DeInit>

			DMX_UART_Init();// Inicia novamente o modo USART
 8000446:	f000 f971 	bl	800072c <MX_USART2_UART_Init>

			HAL_UART_Transmit(&huart2, dmx_rdm_data, dmx_rdm_data[2] + 2, TIMEOUT);
 800044a:	4b1d      	ldr	r3, [pc, #116]	; (80004c0 <main+0x28c>)
 800044c:	229a      	movs	r2, #154	; 0x9a
 800044e:	00d2      	lsls	r2, r2, #3
 8000450:	189b      	adds	r3, r3, r2
 8000452:	19db      	adds	r3, r3, r7
 8000454:	789b      	ldrb	r3, [r3, #2]
 8000456:	b29b      	uxth	r3, r3
 8000458:	3302      	adds	r3, #2
 800045a:	b29a      	uxth	r2, r3
 800045c:	2328      	movs	r3, #40	; 0x28
 800045e:	18f9      	adds	r1, r7, r3
 8000460:	481b      	ldr	r0, [pc, #108]	; (80004d0 <main+0x29c>)
 8000462:	2364      	movs	r3, #100	; 0x64
 8000464:	f001 ffb8 	bl	80023d8 <HAL_UART_Transmit>

			DMX_Set_DE_LOW(); // Desabilita o barramento DMX para escrita (Necessidade do RS485)
 8000468:	2390      	movs	r3, #144	; 0x90
 800046a:	05db      	lsls	r3, r3, #23
 800046c:	2200      	movs	r2, #0
 800046e:	2102      	movs	r1, #2
 8000470:	0018      	movs	r0, r3
 8000472:	f000 fedf 	bl	8001234 <HAL_GPIO_WritePin>

			DMX_UART_DeInit;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <main+0x29c>)
 8000478:	0018      	movs	r0, r3
 800047a:	f001 ff6f 	bl	800235c <HAL_UART_DeInit>
	  	DMX_GPIO_Init(); // Inicia DMX modo GPIO
 800047e:	e7bf      	b.n	8000400 <main+0x1cc>
 8000480:	fffffb30 	.word	0xfffffb30
 8000484:	000004cb 	.word	0x000004cb
 8000488:	000004ca 	.word	0x000004ca
 800048c:	000004c9 	.word	0x000004c9
 8000490:	000004c6 	.word	0x000004c6
 8000494:	000025fa 	.word	0x000025fa
 8000498:	000004c4 	.word	0x000004c4
 800049c:	ffffc13f 	.word	0xffffc13f
 80004a0:	000004c2 	.word	0x000004c2
 80004a4:	00002af7 	.word	0x00002af7
 80004a8:	0000ffff 	.word	0x0000ffff
 80004ac:	87654321 	.word	0x87654321
 80004b0:	0000cba9 	.word	0x0000cba9
 80004b4:	0000049e 	.word	0x0000049e
 80004b8:	fffffbb8 	.word	0xfffffbb8
 80004bc:	0800354c 	.word	0x0800354c
 80004c0:	fffffb58 	.word	0xfffffb58
 80004c4:	08003560 	.word	0x08003560
 80004c8:	200000d4 	.word	0x200000d4
 80004cc:	2000008c 	.word	0x2000008c
 80004d0:	2000015c 	.word	0x2000015c
 80004d4:	000004cc 	.word	0x000004cc
 80004d8:	0800353c 	.word	0x0800353c
 80004dc:	08003598 	.word	0x08003598

080004e0 <DMX_GPIO_Init>:

	  }
	  /* USER CODE END 3 */
	}
	static void DMX_GPIO_Init(void){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	0018      	movs	r0, r3
 80004ea:	2314      	movs	r3, #20
 80004ec:	001a      	movs	r2, r3
 80004ee:	2100      	movs	r1, #0
 80004f0:	f002 fbaf 	bl	8002c52 <memset>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80004f4:	2390      	movs	r3, #144	; 0x90
 80004f6:	05db      	lsls	r3, r3, #23
 80004f8:	2200      	movs	r2, #0
 80004fa:	2104      	movs	r1, #4
 80004fc:	0018      	movs	r0, r3
 80004fe:	f000 fe99 	bl	8001234 <HAL_GPIO_WritePin>

		// Configure GPIO pin as output
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	2204      	movs	r2, #4
 8000506:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2201      	movs	r2, #1
 800050c:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	2200      	movs	r2, #0
 8000512:	609a      	str	r2, [r3, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	2200      	movs	r2, #0
 8000518:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051a:	1d3a      	adds	r2, r7, #4
 800051c:	2390      	movs	r3, #144	; 0x90
 800051e:	05db      	lsls	r3, r3, #23
 8000520:	0011      	movs	r1, r2
 8000522:	0018      	movs	r0, r3
 8000524:	f000 fc46 	bl	8000db4 <HAL_GPIO_Init>

	}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b006      	add	sp, #24
 800052e:	bd80      	pop	{r7, pc}

08000530 <delay_us>:

	void delay_us(uint32_t us){
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8000538:	4b07      	ldr	r3, [pc, #28]	; (8000558 <delay_us+0x28>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2200      	movs	r2, #0
 800053e:	625a      	str	r2, [r3, #36]	; 0x24
			while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8000540:	46c0      	nop			; (mov r8, r8)
 8000542:	4b05      	ldr	r3, [pc, #20]	; (8000558 <delay_us+0x28>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	429a      	cmp	r2, r3
 800054c:	d8f9      	bhi.n	8000542 <delay_us+0x12>
	}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	b002      	add	sp, #8
 8000556:	bd80      	pop	{r7, pc}
 8000558:	2000008c 	.word	0x2000008c

0800055c <SystemClock_Config>:
	/**
	  * @brief System Clock Configuration
	  * @retval None
	  */
void SystemClock_Config(void)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b097      	sub	sp, #92	; 0x5c
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	2428      	movs	r4, #40	; 0x28
 8000564:	193b      	adds	r3, r7, r4
 8000566:	0018      	movs	r0, r3
 8000568:	2330      	movs	r3, #48	; 0x30
 800056a:	001a      	movs	r2, r3
 800056c:	2100      	movs	r1, #0
 800056e:	f002 fb70 	bl	8002c52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000572:	2318      	movs	r3, #24
 8000574:	18fb      	adds	r3, r7, r3
 8000576:	0018      	movs	r0, r3
 8000578:	2310      	movs	r3, #16
 800057a:	001a      	movs	r2, r3
 800057c:	2100      	movs	r1, #0
 800057e:	f002 fb68 	bl	8002c52 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	0018      	movs	r0, r3
 8000586:	2314      	movs	r3, #20
 8000588:	001a      	movs	r2, r3
 800058a:	2100      	movs	r1, #0
 800058c:	f002 fb61 	bl	8002c52 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000590:	0021      	movs	r1, r4
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2202      	movs	r2, #2
 8000596:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2201      	movs	r2, #1
 800059c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2210      	movs	r2, #16
 80005a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2202      	movs	r2, #2
 80005a8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2200      	movs	r2, #0
 80005ae:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	22a0      	movs	r2, #160	; 0xa0
 80005b4:	0392      	lsls	r2, r2, #14
 80005b6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2200      	movs	r2, #0
 80005bc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	0018      	movs	r0, r3
 80005c2:	f000 fe55 	bl	8001270 <HAL_RCC_OscConfig>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ca:	f000 f957 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	2118      	movs	r1, #24
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2207      	movs	r2, #7
 80005d4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2202      	movs	r2, #2
 80005da:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2101      	movs	r1, #1
 80005ec:	0018      	movs	r0, r3
 80005ee:	f001 f959 	bl	80018a4 <HAL_RCC_ClockConfig>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005f6:	f000 f941 	bl	800087c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2201      	movs	r2, #1
 80005fe:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	0018      	movs	r0, r3
 800060a:	f001 fa8f 	bl	8001b2c <HAL_RCCEx_PeriphCLKConfig>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000612:	f000 f933 	bl	800087c <Error_Handler>
  }
}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	b017      	add	sp, #92	; 0x5c
 800061c:	bd90      	pop	{r4, r7, pc}
	...

08000620 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000626:	2308      	movs	r3, #8
 8000628:	18fb      	adds	r3, r7, r3
 800062a:	0018      	movs	r0, r3
 800062c:	2310      	movs	r3, #16
 800062e:	001a      	movs	r2, r3
 8000630:	2100      	movs	r1, #0
 8000632:	f002 fb0e 	bl	8002c52 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000636:	003b      	movs	r3, r7
 8000638:	0018      	movs	r0, r3
 800063a:	2308      	movs	r3, #8
 800063c:	001a      	movs	r2, r3
 800063e:	2100      	movs	r1, #0
 8000640:	f002 fb07 	bl	8002c52 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000644:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <MX_TIM2_Init+0xa4>)
 8000646:	2280      	movs	r2, #128	; 0x80
 8000648:	05d2      	lsls	r2, r2, #23
 800064a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 800064c:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <MX_TIM2_Init+0xa4>)
 800064e:	222f      	movs	r2, #47	; 0x2f
 8000650:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <MX_TIM2_Init+0xa4>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000658:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <MX_TIM2_Init+0xa4>)
 800065a:	2201      	movs	r2, #1
 800065c:	4252      	negs	r2, r2
 800065e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <MX_TIM2_Init+0xa4>)
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <MX_TIM2_Init+0xa4>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <MX_TIM2_Init+0xa4>)
 800066e:	0018      	movs	r0, r3
 8000670:	f001 fb3a 	bl	8001ce8 <HAL_TIM_Base_Init>
 8000674:	1e03      	subs	r3, r0, #0
 8000676:	d001      	beq.n	800067c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000678:	f000 f900 	bl	800087c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800067c:	2108      	movs	r1, #8
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2280      	movs	r2, #128	; 0x80
 8000682:	0152      	lsls	r2, r2, #5
 8000684:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000686:	187a      	adds	r2, r7, r1
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_TIM2_Init+0xa4>)
 800068a:	0011      	movs	r1, r2
 800068c:	0018      	movs	r0, r3
 800068e:	f001 fbc5 	bl	8001e1c <HAL_TIM_ConfigClockSource>
 8000692:	1e03      	subs	r3, r0, #0
 8000694:	d001      	beq.n	800069a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000696:	f000 f8f1 	bl	800087c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069a:	003b      	movs	r3, r7
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a0:	003b      	movs	r3, r7
 80006a2:	2200      	movs	r2, #0
 80006a4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006a6:	003a      	movs	r2, r7
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_TIM2_Init+0xa4>)
 80006aa:	0011      	movs	r1, r2
 80006ac:	0018      	movs	r0, r3
 80006ae:	f001 fda3 	bl	80021f8 <HAL_TIMEx_MasterConfigSynchronization>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80006b6:	f000 f8e1 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	b006      	add	sp, #24
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	2000008c 	.word	0x2000008c

080006c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_USART1_UART_Init+0x58>)
 80006ce:	4a15      	ldr	r2, [pc, #84]	; (8000724 <MX_USART1_UART_Init+0x5c>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 80006d2:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_USART1_UART_Init+0x58>)
 80006d4:	4a14      	ldr	r2, [pc, #80]	; (8000728 <MX_USART1_UART_Init+0x60>)
 80006d6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_USART1_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_USART1_UART_Init+0x58>)
 80006e0:	2280      	movs	r2, #128	; 0x80
 80006e2:	0192      	lsls	r2, r2, #6
 80006e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_USART1_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_USART1_UART_Init+0x58>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_USART1_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_USART1_UART_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_USART1_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_USART1_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <MX_USART1_UART_Init+0x58>)
 800070c:	0018      	movs	r0, r3
 800070e:	f001 fdd1 	bl	80022b4 <HAL_UART_Init>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000716:	f000 f8b1 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200000d4 	.word	0x200000d4
 8000724:	40013800 	.word	0x40013800
 8000728:	0003d090 	.word	0x0003d090

0800072c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000732:	4a15      	ldr	r2, [pc, #84]	; (8000788 <MX_USART2_UART_Init+0x5c>)
 8000734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 250000;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000738:	4a14      	ldr	r2, [pc, #80]	; (800078c <MX_USART2_UART_Init+0x60>)
 800073a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_USART2_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	0192      	lsls	r2, r2, #6
 8000748:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_USART2_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_USART2_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_USART2_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800076e:	4b05      	ldr	r3, [pc, #20]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000770:	0018      	movs	r0, r3
 8000772:	f001 fd9f 	bl	80022b4 <HAL_UART_Init>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d001      	beq.n	800077e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800077a:	f000 f87f 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	2000015c 	.word	0x2000015c
 8000788:	40004400 	.word	0x40004400
 800078c:	0003d090 	.word	0x0003d090

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b089      	sub	sp, #36	; 0x24
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	240c      	movs	r4, #12
 8000798:	193b      	adds	r3, r7, r4
 800079a:	0018      	movs	r0, r3
 800079c:	2314      	movs	r3, #20
 800079e:	001a      	movs	r2, r3
 80007a0:	2100      	movs	r1, #0
 80007a2:	f002 fa56 	bl	8002c52 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b33      	ldr	r3, [pc, #204]	; (8000874 <MX_GPIO_Init+0xe4>)
 80007a8:	695a      	ldr	r2, [r3, #20]
 80007aa:	4b32      	ldr	r3, [pc, #200]	; (8000874 <MX_GPIO_Init+0xe4>)
 80007ac:	2180      	movs	r1, #128	; 0x80
 80007ae:	0289      	lsls	r1, r1, #10
 80007b0:	430a      	orrs	r2, r1
 80007b2:	615a      	str	r2, [r3, #20]
 80007b4:	4b2f      	ldr	r3, [pc, #188]	; (8000874 <MX_GPIO_Init+0xe4>)
 80007b6:	695a      	ldr	r2, [r3, #20]
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	029b      	lsls	r3, r3, #10
 80007bc:	4013      	ands	r3, r2
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b2c      	ldr	r3, [pc, #176]	; (8000874 <MX_GPIO_Init+0xe4>)
 80007c4:	695a      	ldr	r2, [r3, #20]
 80007c6:	4b2b      	ldr	r3, [pc, #172]	; (8000874 <MX_GPIO_Init+0xe4>)
 80007c8:	2180      	movs	r1, #128	; 0x80
 80007ca:	0309      	lsls	r1, r1, #12
 80007cc:	430a      	orrs	r2, r1
 80007ce:	615a      	str	r2, [r3, #20]
 80007d0:	4b28      	ldr	r3, [pc, #160]	; (8000874 <MX_GPIO_Init+0xe4>)
 80007d2:	695a      	ldr	r2, [r3, #20]
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	031b      	lsls	r3, r3, #12
 80007d8:	4013      	ands	r3, r2
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DMX_DE_GPIO_Port, DMX_DE_Pin, GPIO_PIN_RESET);
 80007de:	2390      	movs	r3, #144	; 0x90
 80007e0:	05db      	lsls	r3, r3, #23
 80007e2:	2200      	movs	r2, #0
 80007e4:	2102      	movs	r1, #2
 80007e6:	0018      	movs	r0, r3
 80007e8:	f000 fd24 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80007ec:	23c0      	movs	r3, #192	; 0xc0
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	4821      	ldr	r0, [pc, #132]	; (8000878 <MX_GPIO_Init+0xe8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	0019      	movs	r1, r3
 80007f6:	f000 fd1d 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	2201      	movs	r2, #1
 80007fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000800:	193b      	adds	r3, r7, r4
 8000802:	2290      	movs	r2, #144	; 0x90
 8000804:	0352      	lsls	r2, r2, #13
 8000806:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	193b      	adds	r3, r7, r4
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800080e:	193a      	adds	r2, r7, r4
 8000810:	2390      	movs	r3, #144	; 0x90
 8000812:	05db      	lsls	r3, r3, #23
 8000814:	0011      	movs	r1, r2
 8000816:	0018      	movs	r0, r3
 8000818:	f000 facc 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DMX_DE_Pin */
  GPIO_InitStruct.Pin = DMX_DE_Pin;
 800081c:	193b      	adds	r3, r7, r4
 800081e:	2202      	movs	r2, #2
 8000820:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	193b      	adds	r3, r7, r4
 8000824:	2201      	movs	r2, #1
 8000826:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	193b      	adds	r3, r7, r4
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	193b      	adds	r3, r7, r4
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DMX_DE_GPIO_Port, &GPIO_InitStruct);
 8000834:	193a      	adds	r2, r7, r4
 8000836:	2390      	movs	r3, #144	; 0x90
 8000838:	05db      	lsls	r3, r3, #23
 800083a:	0011      	movs	r1, r2
 800083c:	0018      	movs	r0, r3
 800083e:	f000 fab9 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000842:	0021      	movs	r1, r4
 8000844:	187b      	adds	r3, r7, r1
 8000846:	22c0      	movs	r2, #192	; 0xc0
 8000848:	0092      	lsls	r2, r2, #2
 800084a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2201      	movs	r2, #1
 8000850:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800085e:	187b      	adds	r3, r7, r1
 8000860:	4a05      	ldr	r2, [pc, #20]	; (8000878 <MX_GPIO_Init+0xe8>)
 8000862:	0019      	movs	r1, r3
 8000864:	0010      	movs	r0, r2
 8000866:	f000 faa5 	bl	8000db4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b009      	add	sp, #36	; 0x24
 8000870:	bd90      	pop	{r4, r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	40021000 	.word	0x40021000
 8000878:	48000800 	.word	0x48000800

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	e7fe      	b.n	8000884 <Error_Handler+0x8>
	...

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <HAL_MspInit+0x44>)
 8000890:	699a      	ldr	r2, [r3, #24]
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <HAL_MspInit+0x44>)
 8000894:	2101      	movs	r1, #1
 8000896:	430a      	orrs	r2, r1
 8000898:	619a      	str	r2, [r3, #24]
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <HAL_MspInit+0x44>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	2201      	movs	r2, #1
 80008a0:	4013      	ands	r3, r2
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <HAL_MspInit+0x44>)
 80008a8:	69da      	ldr	r2, [r3, #28]
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <HAL_MspInit+0x44>)
 80008ac:	2180      	movs	r1, #128	; 0x80
 80008ae:	0549      	lsls	r1, r1, #21
 80008b0:	430a      	orrs	r2, r1
 80008b2:	61da      	str	r2, [r3, #28]
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <HAL_MspInit+0x44>)
 80008b6:	69da      	ldr	r2, [r3, #28]
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	055b      	lsls	r3, r3, #21
 80008bc:	4013      	ands	r3, r2
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b002      	add	sp, #8
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	40021000 	.word	0x40021000

080008d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	05db      	lsls	r3, r3, #23
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d10b      	bne.n	80008fc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <HAL_TIM_Base_MspInit+0x34>)
 80008e6:	69da      	ldr	r2, [r3, #28]
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_TIM_Base_MspInit+0x34>)
 80008ea:	2101      	movs	r1, #1
 80008ec:	430a      	orrs	r2, r1
 80008ee:	61da      	str	r2, [r3, #28]
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <HAL_TIM_Base_MspInit+0x34>)
 80008f2:	69db      	ldr	r3, [r3, #28]
 80008f4:	2201      	movs	r2, #1
 80008f6:	4013      	ands	r3, r2
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	b004      	add	sp, #16
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40021000 	.word	0x40021000

08000908 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b08d      	sub	sp, #52	; 0x34
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	241c      	movs	r4, #28
 8000912:	193b      	adds	r3, r7, r4
 8000914:	0018      	movs	r0, r3
 8000916:	2314      	movs	r3, #20
 8000918:	001a      	movs	r2, r3
 800091a:	2100      	movs	r1, #0
 800091c:	f002 f999 	bl	8002c52 <memset>
  if(huart->Instance==USART1)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a39      	ldr	r2, [pc, #228]	; (8000a0c <HAL_UART_MspInit+0x104>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d134      	bne.n	8000994 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800092a:	4b39      	ldr	r3, [pc, #228]	; (8000a10 <HAL_UART_MspInit+0x108>)
 800092c:	699a      	ldr	r2, [r3, #24]
 800092e:	4b38      	ldr	r3, [pc, #224]	; (8000a10 <HAL_UART_MspInit+0x108>)
 8000930:	2180      	movs	r1, #128	; 0x80
 8000932:	01c9      	lsls	r1, r1, #7
 8000934:	430a      	orrs	r2, r1
 8000936:	619a      	str	r2, [r3, #24]
 8000938:	4b35      	ldr	r3, [pc, #212]	; (8000a10 <HAL_UART_MspInit+0x108>)
 800093a:	699a      	ldr	r2, [r3, #24]
 800093c:	2380      	movs	r3, #128	; 0x80
 800093e:	01db      	lsls	r3, r3, #7
 8000940:	4013      	ands	r3, r2
 8000942:	61bb      	str	r3, [r7, #24]
 8000944:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	4b32      	ldr	r3, [pc, #200]	; (8000a10 <HAL_UART_MspInit+0x108>)
 8000948:	695a      	ldr	r2, [r3, #20]
 800094a:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <HAL_UART_MspInit+0x108>)
 800094c:	2180      	movs	r1, #128	; 0x80
 800094e:	0289      	lsls	r1, r1, #10
 8000950:	430a      	orrs	r2, r1
 8000952:	615a      	str	r2, [r3, #20]
 8000954:	4b2e      	ldr	r3, [pc, #184]	; (8000a10 <HAL_UART_MspInit+0x108>)
 8000956:	695a      	ldr	r2, [r3, #20]
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	029b      	lsls	r3, r3, #10
 800095c:	4013      	ands	r3, r2
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = debug_TX_Pin|debug_RX_Pin;
 8000962:	193b      	adds	r3, r7, r4
 8000964:	22c0      	movs	r2, #192	; 0xc0
 8000966:	00d2      	lsls	r2, r2, #3
 8000968:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	0021      	movs	r1, r4
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2202      	movs	r2, #2
 8000970:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2203      	movs	r2, #3
 800097c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2201      	movs	r2, #1
 8000982:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	187a      	adds	r2, r7, r1
 8000986:	2390      	movs	r3, #144	; 0x90
 8000988:	05db      	lsls	r3, r3, #23
 800098a:	0011      	movs	r1, r2
 800098c:	0018      	movs	r0, r3
 800098e:	f000 fa11 	bl	8000db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000992:	e037      	b.n	8000a04 <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a1e      	ldr	r2, [pc, #120]	; (8000a14 <HAL_UART_MspInit+0x10c>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d132      	bne.n	8000a04 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 800099e:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <HAL_UART_MspInit+0x108>)
 80009a0:	69da      	ldr	r2, [r3, #28]
 80009a2:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <HAL_UART_MspInit+0x108>)
 80009a4:	2180      	movs	r1, #128	; 0x80
 80009a6:	0289      	lsls	r1, r1, #10
 80009a8:	430a      	orrs	r2, r1
 80009aa:	61da      	str	r2, [r3, #28]
 80009ac:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <HAL_UART_MspInit+0x108>)
 80009ae:	69da      	ldr	r2, [r3, #28]
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	029b      	lsls	r3, r3, #10
 80009b4:	4013      	ands	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <HAL_UART_MspInit+0x108>)
 80009bc:	695a      	ldr	r2, [r3, #20]
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <HAL_UART_MspInit+0x108>)
 80009c0:	2180      	movs	r1, #128	; 0x80
 80009c2:	0289      	lsls	r1, r1, #10
 80009c4:	430a      	orrs	r2, r1
 80009c6:	615a      	str	r2, [r3, #20]
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <HAL_UART_MspInit+0x108>)
 80009ca:	695a      	ldr	r2, [r3, #20]
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	029b      	lsls	r3, r3, #10
 80009d0:	4013      	ands	r3, r2
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DMX_TX_Pin|DMX_RX_Pin;
 80009d6:	211c      	movs	r1, #28
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	220c      	movs	r2, #12
 80009dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2202      	movs	r2, #2
 80009e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2203      	movs	r2, #3
 80009ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2201      	movs	r2, #1
 80009f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	187a      	adds	r2, r7, r1
 80009f8:	2390      	movs	r3, #144	; 0x90
 80009fa:	05db      	lsls	r3, r3, #23
 80009fc:	0011      	movs	r1, r2
 80009fe:	0018      	movs	r0, r3
 8000a00:	f000 f9d8 	bl	8000db4 <HAL_GPIO_Init>
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b00d      	add	sp, #52	; 0x34
 8000a0a:	bd90      	pop	{r4, r7, pc}
 8000a0c:	40013800 	.word	0x40013800
 8000a10:	40021000 	.word	0x40021000
 8000a14:	40004400 	.word	0x40004400

08000a18 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a13      	ldr	r2, [pc, #76]	; (8000a74 <HAL_UART_MspDeInit+0x5c>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d10e      	bne.n	8000a48 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <HAL_UART_MspDeInit+0x60>)
 8000a2c:	699a      	ldr	r2, [r3, #24]
 8000a2e:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_UART_MspDeInit+0x60>)
 8000a30:	4912      	ldr	r1, [pc, #72]	; (8000a7c <HAL_UART_MspDeInit+0x64>)
 8000a32:	400a      	ands	r2, r1
 8000a34:	619a      	str	r2, [r3, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, debug_TX_Pin|debug_RX_Pin);
 8000a36:	23c0      	movs	r3, #192	; 0xc0
 8000a38:	00da      	lsls	r2, r3, #3
 8000a3a:	2390      	movs	r3, #144	; 0x90
 8000a3c:	05db      	lsls	r3, r3, #23
 8000a3e:	0011      	movs	r1, r2
 8000a40:	0018      	movs	r0, r3
 8000a42:	f000 fb27 	bl	8001094 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8000a46:	e010      	b.n	8000a6a <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART2)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a0c      	ldr	r2, [pc, #48]	; (8000a80 <HAL_UART_MspDeInit+0x68>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d10b      	bne.n	8000a6a <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART2_CLK_DISABLE();
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <HAL_UART_MspDeInit+0x60>)
 8000a54:	69da      	ldr	r2, [r3, #28]
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_UART_MspDeInit+0x60>)
 8000a58:	490a      	ldr	r1, [pc, #40]	; (8000a84 <HAL_UART_MspDeInit+0x6c>)
 8000a5a:	400a      	ands	r2, r1
 8000a5c:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, DMX_TX_Pin|DMX_RX_Pin);
 8000a5e:	2390      	movs	r3, #144	; 0x90
 8000a60:	05db      	lsls	r3, r3, #23
 8000a62:	210c      	movs	r1, #12
 8000a64:	0018      	movs	r0, r3
 8000a66:	f000 fb15 	bl	8001094 <HAL_GPIO_DeInit>
}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b002      	add	sp, #8
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	40013800 	.word	0x40013800
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	ffffbfff 	.word	0xffffbfff
 8000a80:	40004400 	.word	0x40004400
 8000a84:	fffdffff 	.word	0xfffdffff

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <NMI_Handler+0x4>

08000a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <HardFault_Handler+0x4>

08000a94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aac:	f000 f8b2 	bl	8000c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac0:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <_sbrk+0x5c>)
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <_sbrk+0x60>)
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000acc:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <_sbrk+0x64>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d102      	bne.n	8000ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <_sbrk+0x64>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <_sbrk+0x68>)
 8000ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <_sbrk+0x64>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	18d3      	adds	r3, r2, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d207      	bcs.n	8000af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae8:	f002 f880 	bl	8002bec <__errno>
 8000aec:	0003      	movs	r3, r0
 8000aee:	220c      	movs	r2, #12
 8000af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000af2:	2301      	movs	r3, #1
 8000af4:	425b      	negs	r3, r3
 8000af6:	e009      	b.n	8000b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <_sbrk+0x64>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000afe:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <_sbrk+0x64>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	18d2      	adds	r2, r2, r3
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <_sbrk+0x64>)
 8000b08:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
}
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	b006      	add	sp, #24
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20002000 	.word	0x20002000
 8000b18:	00000400 	.word	0x00000400
 8000b1c:	200001e4 	.word	0x200001e4
 8000b20:	20000200 	.word	0x20000200

08000b24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b30:	480d      	ldr	r0, [pc, #52]	; (8000b68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b32:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8000b34:	f7ff fff6 	bl	8000b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b38:	480c      	ldr	r0, [pc, #48]	; (8000b6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b3a:	490d      	ldr	r1, [pc, #52]	; (8000b70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	; (8000b74 <LoopForever+0xe>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b40:	e002      	b.n	8000b48 <LoopCopyDataInit>

08000b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b46:	3304      	adds	r3, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b4c:	d3f9      	bcc.n	8000b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b50:	4c0a      	ldr	r4, [pc, #40]	; (8000b7c <LoopForever+0x16>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b54:	e001      	b.n	8000b5a <LoopFillZerobss>

08000b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b58:	3204      	adds	r2, #4

08000b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b5c:	d3fb      	bcc.n	8000b56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b5e:	f002 f84b 	bl	8002bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b62:	f7ff fb67 	bl	8000234 <main>

08000b66 <LoopForever>:

LoopForever:
    b LoopForever
 8000b66:	e7fe      	b.n	8000b66 <LoopForever>
  ldr   r0, =_estack
 8000b68:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b74:	08003684 	.word	0x08003684
  ldr r2, =_sbss
 8000b78:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b7c:	200001fc 	.word	0x200001fc

08000b80 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC1_COMP_IRQHandler>
	...

08000b84 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b88:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <HAL_Init+0x24>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_Init+0x24>)
 8000b8e:	2110      	movs	r1, #16
 8000b90:	430a      	orrs	r2, r1
 8000b92:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f000 f809 	bl	8000bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9a:	f7ff fe75 	bl	8000888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	40022000 	.word	0x40022000

08000bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b590      	push	{r4, r7, lr}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <HAL_InitTick+0x5c>)
 8000bb6:	681c      	ldr	r4, [r3, #0]
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <HAL_InitTick+0x60>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	0019      	movs	r1, r3
 8000bbe:	23fa      	movs	r3, #250	; 0xfa
 8000bc0:	0098      	lsls	r0, r3, #2
 8000bc2:	f7ff faab 	bl	800011c <__udivsi3>
 8000bc6:	0003      	movs	r3, r0
 8000bc8:	0019      	movs	r1, r3
 8000bca:	0020      	movs	r0, r4
 8000bcc:	f7ff faa6 	bl	800011c <__udivsi3>
 8000bd0:	0003      	movs	r3, r0
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f000 f8e1 	bl	8000d9a <HAL_SYSTICK_Config>
 8000bd8:	1e03      	subs	r3, r0, #0
 8000bda:	d001      	beq.n	8000be0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e00f      	b.n	8000c00 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b03      	cmp	r3, #3
 8000be4:	d80b      	bhi.n	8000bfe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	2301      	movs	r3, #1
 8000bea:	425b      	negs	r3, r3
 8000bec:	2200      	movs	r2, #0
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f000 f8be 	bl	8000d70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_InitTick+0x64>)
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e000      	b.n	8000c00 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	0018      	movs	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b003      	add	sp, #12
 8000c06:	bd90      	pop	{r4, r7, pc}
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	20000004 	.word	0x20000004

08000c14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <HAL_IncTick+0x1c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_IncTick+0x20>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	18d2      	adds	r2, r2, r3
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <HAL_IncTick+0x20>)
 8000c26:	601a      	str	r2, [r3, #0]
}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	20000008 	.word	0x20000008
 8000c34:	200001e8 	.word	0x200001e8

08000c38 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b02      	ldr	r3, [pc, #8]	; (8000c48 <HAL_GetTick+0x10>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	0018      	movs	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	200001e8 	.word	0x200001e8

08000c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	0002      	movs	r2, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c5a:	1dfb      	adds	r3, r7, #7
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8000c60:	d828      	bhi.n	8000cb4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c62:	4a2f      	ldr	r2, [pc, #188]	; (8000d20 <__NVIC_SetPriority+0xd4>)
 8000c64:	1dfb      	adds	r3, r7, #7
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	b25b      	sxtb	r3, r3
 8000c6a:	089b      	lsrs	r3, r3, #2
 8000c6c:	33c0      	adds	r3, #192	; 0xc0
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	589b      	ldr	r3, [r3, r2]
 8000c72:	1dfa      	adds	r2, r7, #7
 8000c74:	7812      	ldrb	r2, [r2, #0]
 8000c76:	0011      	movs	r1, r2
 8000c78:	2203      	movs	r2, #3
 8000c7a:	400a      	ands	r2, r1
 8000c7c:	00d2      	lsls	r2, r2, #3
 8000c7e:	21ff      	movs	r1, #255	; 0xff
 8000c80:	4091      	lsls	r1, r2
 8000c82:	000a      	movs	r2, r1
 8000c84:	43d2      	mvns	r2, r2
 8000c86:	401a      	ands	r2, r3
 8000c88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	019b      	lsls	r3, r3, #6
 8000c8e:	22ff      	movs	r2, #255	; 0xff
 8000c90:	401a      	ands	r2, r3
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	0018      	movs	r0, r3
 8000c98:	2303      	movs	r3, #3
 8000c9a:	4003      	ands	r3, r0
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ca0:	481f      	ldr	r0, [pc, #124]	; (8000d20 <__NVIC_SetPriority+0xd4>)
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	b25b      	sxtb	r3, r3
 8000ca8:	089b      	lsrs	r3, r3, #2
 8000caa:	430a      	orrs	r2, r1
 8000cac:	33c0      	adds	r3, #192	; 0xc0
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cb2:	e031      	b.n	8000d18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	; (8000d24 <__NVIC_SetPriority+0xd8>)
 8000cb6:	1dfb      	adds	r3, r7, #7
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	0019      	movs	r1, r3
 8000cbc:	230f      	movs	r3, #15
 8000cbe:	400b      	ands	r3, r1
 8000cc0:	3b08      	subs	r3, #8
 8000cc2:	089b      	lsrs	r3, r3, #2
 8000cc4:	3306      	adds	r3, #6
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	18d3      	adds	r3, r2, r3
 8000cca:	3304      	adds	r3, #4
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	1dfa      	adds	r2, r7, #7
 8000cd0:	7812      	ldrb	r2, [r2, #0]
 8000cd2:	0011      	movs	r1, r2
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	400a      	ands	r2, r1
 8000cd8:	00d2      	lsls	r2, r2, #3
 8000cda:	21ff      	movs	r1, #255	; 0xff
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	000a      	movs	r2, r1
 8000ce0:	43d2      	mvns	r2, r2
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	019b      	lsls	r3, r3, #6
 8000cea:	22ff      	movs	r2, #255	; 0xff
 8000cec:	401a      	ands	r2, r3
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	4003      	ands	r3, r0
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cfc:	4809      	ldr	r0, [pc, #36]	; (8000d24 <__NVIC_SetPriority+0xd8>)
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	001c      	movs	r4, r3
 8000d04:	230f      	movs	r3, #15
 8000d06:	4023      	ands	r3, r4
 8000d08:	3b08      	subs	r3, #8
 8000d0a:	089b      	lsrs	r3, r3, #2
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	3306      	adds	r3, #6
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	18c3      	adds	r3, r0, r3
 8000d14:	3304      	adds	r3, #4
 8000d16:	601a      	str	r2, [r3, #0]
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b003      	add	sp, #12
 8000d1e:	bd90      	pop	{r4, r7, pc}
 8000d20:	e000e100 	.word	0xe000e100
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	1e5a      	subs	r2, r3, #1
 8000d34:	2380      	movs	r3, #128	; 0x80
 8000d36:	045b      	lsls	r3, r3, #17
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d301      	bcc.n	8000d40 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e010      	b.n	8000d62 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d40:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <SysTick_Config+0x44>)
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	3a01      	subs	r2, #1
 8000d46:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d48:	2301      	movs	r3, #1
 8000d4a:	425b      	negs	r3, r3
 8000d4c:	2103      	movs	r1, #3
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f7ff ff7c 	bl	8000c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <SysTick_Config+0x44>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <SysTick_Config+0x44>)
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	0018      	movs	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b002      	add	sp, #8
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	e000e010 	.word	0xe000e010

08000d70 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	210f      	movs	r1, #15
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	1c02      	adds	r2, r0, #0
 8000d80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	0011      	movs	r1, r2
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f7ff ff5d 	bl	8000c4c <__NVIC_SetPriority>
}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b004      	add	sp, #16
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	0018      	movs	r0, r3
 8000da6:	f7ff ffbf 	bl	8000d28 <SysTick_Config>
 8000daa:	0003      	movs	r3, r0
}
 8000dac:	0018      	movs	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	b002      	add	sp, #8
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc2:	e14f      	b.n	8001064 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2101      	movs	r1, #1
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	4091      	lsls	r1, r2
 8000dce:	000a      	movs	r2, r1
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d100      	bne.n	8000ddc <HAL_GPIO_Init+0x28>
 8000dda:	e140      	b.n	800105e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2203      	movs	r2, #3
 8000de2:	4013      	ands	r3, r2
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d005      	beq.n	8000df4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2203      	movs	r2, #3
 8000dee:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d130      	bne.n	8000e56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	409a      	lsls	r2, r3
 8000e02:	0013      	movs	r3, r2
 8000e04:	43da      	mvns	r2, r3
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	68da      	ldr	r2, [r3, #12]
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	409a      	lsls	r2, r3
 8000e16:	0013      	movs	r3, r2
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	0013      	movs	r3, r2
 8000e32:	43da      	mvns	r2, r3
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	091b      	lsrs	r3, r3, #4
 8000e40:	2201      	movs	r2, #1
 8000e42:	401a      	ands	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	409a      	lsls	r2, r3
 8000e48:	0013      	movs	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	d017      	beq.n	8000e92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	409a      	lsls	r2, r3
 8000e70:	0013      	movs	r3, r2
 8000e72:	43da      	mvns	r2, r3
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	409a      	lsls	r2, r3
 8000e84:	0013      	movs	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2203      	movs	r2, #3
 8000e98:	4013      	ands	r3, r2
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d123      	bne.n	8000ee6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	08da      	lsrs	r2, r3, #3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3208      	adds	r2, #8
 8000ea6:	0092      	lsls	r2, r2, #2
 8000ea8:	58d3      	ldr	r3, [r2, r3]
 8000eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	2207      	movs	r2, #7
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	0013      	movs	r3, r2
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	691a      	ldr	r2, [r3, #16]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	2107      	movs	r1, #7
 8000eca:	400b      	ands	r3, r1
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	409a      	lsls	r2, r3
 8000ed0:	0013      	movs	r3, r2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	08da      	lsrs	r2, r3, #3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3208      	adds	r2, #8
 8000ee0:	0092      	lsls	r2, r2, #2
 8000ee2:	6939      	ldr	r1, [r7, #16]
 8000ee4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	409a      	lsls	r2, r3
 8000ef4:	0013      	movs	r3, r2
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2203      	movs	r2, #3
 8000f04:	401a      	ands	r2, r3
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	409a      	lsls	r2, r3
 8000f0c:	0013      	movs	r3, r2
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	23c0      	movs	r3, #192	; 0xc0
 8000f20:	029b      	lsls	r3, r3, #10
 8000f22:	4013      	ands	r3, r2
 8000f24:	d100      	bne.n	8000f28 <HAL_GPIO_Init+0x174>
 8000f26:	e09a      	b.n	800105e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f28:	4b54      	ldr	r3, [pc, #336]	; (800107c <HAL_GPIO_Init+0x2c8>)
 8000f2a:	699a      	ldr	r2, [r3, #24]
 8000f2c:	4b53      	ldr	r3, [pc, #332]	; (800107c <HAL_GPIO_Init+0x2c8>)
 8000f2e:	2101      	movs	r1, #1
 8000f30:	430a      	orrs	r2, r1
 8000f32:	619a      	str	r2, [r3, #24]
 8000f34:	4b51      	ldr	r3, [pc, #324]	; (800107c <HAL_GPIO_Init+0x2c8>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f40:	4a4f      	ldr	r2, [pc, #316]	; (8001080 <HAL_GPIO_Init+0x2cc>)
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	089b      	lsrs	r3, r3, #2
 8000f46:	3302      	adds	r3, #2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	589b      	ldr	r3, [r3, r2]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	2203      	movs	r2, #3
 8000f52:	4013      	ands	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	220f      	movs	r2, #15
 8000f58:	409a      	lsls	r2, r3
 8000f5a:	0013      	movs	r3, r2
 8000f5c:	43da      	mvns	r2, r3
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	2390      	movs	r3, #144	; 0x90
 8000f68:	05db      	lsls	r3, r3, #23
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d013      	beq.n	8000f96 <HAL_GPIO_Init+0x1e2>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a44      	ldr	r2, [pc, #272]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d00d      	beq.n	8000f92 <HAL_GPIO_Init+0x1de>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a43      	ldr	r2, [pc, #268]	; (8001088 <HAL_GPIO_Init+0x2d4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d007      	beq.n	8000f8e <HAL_GPIO_Init+0x1da>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a42      	ldr	r2, [pc, #264]	; (800108c <HAL_GPIO_Init+0x2d8>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d101      	bne.n	8000f8a <HAL_GPIO_Init+0x1d6>
 8000f86:	2303      	movs	r3, #3
 8000f88:	e006      	b.n	8000f98 <HAL_GPIO_Init+0x1e4>
 8000f8a:	2305      	movs	r3, #5
 8000f8c:	e004      	b.n	8000f98 <HAL_GPIO_Init+0x1e4>
 8000f8e:	2302      	movs	r3, #2
 8000f90:	e002      	b.n	8000f98 <HAL_GPIO_Init+0x1e4>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <HAL_GPIO_Init+0x1e4>
 8000f96:	2300      	movs	r3, #0
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	2103      	movs	r1, #3
 8000f9c:	400a      	ands	r2, r1
 8000f9e:	0092      	lsls	r2, r2, #2
 8000fa0:	4093      	lsls	r3, r2
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fa8:	4935      	ldr	r1, [pc, #212]	; (8001080 <HAL_GPIO_Init+0x2cc>)
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	3302      	adds	r3, #2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fb6:	4b36      	ldr	r3, [pc, #216]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	035b      	lsls	r3, r3, #13
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fda:	4b2d      	ldr	r3, [pc, #180]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000fe0:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	43da      	mvns	r2, r3
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685a      	ldr	r2, [r3, #4]
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	039b      	lsls	r3, r3, #14
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001004:	4b22      	ldr	r3, [pc, #136]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	43da      	mvns	r2, r3
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	2380      	movs	r3, #128	; 0x80
 8001020:	029b      	lsls	r3, r3, #10
 8001022:	4013      	ands	r3, r2
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	43da      	mvns	r2, r3
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	2380      	movs	r3, #128	; 0x80
 800104a:	025b      	lsls	r3, r3, #9
 800104c:	4013      	ands	r3, r2
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	40da      	lsrs	r2, r3
 800106c:	1e13      	subs	r3, r2, #0
 800106e:	d000      	beq.n	8001072 <HAL_GPIO_Init+0x2be>
 8001070:	e6a8      	b.n	8000dc4 <HAL_GPIO_Init+0x10>
  } 
}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	46c0      	nop			; (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	b006      	add	sp, #24
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40021000 	.word	0x40021000
 8001080:	40010000 	.word	0x40010000
 8001084:	48000400 	.word	0x48000400
 8001088:	48000800 	.word	0x48000800
 800108c:	48000c00 	.word	0x48000c00
 8001090:	40010400 	.word	0x40010400

08001094 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80010a2:	e0b1      	b.n	8001208 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80010a4:	2201      	movs	r2, #1
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	409a      	lsls	r2, r3
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d100      	bne.n	80010b8 <HAL_GPIO_DeInit+0x24>
 80010b6:	e0a4      	b.n	8001202 <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80010b8:	4a59      	ldr	r2, [pc, #356]	; (8001220 <HAL_GPIO_DeInit+0x18c>)
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	089b      	lsrs	r3, r3, #2
 80010be:	3302      	adds	r3, #2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	589b      	ldr	r3, [r3, r2]
 80010c4:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	2203      	movs	r2, #3
 80010ca:	4013      	ands	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	220f      	movs	r2, #15
 80010d0:	409a      	lsls	r2, r3
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4013      	ands	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	2390      	movs	r3, #144	; 0x90
 80010dc:	05db      	lsls	r3, r3, #23
 80010de:	429a      	cmp	r2, r3
 80010e0:	d013      	beq.n	800110a <HAL_GPIO_DeInit+0x76>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4f      	ldr	r2, [pc, #316]	; (8001224 <HAL_GPIO_DeInit+0x190>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d00d      	beq.n	8001106 <HAL_GPIO_DeInit+0x72>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4e      	ldr	r2, [pc, #312]	; (8001228 <HAL_GPIO_DeInit+0x194>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d007      	beq.n	8001102 <HAL_GPIO_DeInit+0x6e>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4d      	ldr	r2, [pc, #308]	; (800122c <HAL_GPIO_DeInit+0x198>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d101      	bne.n	80010fe <HAL_GPIO_DeInit+0x6a>
 80010fa:	2303      	movs	r3, #3
 80010fc:	e006      	b.n	800110c <HAL_GPIO_DeInit+0x78>
 80010fe:	2305      	movs	r3, #5
 8001100:	e004      	b.n	800110c <HAL_GPIO_DeInit+0x78>
 8001102:	2302      	movs	r3, #2
 8001104:	e002      	b.n	800110c <HAL_GPIO_DeInit+0x78>
 8001106:	2301      	movs	r3, #1
 8001108:	e000      	b.n	800110c <HAL_GPIO_DeInit+0x78>
 800110a:	2300      	movs	r3, #0
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	2103      	movs	r1, #3
 8001110:	400a      	ands	r2, r1
 8001112:	0092      	lsls	r2, r2, #2
 8001114:	4093      	lsls	r3, r2
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	429a      	cmp	r2, r3
 800111a:	d132      	bne.n	8001182 <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800111c:	4b44      	ldr	r3, [pc, #272]	; (8001230 <HAL_GPIO_DeInit+0x19c>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	43d9      	mvns	r1, r3
 8001124:	4b42      	ldr	r3, [pc, #264]	; (8001230 <HAL_GPIO_DeInit+0x19c>)
 8001126:	400a      	ands	r2, r1
 8001128:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800112a:	4b41      	ldr	r3, [pc, #260]	; (8001230 <HAL_GPIO_DeInit+0x19c>)
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	43d9      	mvns	r1, r3
 8001132:	4b3f      	ldr	r3, [pc, #252]	; (8001230 <HAL_GPIO_DeInit+0x19c>)
 8001134:	400a      	ands	r2, r1
 8001136:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001138:	4b3d      	ldr	r3, [pc, #244]	; (8001230 <HAL_GPIO_DeInit+0x19c>)
 800113a:	68da      	ldr	r2, [r3, #12]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	43d9      	mvns	r1, r3
 8001140:	4b3b      	ldr	r3, [pc, #236]	; (8001230 <HAL_GPIO_DeInit+0x19c>)
 8001142:	400a      	ands	r2, r1
 8001144:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001146:	4b3a      	ldr	r3, [pc, #232]	; (8001230 <HAL_GPIO_DeInit+0x19c>)
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	43d9      	mvns	r1, r3
 800114e:	4b38      	ldr	r3, [pc, #224]	; (8001230 <HAL_GPIO_DeInit+0x19c>)
 8001150:	400a      	ands	r2, r1
 8001152:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	2203      	movs	r2, #3
 8001158:	4013      	ands	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	220f      	movs	r2, #15
 800115e:	409a      	lsls	r2, r3
 8001160:	0013      	movs	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001164:	4a2e      	ldr	r2, [pc, #184]	; (8001220 <HAL_GPIO_DeInit+0x18c>)
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	089b      	lsrs	r3, r3, #2
 800116a:	3302      	adds	r3, #2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	589a      	ldr	r2, [r3, r2]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	43d9      	mvns	r1, r3
 8001174:	482a      	ldr	r0, [pc, #168]	; (8001220 <HAL_GPIO_DeInit+0x18c>)
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	089b      	lsrs	r3, r3, #2
 800117a:	400a      	ands	r2, r1
 800117c:	3302      	adds	r3, #2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	0052      	lsls	r2, r2, #1
 800118a:	2103      	movs	r1, #3
 800118c:	4091      	lsls	r1, r2
 800118e:	000a      	movs	r2, r1
 8001190:	43d2      	mvns	r2, r2
 8001192:	401a      	ands	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	08da      	lsrs	r2, r3, #3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3208      	adds	r2, #8
 80011a0:	0092      	lsls	r2, r2, #2
 80011a2:	58d3      	ldr	r3, [r2, r3]
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	2107      	movs	r1, #7
 80011a8:	400a      	ands	r2, r1
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	210f      	movs	r1, #15
 80011ae:	4091      	lsls	r1, r2
 80011b0:	000a      	movs	r2, r1
 80011b2:	43d1      	mvns	r1, r2
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	08d2      	lsrs	r2, r2, #3
 80011b8:	4019      	ands	r1, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3208      	adds	r2, #8
 80011be:	0092      	lsls	r2, r2, #2
 80011c0:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	0052      	lsls	r2, r2, #1
 80011ca:	2103      	movs	r1, #3
 80011cc:	4091      	lsls	r1, r2
 80011ce:	000a      	movs	r2, r1
 80011d0:	43d2      	mvns	r2, r2
 80011d2:	401a      	ands	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2101      	movs	r1, #1
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	4091      	lsls	r1, r2
 80011e2:	000a      	movs	r2, r1
 80011e4:	43d2      	mvns	r2, r2
 80011e6:	401a      	ands	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	0052      	lsls	r2, r2, #1
 80011f4:	2103      	movs	r1, #3
 80011f6:	4091      	lsls	r1, r2
 80011f8:	000a      	movs	r2, r1
 80011fa:	43d2      	mvns	r2, r2
 80011fc:	401a      	ands	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	609a      	str	r2, [r3, #8]

    }

    position++;
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	3301      	adds	r3, #1
 8001206:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	40da      	lsrs	r2, r3
 800120e:	1e13      	subs	r3, r2, #0
 8001210:	d000      	beq.n	8001214 <HAL_GPIO_DeInit+0x180>
 8001212:	e747      	b.n	80010a4 <HAL_GPIO_DeInit+0x10>
  }
}
 8001214:	46c0      	nop			; (mov r8, r8)
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	46bd      	mov	sp, r7
 800121a:	b006      	add	sp, #24
 800121c:	bd80      	pop	{r7, pc}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	40010000 	.word	0x40010000
 8001224:	48000400 	.word	0x48000400
 8001228:	48000800 	.word	0x48000800
 800122c:	48000c00 	.word	0x48000c00
 8001230:	40010400 	.word	0x40010400

08001234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	0008      	movs	r0, r1
 800123e:	0011      	movs	r1, r2
 8001240:	1cbb      	adds	r3, r7, #2
 8001242:	1c02      	adds	r2, r0, #0
 8001244:	801a      	strh	r2, [r3, #0]
 8001246:	1c7b      	adds	r3, r7, #1
 8001248:	1c0a      	adds	r2, r1, #0
 800124a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800124c:	1c7b      	adds	r3, r7, #1
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d004      	beq.n	800125e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001254:	1cbb      	adds	r3, r7, #2
 8001256:	881a      	ldrh	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800125c:	e003      	b.n	8001266 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800125e:	1cbb      	adds	r3, r7, #2
 8001260:	881a      	ldrh	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e301      	b.n	8001886 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2201      	movs	r2, #1
 8001288:	4013      	ands	r3, r2
 800128a:	d100      	bne.n	800128e <HAL_RCC_OscConfig+0x1e>
 800128c:	e08d      	b.n	80013aa <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800128e:	4bc3      	ldr	r3, [pc, #780]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	220c      	movs	r2, #12
 8001294:	4013      	ands	r3, r2
 8001296:	2b04      	cmp	r3, #4
 8001298:	d00e      	beq.n	80012b8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800129a:	4bc0      	ldr	r3, [pc, #768]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	220c      	movs	r2, #12
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b08      	cmp	r3, #8
 80012a4:	d116      	bne.n	80012d4 <HAL_RCC_OscConfig+0x64>
 80012a6:	4bbd      	ldr	r3, [pc, #756]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	2380      	movs	r3, #128	; 0x80
 80012ac:	025b      	lsls	r3, r3, #9
 80012ae:	401a      	ands	r2, r3
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	025b      	lsls	r3, r3, #9
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d10d      	bne.n	80012d4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b8:	4bb8      	ldr	r3, [pc, #736]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	029b      	lsls	r3, r3, #10
 80012c0:	4013      	ands	r3, r2
 80012c2:	d100      	bne.n	80012c6 <HAL_RCC_OscConfig+0x56>
 80012c4:	e070      	b.n	80013a8 <HAL_RCC_OscConfig+0x138>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d000      	beq.n	80012d0 <HAL_RCC_OscConfig+0x60>
 80012ce:	e06b      	b.n	80013a8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e2d8      	b.n	8001886 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d107      	bne.n	80012ec <HAL_RCC_OscConfig+0x7c>
 80012dc:	4baf      	ldr	r3, [pc, #700]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4bae      	ldr	r3, [pc, #696]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	0249      	lsls	r1, r1, #9
 80012e6:	430a      	orrs	r2, r1
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	e02f      	b.n	800134c <HAL_RCC_OscConfig+0xdc>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d10c      	bne.n	800130e <HAL_RCC_OscConfig+0x9e>
 80012f4:	4ba9      	ldr	r3, [pc, #676]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4ba8      	ldr	r3, [pc, #672]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80012fa:	49a9      	ldr	r1, [pc, #676]	; (80015a0 <HAL_RCC_OscConfig+0x330>)
 80012fc:	400a      	ands	r2, r1
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	4ba6      	ldr	r3, [pc, #664]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4ba5      	ldr	r3, [pc, #660]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001306:	49a7      	ldr	r1, [pc, #668]	; (80015a4 <HAL_RCC_OscConfig+0x334>)
 8001308:	400a      	ands	r2, r1
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	e01e      	b.n	800134c <HAL_RCC_OscConfig+0xdc>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b05      	cmp	r3, #5
 8001314:	d10e      	bne.n	8001334 <HAL_RCC_OscConfig+0xc4>
 8001316:	4ba1      	ldr	r3, [pc, #644]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	4ba0      	ldr	r3, [pc, #640]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 800131c:	2180      	movs	r1, #128	; 0x80
 800131e:	02c9      	lsls	r1, r1, #11
 8001320:	430a      	orrs	r2, r1
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	4b9d      	ldr	r3, [pc, #628]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b9c      	ldr	r3, [pc, #624]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 800132a:	2180      	movs	r1, #128	; 0x80
 800132c:	0249      	lsls	r1, r1, #9
 800132e:	430a      	orrs	r2, r1
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	e00b      	b.n	800134c <HAL_RCC_OscConfig+0xdc>
 8001334:	4b99      	ldr	r3, [pc, #612]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b98      	ldr	r3, [pc, #608]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 800133a:	4999      	ldr	r1, [pc, #612]	; (80015a0 <HAL_RCC_OscConfig+0x330>)
 800133c:	400a      	ands	r2, r1
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	4b96      	ldr	r3, [pc, #600]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b95      	ldr	r3, [pc, #596]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001346:	4997      	ldr	r1, [pc, #604]	; (80015a4 <HAL_RCC_OscConfig+0x334>)
 8001348:	400a      	ands	r2, r1
 800134a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d014      	beq.n	800137e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001354:	f7ff fc70 	bl	8000c38 <HAL_GetTick>
 8001358:	0003      	movs	r3, r0
 800135a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800135e:	f7ff fc6b 	bl	8000c38 <HAL_GetTick>
 8001362:	0002      	movs	r2, r0
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b64      	cmp	r3, #100	; 0x64
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e28a      	b.n	8001886 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001370:	4b8a      	ldr	r3, [pc, #552]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	029b      	lsls	r3, r3, #10
 8001378:	4013      	ands	r3, r2
 800137a:	d0f0      	beq.n	800135e <HAL_RCC_OscConfig+0xee>
 800137c:	e015      	b.n	80013aa <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137e:	f7ff fc5b 	bl	8000c38 <HAL_GetTick>
 8001382:	0003      	movs	r3, r0
 8001384:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001388:	f7ff fc56 	bl	8000c38 <HAL_GetTick>
 800138c:	0002      	movs	r2, r0
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b64      	cmp	r3, #100	; 0x64
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e275      	b.n	8001886 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139a:	4b80      	ldr	r3, [pc, #512]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	029b      	lsls	r3, r3, #10
 80013a2:	4013      	ands	r3, r2
 80013a4:	d1f0      	bne.n	8001388 <HAL_RCC_OscConfig+0x118>
 80013a6:	e000      	b.n	80013aa <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2202      	movs	r2, #2
 80013b0:	4013      	ands	r3, r2
 80013b2:	d100      	bne.n	80013b6 <HAL_RCC_OscConfig+0x146>
 80013b4:	e069      	b.n	800148a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013b6:	4b79      	ldr	r3, [pc, #484]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	220c      	movs	r2, #12
 80013bc:	4013      	ands	r3, r2
 80013be:	d00b      	beq.n	80013d8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013c0:	4b76      	ldr	r3, [pc, #472]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	220c      	movs	r2, #12
 80013c6:	4013      	ands	r3, r2
 80013c8:	2b08      	cmp	r3, #8
 80013ca:	d11c      	bne.n	8001406 <HAL_RCC_OscConfig+0x196>
 80013cc:	4b73      	ldr	r3, [pc, #460]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	025b      	lsls	r3, r3, #9
 80013d4:	4013      	ands	r3, r2
 80013d6:	d116      	bne.n	8001406 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d8:	4b70      	ldr	r3, [pc, #448]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2202      	movs	r2, #2
 80013de:	4013      	ands	r3, r2
 80013e0:	d005      	beq.n	80013ee <HAL_RCC_OscConfig+0x17e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d001      	beq.n	80013ee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e24b      	b.n	8001886 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ee:	4b6b      	ldr	r3, [pc, #428]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	22f8      	movs	r2, #248	; 0xf8
 80013f4:	4393      	bics	r3, r2
 80013f6:	0019      	movs	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	00da      	lsls	r2, r3, #3
 80013fe:	4b67      	ldr	r3, [pc, #412]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001400:	430a      	orrs	r2, r1
 8001402:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001404:	e041      	b.n	800148a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d024      	beq.n	8001458 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800140e:	4b63      	ldr	r3, [pc, #396]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	4b62      	ldr	r3, [pc, #392]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001414:	2101      	movs	r1, #1
 8001416:	430a      	orrs	r2, r1
 8001418:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141a:	f7ff fc0d 	bl	8000c38 <HAL_GetTick>
 800141e:	0003      	movs	r3, r0
 8001420:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001424:	f7ff fc08 	bl	8000c38 <HAL_GetTick>
 8001428:	0002      	movs	r2, r0
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e227      	b.n	8001886 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001436:	4b59      	ldr	r3, [pc, #356]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2202      	movs	r2, #2
 800143c:	4013      	ands	r3, r2
 800143e:	d0f1      	beq.n	8001424 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001440:	4b56      	ldr	r3, [pc, #344]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	22f8      	movs	r2, #248	; 0xf8
 8001446:	4393      	bics	r3, r2
 8001448:	0019      	movs	r1, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	00da      	lsls	r2, r3, #3
 8001450:	4b52      	ldr	r3, [pc, #328]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001452:	430a      	orrs	r2, r1
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	e018      	b.n	800148a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001458:	4b50      	ldr	r3, [pc, #320]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b4f      	ldr	r3, [pc, #316]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 800145e:	2101      	movs	r1, #1
 8001460:	438a      	bics	r2, r1
 8001462:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff fbe8 	bl	8000c38 <HAL_GetTick>
 8001468:	0003      	movs	r3, r0
 800146a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800146e:	f7ff fbe3 	bl	8000c38 <HAL_GetTick>
 8001472:	0002      	movs	r2, r0
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e202      	b.n	8001886 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001480:	4b46      	ldr	r3, [pc, #280]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2202      	movs	r2, #2
 8001486:	4013      	ands	r3, r2
 8001488:	d1f1      	bne.n	800146e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2208      	movs	r2, #8
 8001490:	4013      	ands	r3, r2
 8001492:	d036      	beq.n	8001502 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d019      	beq.n	80014d0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149c:	4b3f      	ldr	r3, [pc, #252]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 800149e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014a0:	4b3e      	ldr	r3, [pc, #248]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80014a2:	2101      	movs	r1, #1
 80014a4:	430a      	orrs	r2, r1
 80014a6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a8:	f7ff fbc6 	bl	8000c38 <HAL_GetTick>
 80014ac:	0003      	movs	r3, r0
 80014ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b2:	f7ff fbc1 	bl	8000c38 <HAL_GetTick>
 80014b6:	0002      	movs	r2, r0
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e1e0      	b.n	8001886 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c4:	4b35      	ldr	r3, [pc, #212]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80014c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c8:	2202      	movs	r2, #2
 80014ca:	4013      	ands	r3, r2
 80014cc:	d0f1      	beq.n	80014b2 <HAL_RCC_OscConfig+0x242>
 80014ce:	e018      	b.n	8001502 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d0:	4b32      	ldr	r3, [pc, #200]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80014d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014d4:	4b31      	ldr	r3, [pc, #196]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80014d6:	2101      	movs	r1, #1
 80014d8:	438a      	bics	r2, r1
 80014da:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014dc:	f7ff fbac 	bl	8000c38 <HAL_GetTick>
 80014e0:	0003      	movs	r3, r0
 80014e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e6:	f7ff fba7 	bl	8000c38 <HAL_GetTick>
 80014ea:	0002      	movs	r2, r0
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e1c6      	b.n	8001886 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f8:	4b28      	ldr	r3, [pc, #160]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	2202      	movs	r2, #2
 80014fe:	4013      	ands	r3, r2
 8001500:	d1f1      	bne.n	80014e6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2204      	movs	r2, #4
 8001508:	4013      	ands	r3, r2
 800150a:	d100      	bne.n	800150e <HAL_RCC_OscConfig+0x29e>
 800150c:	e0b4      	b.n	8001678 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800150e:	201f      	movs	r0, #31
 8001510:	183b      	adds	r3, r7, r0
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001516:	4b21      	ldr	r3, [pc, #132]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001518:	69da      	ldr	r2, [r3, #28]
 800151a:	2380      	movs	r3, #128	; 0x80
 800151c:	055b      	lsls	r3, r3, #21
 800151e:	4013      	ands	r3, r2
 8001520:	d110      	bne.n	8001544 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	4b1e      	ldr	r3, [pc, #120]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001524:	69da      	ldr	r2, [r3, #28]
 8001526:	4b1d      	ldr	r3, [pc, #116]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001528:	2180      	movs	r1, #128	; 0x80
 800152a:	0549      	lsls	r1, r1, #21
 800152c:	430a      	orrs	r2, r1
 800152e:	61da      	str	r2, [r3, #28]
 8001530:	4b1a      	ldr	r3, [pc, #104]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001532:	69da      	ldr	r2, [r3, #28]
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	055b      	lsls	r3, r3, #21
 8001538:	4013      	ands	r3, r2
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800153e:	183b      	adds	r3, r7, r0
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001544:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <HAL_RCC_OscConfig+0x338>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4013      	ands	r3, r2
 800154e:	d11a      	bne.n	8001586 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001550:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <HAL_RCC_OscConfig+0x338>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <HAL_RCC_OscConfig+0x338>)
 8001556:	2180      	movs	r1, #128	; 0x80
 8001558:	0049      	lsls	r1, r1, #1
 800155a:	430a      	orrs	r2, r1
 800155c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800155e:	f7ff fb6b 	bl	8000c38 <HAL_GetTick>
 8001562:	0003      	movs	r3, r0
 8001564:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001568:	f7ff fb66 	bl	8000c38 <HAL_GetTick>
 800156c:	0002      	movs	r2, r0
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b64      	cmp	r3, #100	; 0x64
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e185      	b.n	8001886 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_RCC_OscConfig+0x338>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	2380      	movs	r3, #128	; 0x80
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	4013      	ands	r3, r2
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d10e      	bne.n	80015ac <HAL_RCC_OscConfig+0x33c>
 800158e:	4b03      	ldr	r3, [pc, #12]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001590:	6a1a      	ldr	r2, [r3, #32]
 8001592:	4b02      	ldr	r3, [pc, #8]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001594:	2101      	movs	r1, #1
 8001596:	430a      	orrs	r2, r1
 8001598:	621a      	str	r2, [r3, #32]
 800159a:	e035      	b.n	8001608 <HAL_RCC_OscConfig+0x398>
 800159c:	40021000 	.word	0x40021000
 80015a0:	fffeffff 	.word	0xfffeffff
 80015a4:	fffbffff 	.word	0xfffbffff
 80015a8:	40007000 	.word	0x40007000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d10c      	bne.n	80015ce <HAL_RCC_OscConfig+0x35e>
 80015b4:	4bb6      	ldr	r3, [pc, #728]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 80015b6:	6a1a      	ldr	r2, [r3, #32]
 80015b8:	4bb5      	ldr	r3, [pc, #724]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 80015ba:	2101      	movs	r1, #1
 80015bc:	438a      	bics	r2, r1
 80015be:	621a      	str	r2, [r3, #32]
 80015c0:	4bb3      	ldr	r3, [pc, #716]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 80015c2:	6a1a      	ldr	r2, [r3, #32]
 80015c4:	4bb2      	ldr	r3, [pc, #712]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 80015c6:	2104      	movs	r1, #4
 80015c8:	438a      	bics	r2, r1
 80015ca:	621a      	str	r2, [r3, #32]
 80015cc:	e01c      	b.n	8001608 <HAL_RCC_OscConfig+0x398>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b05      	cmp	r3, #5
 80015d4:	d10c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x380>
 80015d6:	4bae      	ldr	r3, [pc, #696]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 80015d8:	6a1a      	ldr	r2, [r3, #32]
 80015da:	4bad      	ldr	r3, [pc, #692]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 80015dc:	2104      	movs	r1, #4
 80015de:	430a      	orrs	r2, r1
 80015e0:	621a      	str	r2, [r3, #32]
 80015e2:	4bab      	ldr	r3, [pc, #684]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 80015e4:	6a1a      	ldr	r2, [r3, #32]
 80015e6:	4baa      	ldr	r3, [pc, #680]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 80015e8:	2101      	movs	r1, #1
 80015ea:	430a      	orrs	r2, r1
 80015ec:	621a      	str	r2, [r3, #32]
 80015ee:	e00b      	b.n	8001608 <HAL_RCC_OscConfig+0x398>
 80015f0:	4ba7      	ldr	r3, [pc, #668]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 80015f2:	6a1a      	ldr	r2, [r3, #32]
 80015f4:	4ba6      	ldr	r3, [pc, #664]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 80015f6:	2101      	movs	r1, #1
 80015f8:	438a      	bics	r2, r1
 80015fa:	621a      	str	r2, [r3, #32]
 80015fc:	4ba4      	ldr	r3, [pc, #656]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 80015fe:	6a1a      	ldr	r2, [r3, #32]
 8001600:	4ba3      	ldr	r3, [pc, #652]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 8001602:	2104      	movs	r1, #4
 8001604:	438a      	bics	r2, r1
 8001606:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d014      	beq.n	800163a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001610:	f7ff fb12 	bl	8000c38 <HAL_GetTick>
 8001614:	0003      	movs	r3, r0
 8001616:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001618:	e009      	b.n	800162e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800161a:	f7ff fb0d 	bl	8000c38 <HAL_GetTick>
 800161e:	0002      	movs	r2, r0
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	4a9b      	ldr	r2, [pc, #620]	; (8001894 <HAL_RCC_OscConfig+0x624>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e12b      	b.n	8001886 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162e:	4b98      	ldr	r3, [pc, #608]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	2202      	movs	r2, #2
 8001634:	4013      	ands	r3, r2
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x3aa>
 8001638:	e013      	b.n	8001662 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163a:	f7ff fafd 	bl	8000c38 <HAL_GetTick>
 800163e:	0003      	movs	r3, r0
 8001640:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001642:	e009      	b.n	8001658 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001644:	f7ff faf8 	bl	8000c38 <HAL_GetTick>
 8001648:	0002      	movs	r2, r0
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	4a91      	ldr	r2, [pc, #580]	; (8001894 <HAL_RCC_OscConfig+0x624>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e116      	b.n	8001886 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001658:	4b8d      	ldr	r3, [pc, #564]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	2202      	movs	r2, #2
 800165e:	4013      	ands	r3, r2
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001662:	231f      	movs	r3, #31
 8001664:	18fb      	adds	r3, r7, r3
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d105      	bne.n	8001678 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800166c:	4b88      	ldr	r3, [pc, #544]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 800166e:	69da      	ldr	r2, [r3, #28]
 8001670:	4b87      	ldr	r3, [pc, #540]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 8001672:	4989      	ldr	r1, [pc, #548]	; (8001898 <HAL_RCC_OscConfig+0x628>)
 8001674:	400a      	ands	r2, r1
 8001676:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2210      	movs	r2, #16
 800167e:	4013      	ands	r3, r2
 8001680:	d063      	beq.n	800174a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d12a      	bne.n	80016e0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800168a:	4b81      	ldr	r3, [pc, #516]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 800168c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800168e:	4b80      	ldr	r3, [pc, #512]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 8001690:	2104      	movs	r1, #4
 8001692:	430a      	orrs	r2, r1
 8001694:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001696:	4b7e      	ldr	r3, [pc, #504]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 8001698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800169a:	4b7d      	ldr	r3, [pc, #500]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 800169c:	2101      	movs	r1, #1
 800169e:	430a      	orrs	r2, r1
 80016a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a2:	f7ff fac9 	bl	8000c38 <HAL_GetTick>
 80016a6:	0003      	movs	r3, r0
 80016a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016ac:	f7ff fac4 	bl	8000c38 <HAL_GetTick>
 80016b0:	0002      	movs	r2, r0
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e0e3      	b.n	8001886 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016be:	4b74      	ldr	r3, [pc, #464]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 80016c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c2:	2202      	movs	r2, #2
 80016c4:	4013      	ands	r3, r2
 80016c6:	d0f1      	beq.n	80016ac <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016c8:	4b71      	ldr	r3, [pc, #452]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 80016ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016cc:	22f8      	movs	r2, #248	; 0xf8
 80016ce:	4393      	bics	r3, r2
 80016d0:	0019      	movs	r1, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	00da      	lsls	r2, r3, #3
 80016d8:	4b6d      	ldr	r3, [pc, #436]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 80016da:	430a      	orrs	r2, r1
 80016dc:	635a      	str	r2, [r3, #52]	; 0x34
 80016de:	e034      	b.n	800174a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	3305      	adds	r3, #5
 80016e6:	d111      	bne.n	800170c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80016e8:	4b69      	ldr	r3, [pc, #420]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 80016ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016ec:	4b68      	ldr	r3, [pc, #416]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 80016ee:	2104      	movs	r1, #4
 80016f0:	438a      	bics	r2, r1
 80016f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016f4:	4b66      	ldr	r3, [pc, #408]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 80016f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f8:	22f8      	movs	r2, #248	; 0xf8
 80016fa:	4393      	bics	r3, r2
 80016fc:	0019      	movs	r1, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	00da      	lsls	r2, r3, #3
 8001704:	4b62      	ldr	r3, [pc, #392]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 8001706:	430a      	orrs	r2, r1
 8001708:	635a      	str	r2, [r3, #52]	; 0x34
 800170a:	e01e      	b.n	800174a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800170c:	4b60      	ldr	r3, [pc, #384]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 800170e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001710:	4b5f      	ldr	r3, [pc, #380]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 8001712:	2104      	movs	r1, #4
 8001714:	430a      	orrs	r2, r1
 8001716:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001718:	4b5d      	ldr	r3, [pc, #372]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 800171a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800171c:	4b5c      	ldr	r3, [pc, #368]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 800171e:	2101      	movs	r1, #1
 8001720:	438a      	bics	r2, r1
 8001722:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001724:	f7ff fa88 	bl	8000c38 <HAL_GetTick>
 8001728:	0003      	movs	r3, r0
 800172a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800172e:	f7ff fa83 	bl	8000c38 <HAL_GetTick>
 8001732:	0002      	movs	r2, r0
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e0a2      	b.n	8001886 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001740:	4b53      	ldr	r3, [pc, #332]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 8001742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001744:	2202      	movs	r2, #2
 8001746:	4013      	ands	r3, r2
 8001748:	d1f1      	bne.n	800172e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d100      	bne.n	8001754 <HAL_RCC_OscConfig+0x4e4>
 8001752:	e097      	b.n	8001884 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001754:	4b4e      	ldr	r3, [pc, #312]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	220c      	movs	r2, #12
 800175a:	4013      	ands	r3, r2
 800175c:	2b08      	cmp	r3, #8
 800175e:	d100      	bne.n	8001762 <HAL_RCC_OscConfig+0x4f2>
 8001760:	e06b      	b.n	800183a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d14c      	bne.n	8001804 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176a:	4b49      	ldr	r3, [pc, #292]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b48      	ldr	r3, [pc, #288]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 8001770:	494a      	ldr	r1, [pc, #296]	; (800189c <HAL_RCC_OscConfig+0x62c>)
 8001772:	400a      	ands	r2, r1
 8001774:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001776:	f7ff fa5f 	bl	8000c38 <HAL_GetTick>
 800177a:	0003      	movs	r3, r0
 800177c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001780:	f7ff fa5a 	bl	8000c38 <HAL_GetTick>
 8001784:	0002      	movs	r2, r0
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e079      	b.n	8001886 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001792:	4b3f      	ldr	r3, [pc, #252]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	049b      	lsls	r3, r3, #18
 800179a:	4013      	ands	r3, r2
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800179e:	4b3c      	ldr	r3, [pc, #240]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 80017a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a2:	220f      	movs	r2, #15
 80017a4:	4393      	bics	r3, r2
 80017a6:	0019      	movs	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ac:	4b38      	ldr	r3, [pc, #224]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 80017ae:	430a      	orrs	r2, r1
 80017b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80017b2:	4b37      	ldr	r3, [pc, #220]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	4a3a      	ldr	r2, [pc, #232]	; (80018a0 <HAL_RCC_OscConfig+0x630>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	0019      	movs	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	431a      	orrs	r2, r3
 80017c6:	4b32      	ldr	r3, [pc, #200]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 80017c8:	430a      	orrs	r2, r1
 80017ca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017cc:	4b30      	ldr	r3, [pc, #192]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b2f      	ldr	r3, [pc, #188]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 80017d2:	2180      	movs	r1, #128	; 0x80
 80017d4:	0449      	lsls	r1, r1, #17
 80017d6:	430a      	orrs	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017da:	f7ff fa2d 	bl	8000c38 <HAL_GetTick>
 80017de:	0003      	movs	r3, r0
 80017e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e4:	f7ff fa28 	bl	8000c38 <HAL_GetTick>
 80017e8:	0002      	movs	r2, r0
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e047      	b.n	8001886 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017f6:	4b26      	ldr	r3, [pc, #152]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	049b      	lsls	r3, r3, #18
 80017fe:	4013      	ands	r3, r2
 8001800:	d0f0      	beq.n	80017e4 <HAL_RCC_OscConfig+0x574>
 8001802:	e03f      	b.n	8001884 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001804:	4b22      	ldr	r3, [pc, #136]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4b21      	ldr	r3, [pc, #132]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 800180a:	4924      	ldr	r1, [pc, #144]	; (800189c <HAL_RCC_OscConfig+0x62c>)
 800180c:	400a      	ands	r2, r1
 800180e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7ff fa12 	bl	8000c38 <HAL_GetTick>
 8001814:	0003      	movs	r3, r0
 8001816:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800181a:	f7ff fa0d 	bl	8000c38 <HAL_GetTick>
 800181e:	0002      	movs	r2, r0
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e02c      	b.n	8001886 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800182c:	4b18      	ldr	r3, [pc, #96]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	049b      	lsls	r3, r3, #18
 8001834:	4013      	ands	r3, r2
 8001836:	d1f0      	bne.n	800181a <HAL_RCC_OscConfig+0x5aa>
 8001838:	e024      	b.n	8001884 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d101      	bne.n	8001846 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e01f      	b.n	8001886 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001846:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800184c:	4b10      	ldr	r3, [pc, #64]	; (8001890 <HAL_RCC_OscConfig+0x620>)
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	025b      	lsls	r3, r3, #9
 8001858:	401a      	ands	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	429a      	cmp	r2, r3
 8001860:	d10e      	bne.n	8001880 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	220f      	movs	r2, #15
 8001866:	401a      	ands	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800186c:	429a      	cmp	r2, r3
 800186e:	d107      	bne.n	8001880 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	23f0      	movs	r3, #240	; 0xf0
 8001874:	039b      	lsls	r3, r3, #14
 8001876:	401a      	ands	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	0018      	movs	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	b008      	add	sp, #32
 800188c:	bd80      	pop	{r7, pc}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	40021000 	.word	0x40021000
 8001894:	00001388 	.word	0x00001388
 8001898:	efffffff 	.word	0xefffffff
 800189c:	feffffff 	.word	0xfeffffff
 80018a0:	ffc2ffff 	.word	0xffc2ffff

080018a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0b3      	b.n	8001a20 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018b8:	4b5b      	ldr	r3, [pc, #364]	; (8001a28 <HAL_RCC_ClockConfig+0x184>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2201      	movs	r2, #1
 80018be:	4013      	ands	r3, r2
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d911      	bls.n	80018ea <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b58      	ldr	r3, [pc, #352]	; (8001a28 <HAL_RCC_ClockConfig+0x184>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2201      	movs	r2, #1
 80018cc:	4393      	bics	r3, r2
 80018ce:	0019      	movs	r1, r3
 80018d0:	4b55      	ldr	r3, [pc, #340]	; (8001a28 <HAL_RCC_ClockConfig+0x184>)
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d8:	4b53      	ldr	r3, [pc, #332]	; (8001a28 <HAL_RCC_ClockConfig+0x184>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2201      	movs	r2, #1
 80018de:	4013      	ands	r3, r2
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d001      	beq.n	80018ea <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e09a      	b.n	8001a20 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2202      	movs	r2, #2
 80018f0:	4013      	ands	r3, r2
 80018f2:	d015      	beq.n	8001920 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2204      	movs	r2, #4
 80018fa:	4013      	ands	r3, r2
 80018fc:	d006      	beq.n	800190c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018fe:	4b4b      	ldr	r3, [pc, #300]	; (8001a2c <HAL_RCC_ClockConfig+0x188>)
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	4b4a      	ldr	r3, [pc, #296]	; (8001a2c <HAL_RCC_ClockConfig+0x188>)
 8001904:	21e0      	movs	r1, #224	; 0xe0
 8001906:	00c9      	lsls	r1, r1, #3
 8001908:	430a      	orrs	r2, r1
 800190a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800190c:	4b47      	ldr	r3, [pc, #284]	; (8001a2c <HAL_RCC_ClockConfig+0x188>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	22f0      	movs	r2, #240	; 0xf0
 8001912:	4393      	bics	r3, r2
 8001914:	0019      	movs	r1, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	4b44      	ldr	r3, [pc, #272]	; (8001a2c <HAL_RCC_ClockConfig+0x188>)
 800191c:	430a      	orrs	r2, r1
 800191e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2201      	movs	r2, #1
 8001926:	4013      	ands	r3, r2
 8001928:	d040      	beq.n	80019ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d107      	bne.n	8001942 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001932:	4b3e      	ldr	r3, [pc, #248]	; (8001a2c <HAL_RCC_ClockConfig+0x188>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	029b      	lsls	r3, r3, #10
 800193a:	4013      	ands	r3, r2
 800193c:	d114      	bne.n	8001968 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e06e      	b.n	8001a20 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d107      	bne.n	800195a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194a:	4b38      	ldr	r3, [pc, #224]	; (8001a2c <HAL_RCC_ClockConfig+0x188>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	2380      	movs	r3, #128	; 0x80
 8001950:	049b      	lsls	r3, r3, #18
 8001952:	4013      	ands	r3, r2
 8001954:	d108      	bne.n	8001968 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e062      	b.n	8001a20 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195a:	4b34      	ldr	r3, [pc, #208]	; (8001a2c <HAL_RCC_ClockConfig+0x188>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2202      	movs	r2, #2
 8001960:	4013      	ands	r3, r2
 8001962:	d101      	bne.n	8001968 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e05b      	b.n	8001a20 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001968:	4b30      	ldr	r3, [pc, #192]	; (8001a2c <HAL_RCC_ClockConfig+0x188>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2203      	movs	r2, #3
 800196e:	4393      	bics	r3, r2
 8001970:	0019      	movs	r1, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <HAL_RCC_ClockConfig+0x188>)
 8001978:	430a      	orrs	r2, r1
 800197a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800197c:	f7ff f95c 	bl	8000c38 <HAL_GetTick>
 8001980:	0003      	movs	r3, r0
 8001982:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001984:	e009      	b.n	800199a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001986:	f7ff f957 	bl	8000c38 <HAL_GetTick>
 800198a:	0002      	movs	r2, r0
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	4a27      	ldr	r2, [pc, #156]	; (8001a30 <HAL_RCC_ClockConfig+0x18c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d901      	bls.n	800199a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e042      	b.n	8001a20 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199a:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <HAL_RCC_ClockConfig+0x188>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	220c      	movs	r2, #12
 80019a0:	401a      	ands	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d1ec      	bne.n	8001986 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019ac:	4b1e      	ldr	r3, [pc, #120]	; (8001a28 <HAL_RCC_ClockConfig+0x184>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2201      	movs	r2, #1
 80019b2:	4013      	ands	r3, r2
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d211      	bcs.n	80019de <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ba:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <HAL_RCC_ClockConfig+0x184>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2201      	movs	r2, #1
 80019c0:	4393      	bics	r3, r2
 80019c2:	0019      	movs	r1, r3
 80019c4:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <HAL_RCC_ClockConfig+0x184>)
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019cc:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <HAL_RCC_ClockConfig+0x184>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2201      	movs	r2, #1
 80019d2:	4013      	ands	r3, r2
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d001      	beq.n	80019de <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e020      	b.n	8001a20 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2204      	movs	r2, #4
 80019e4:	4013      	ands	r3, r2
 80019e6:	d009      	beq.n	80019fc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80019e8:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <HAL_RCC_ClockConfig+0x188>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	4a11      	ldr	r2, [pc, #68]	; (8001a34 <HAL_RCC_ClockConfig+0x190>)
 80019ee:	4013      	ands	r3, r2
 80019f0:	0019      	movs	r1, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <HAL_RCC_ClockConfig+0x188>)
 80019f8:	430a      	orrs	r2, r1
 80019fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80019fc:	f000 f820 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 8001a00:	0001      	movs	r1, r0
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <HAL_RCC_ClockConfig+0x188>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	091b      	lsrs	r3, r3, #4
 8001a08:	220f      	movs	r2, #15
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <HAL_RCC_ClockConfig+0x194>)
 8001a0e:	5cd3      	ldrb	r3, [r2, r3]
 8001a10:	000a      	movs	r2, r1
 8001a12:	40da      	lsrs	r2, r3
 8001a14:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <HAL_RCC_ClockConfig+0x198>)
 8001a16:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f7ff f8c7 	bl	8000bac <HAL_InitTick>
  
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	0018      	movs	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b004      	add	sp, #16
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40022000 	.word	0x40022000
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	00001388 	.word	0x00001388
 8001a34:	fffff8ff 	.word	0xfffff8ff
 8001a38:	080035b0 	.word	0x080035b0
 8001a3c:	20000000 	.word	0x20000000

08001a40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	2300      	movs	r3, #0
 8001a54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001a5a:	4b20      	ldr	r3, [pc, #128]	; (8001adc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	220c      	movs	r2, #12
 8001a64:	4013      	ands	r3, r2
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d002      	beq.n	8001a70 <HAL_RCC_GetSysClockFreq+0x30>
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d003      	beq.n	8001a76 <HAL_RCC_GetSysClockFreq+0x36>
 8001a6e:	e02c      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a70:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a72:	613b      	str	r3, [r7, #16]
      break;
 8001a74:	e02c      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	0c9b      	lsrs	r3, r3, #18
 8001a7a:	220f      	movs	r2, #15
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	4a19      	ldr	r2, [pc, #100]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a80:	5cd3      	ldrb	r3, [r2, r3]
 8001a82:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001a84:	4b15      	ldr	r3, [pc, #84]	; (8001adc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	220f      	movs	r2, #15
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	4a16      	ldr	r2, [pc, #88]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001a8e:	5cd3      	ldrb	r3, [r2, r3]
 8001a90:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	025b      	lsls	r3, r3, #9
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d009      	beq.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a9c:	68b9      	ldr	r1, [r7, #8]
 8001a9e:	4810      	ldr	r0, [pc, #64]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001aa0:	f7fe fb3c 	bl	800011c <__udivsi3>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	001a      	movs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4353      	muls	r3, r2
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	e009      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	000a      	movs	r2, r1
 8001ab4:	0152      	lsls	r2, r2, #5
 8001ab6:	1a52      	subs	r2, r2, r1
 8001ab8:	0193      	lsls	r3, r2, #6
 8001aba:	1a9b      	subs	r3, r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	185b      	adds	r3, r3, r1
 8001ac0:	021b      	lsls	r3, r3, #8
 8001ac2:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	613b      	str	r3, [r7, #16]
      break;
 8001ac8:	e002      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001acc:	613b      	str	r3, [r7, #16]
      break;
 8001ace:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ad0:	693b      	ldr	r3, [r7, #16]
}
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	b006      	add	sp, #24
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	007a1200 	.word	0x007a1200
 8001ae4:	080035c8 	.word	0x080035c8
 8001ae8:	080035d8 	.word	0x080035d8

08001aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af0:	4b02      	ldr	r3, [pc, #8]	; (8001afc <HAL_RCC_GetHCLKFreq+0x10>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	0018      	movs	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	20000000 	.word	0x20000000

08001b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001b04:	f7ff fff2 	bl	8001aec <HAL_RCC_GetHCLKFreq>
 8001b08:	0001      	movs	r1, r0
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	0a1b      	lsrs	r3, r3, #8
 8001b10:	2207      	movs	r2, #7
 8001b12:	4013      	ands	r3, r2
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b16:	5cd3      	ldrb	r3, [r2, r3]
 8001b18:	40d9      	lsrs	r1, r3
 8001b1a:	000b      	movs	r3, r1
}    
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	40021000 	.word	0x40021000
 8001b28:	080035c0 	.word	0x080035c0

08001b2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	025b      	lsls	r3, r3, #9
 8001b44:	4013      	ands	r3, r2
 8001b46:	d100      	bne.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001b48:	e08e      	b.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001b4a:	2017      	movs	r0, #23
 8001b4c:	183b      	adds	r3, r7, r0
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b52:	4b5f      	ldr	r3, [pc, #380]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001b54:	69da      	ldr	r2, [r3, #28]
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	055b      	lsls	r3, r3, #21
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d110      	bne.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b5e:	4b5c      	ldr	r3, [pc, #368]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001b60:	69da      	ldr	r2, [r3, #28]
 8001b62:	4b5b      	ldr	r3, [pc, #364]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001b64:	2180      	movs	r1, #128	; 0x80
 8001b66:	0549      	lsls	r1, r1, #21
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	61da      	str	r2, [r3, #28]
 8001b6c:	4b58      	ldr	r3, [pc, #352]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001b6e:	69da      	ldr	r2, [r3, #28]
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	055b      	lsls	r3, r3, #21
 8001b74:	4013      	ands	r3, r2
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b7a:	183b      	adds	r3, r7, r0
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b80:	4b54      	ldr	r3, [pc, #336]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d11a      	bne.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b8c:	4b51      	ldr	r3, [pc, #324]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b50      	ldr	r3, [pc, #320]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001b92:	2180      	movs	r1, #128	; 0x80
 8001b94:	0049      	lsls	r1, r1, #1
 8001b96:	430a      	orrs	r2, r1
 8001b98:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b9a:	f7ff f84d 	bl	8000c38 <HAL_GetTick>
 8001b9e:	0003      	movs	r3, r0
 8001ba0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba4:	f7ff f848 	bl	8000c38 <HAL_GetTick>
 8001ba8:	0002      	movs	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b64      	cmp	r3, #100	; 0x64
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e087      	b.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb6:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bc2:	4b43      	ldr	r3, [pc, #268]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001bc4:	6a1a      	ldr	r2, [r3, #32]
 8001bc6:	23c0      	movs	r3, #192	; 0xc0
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4013      	ands	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d034      	beq.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	23c0      	movs	r3, #192	; 0xc0
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4013      	ands	r3, r2
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d02c      	beq.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001be4:	4b3a      	ldr	r3, [pc, #232]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	4a3b      	ldr	r2, [pc, #236]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bee:	4b38      	ldr	r3, [pc, #224]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001bf0:	6a1a      	ldr	r2, [r3, #32]
 8001bf2:	4b37      	ldr	r3, [pc, #220]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001bf4:	2180      	movs	r1, #128	; 0x80
 8001bf6:	0249      	lsls	r1, r1, #9
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bfc:	4b34      	ldr	r3, [pc, #208]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001bfe:	6a1a      	ldr	r2, [r3, #32]
 8001c00:	4b33      	ldr	r3, [pc, #204]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c02:	4936      	ldr	r1, [pc, #216]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001c04:	400a      	ands	r2, r1
 8001c06:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c08:	4b31      	ldr	r3, [pc, #196]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2201      	movs	r2, #1
 8001c12:	4013      	ands	r3, r2
 8001c14:	d013      	beq.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c16:	f7ff f80f 	bl	8000c38 <HAL_GetTick>
 8001c1a:	0003      	movs	r3, r0
 8001c1c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1e:	e009      	b.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c20:	f7ff f80a 	bl	8000c38 <HAL_GetTick>
 8001c24:	0002      	movs	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	4a2d      	ldr	r2, [pc, #180]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e048      	b.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c34:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	2202      	movs	r2, #2
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c3e:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	4a25      	ldr	r2, [pc, #148]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	0019      	movs	r1, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c52:	2317      	movs	r3, #23
 8001c54:	18fb      	adds	r3, r7, r3
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d105      	bne.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5c:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c5e:	69da      	ldr	r2, [r3, #28]
 8001c60:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c62:	4920      	ldr	r1, [pc, #128]	; (8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c64:	400a      	ands	r2, r1
 8001c66:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d009      	beq.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c72:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	2203      	movs	r2, #3
 8001c78:	4393      	bics	r3, r2
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c82:	430a      	orrs	r2, r1
 8001c84:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d009      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c94:	2210      	movs	r2, #16
 8001c96:	4393      	bics	r3, r2
 8001c98:	0019      	movs	r1, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	2380      	movs	r3, #128	; 0x80
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4013      	ands	r3, r2
 8001cae:	d009      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001cb0:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb4:	2240      	movs	r2, #64	; 0x40
 8001cb6:	4393      	bics	r3, r2
 8001cb8:	0019      	movs	r1, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691a      	ldr	r2, [r3, #16]
 8001cbe:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b006      	add	sp, #24
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40007000 	.word	0x40007000
 8001cd8:	fffffcff 	.word	0xfffffcff
 8001cdc:	fffeffff 	.word	0xfffeffff
 8001ce0:	00001388 	.word	0x00001388
 8001ce4:	efffffff 	.word	0xefffffff

08001ce8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e042      	b.n	8001d80 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	223d      	movs	r2, #61	; 0x3d
 8001cfe:	5c9b      	ldrb	r3, [r3, r2]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d107      	bne.n	8001d16 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	223c      	movs	r2, #60	; 0x3c
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	0018      	movs	r0, r3
 8001d12:	f7fe fddd 	bl	80008d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	223d      	movs	r2, #61	; 0x3d
 8001d1a:	2102      	movs	r1, #2
 8001d1c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3304      	adds	r3, #4
 8001d26:	0019      	movs	r1, r3
 8001d28:	0010      	movs	r0, r2
 8001d2a:	f000 f94b 	bl	8001fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2246      	movs	r2, #70	; 0x46
 8001d32:	2101      	movs	r1, #1
 8001d34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	223e      	movs	r2, #62	; 0x3e
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	5499      	strb	r1, [r3, r2]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	223f      	movs	r2, #63	; 0x3f
 8001d42:	2101      	movs	r1, #1
 8001d44:	5499      	strb	r1, [r3, r2]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2240      	movs	r2, #64	; 0x40
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	5499      	strb	r1, [r3, r2]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2241      	movs	r2, #65	; 0x41
 8001d52:	2101      	movs	r1, #1
 8001d54:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2242      	movs	r2, #66	; 0x42
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	5499      	strb	r1, [r3, r2]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2243      	movs	r2, #67	; 0x43
 8001d62:	2101      	movs	r1, #1
 8001d64:	5499      	strb	r1, [r3, r2]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2244      	movs	r2, #68	; 0x44
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	5499      	strb	r1, [r3, r2]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2245      	movs	r2, #69	; 0x45
 8001d72:	2101      	movs	r1, #1
 8001d74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	223d      	movs	r2, #61	; 0x3d
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	0018      	movs	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b002      	add	sp, #8
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	223d      	movs	r2, #61	; 0x3d
 8001d94:	5c9b      	ldrb	r3, [r3, r2]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d001      	beq.n	8001da0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e033      	b.n	8001e08 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	223d      	movs	r2, #61	; 0x3d
 8001da4:	2102      	movs	r1, #2
 8001da6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a18      	ldr	r2, [pc, #96]	; (8001e10 <HAL_TIM_Base_Start+0x88>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d00f      	beq.n	8001dd2 <HAL_TIM_Base_Start+0x4a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	2380      	movs	r3, #128	; 0x80
 8001db8:	05db      	lsls	r3, r3, #23
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d009      	beq.n	8001dd2 <HAL_TIM_Base_Start+0x4a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a14      	ldr	r2, [pc, #80]	; (8001e14 <HAL_TIM_Base_Start+0x8c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d004      	beq.n	8001dd2 <HAL_TIM_Base_Start+0x4a>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <HAL_TIM_Base_Start+0x90>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d111      	bne.n	8001df6 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2207      	movs	r2, #7
 8001dda:	4013      	ands	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2b06      	cmp	r3, #6
 8001de2:	d010      	beq.n	8001e06 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2101      	movs	r1, #1
 8001df0:	430a      	orrs	r2, r1
 8001df2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001df4:	e007      	b.n	8001e06 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2101      	movs	r1, #1
 8001e02:	430a      	orrs	r2, r1
 8001e04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	0018      	movs	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b004      	add	sp, #16
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40012c00 	.word	0x40012c00
 8001e14:	40000400 	.word	0x40000400
 8001e18:	40014000 	.word	0x40014000

08001e1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e26:	230f      	movs	r3, #15
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	223c      	movs	r2, #60	; 0x3c
 8001e32:	5c9b      	ldrb	r3, [r3, r2]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d101      	bne.n	8001e3c <HAL_TIM_ConfigClockSource+0x20>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e0bc      	b.n	8001fb6 <HAL_TIM_ConfigClockSource+0x19a>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	223c      	movs	r2, #60	; 0x3c
 8001e40:	2101      	movs	r1, #1
 8001e42:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	223d      	movs	r2, #61	; 0x3d
 8001e48:	2102      	movs	r1, #2
 8001e4a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2277      	movs	r2, #119	; 0x77
 8001e58:	4393      	bics	r3, r2
 8001e5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	4a58      	ldr	r2, [pc, #352]	; (8001fc0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2280      	movs	r2, #128	; 0x80
 8001e72:	0192      	lsls	r2, r2, #6
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d040      	beq.n	8001efa <HAL_TIM_ConfigClockSource+0xde>
 8001e78:	2280      	movs	r2, #128	; 0x80
 8001e7a:	0192      	lsls	r2, r2, #6
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d900      	bls.n	8001e82 <HAL_TIM_ConfigClockSource+0x66>
 8001e80:	e088      	b.n	8001f94 <HAL_TIM_ConfigClockSource+0x178>
 8001e82:	2280      	movs	r2, #128	; 0x80
 8001e84:	0152      	lsls	r2, r2, #5
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d100      	bne.n	8001e8c <HAL_TIM_ConfigClockSource+0x70>
 8001e8a:	e088      	b.n	8001f9e <HAL_TIM_ConfigClockSource+0x182>
 8001e8c:	2280      	movs	r2, #128	; 0x80
 8001e8e:	0152      	lsls	r2, r2, #5
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d900      	bls.n	8001e96 <HAL_TIM_ConfigClockSource+0x7a>
 8001e94:	e07e      	b.n	8001f94 <HAL_TIM_ConfigClockSource+0x178>
 8001e96:	2b70      	cmp	r3, #112	; 0x70
 8001e98:	d018      	beq.n	8001ecc <HAL_TIM_ConfigClockSource+0xb0>
 8001e9a:	d900      	bls.n	8001e9e <HAL_TIM_ConfigClockSource+0x82>
 8001e9c:	e07a      	b.n	8001f94 <HAL_TIM_ConfigClockSource+0x178>
 8001e9e:	2b60      	cmp	r3, #96	; 0x60
 8001ea0:	d04f      	beq.n	8001f42 <HAL_TIM_ConfigClockSource+0x126>
 8001ea2:	d900      	bls.n	8001ea6 <HAL_TIM_ConfigClockSource+0x8a>
 8001ea4:	e076      	b.n	8001f94 <HAL_TIM_ConfigClockSource+0x178>
 8001ea6:	2b50      	cmp	r3, #80	; 0x50
 8001ea8:	d03b      	beq.n	8001f22 <HAL_TIM_ConfigClockSource+0x106>
 8001eaa:	d900      	bls.n	8001eae <HAL_TIM_ConfigClockSource+0x92>
 8001eac:	e072      	b.n	8001f94 <HAL_TIM_ConfigClockSource+0x178>
 8001eae:	2b40      	cmp	r3, #64	; 0x40
 8001eb0:	d057      	beq.n	8001f62 <HAL_TIM_ConfigClockSource+0x146>
 8001eb2:	d900      	bls.n	8001eb6 <HAL_TIM_ConfigClockSource+0x9a>
 8001eb4:	e06e      	b.n	8001f94 <HAL_TIM_ConfigClockSource+0x178>
 8001eb6:	2b30      	cmp	r3, #48	; 0x30
 8001eb8:	d063      	beq.n	8001f82 <HAL_TIM_ConfigClockSource+0x166>
 8001eba:	d86b      	bhi.n	8001f94 <HAL_TIM_ConfigClockSource+0x178>
 8001ebc:	2b20      	cmp	r3, #32
 8001ebe:	d060      	beq.n	8001f82 <HAL_TIM_ConfigClockSource+0x166>
 8001ec0:	d868      	bhi.n	8001f94 <HAL_TIM_ConfigClockSource+0x178>
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d05d      	beq.n	8001f82 <HAL_TIM_ConfigClockSource+0x166>
 8001ec6:	2b10      	cmp	r3, #16
 8001ec8:	d05b      	beq.n	8001f82 <HAL_TIM_ConfigClockSource+0x166>
 8001eca:	e063      	b.n	8001f94 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6818      	ldr	r0, [r3, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	6899      	ldr	r1, [r3, #8]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f000 f96c 	bl	80021b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	2277      	movs	r2, #119	; 0x77
 8001eec:	4313      	orrs	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	609a      	str	r2, [r3, #8]
      break;
 8001ef8:	e052      	b.n	8001fa0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	6899      	ldr	r1, [r3, #8]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	f000 f955 	bl	80021b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2180      	movs	r1, #128	; 0x80
 8001f1a:	01c9      	lsls	r1, r1, #7
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	609a      	str	r2, [r3, #8]
      break;
 8001f20:	e03e      	b.n	8001fa0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6818      	ldr	r0, [r3, #0]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	6859      	ldr	r1, [r3, #4]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	001a      	movs	r2, r3
 8001f30:	f000 f8c8 	bl	80020c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2150      	movs	r1, #80	; 0x50
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f000 f922 	bl	8002184 <TIM_ITRx_SetConfig>
      break;
 8001f40:	e02e      	b.n	8001fa0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	6859      	ldr	r1, [r3, #4]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	001a      	movs	r2, r3
 8001f50:	f000 f8e6 	bl	8002120 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2160      	movs	r1, #96	; 0x60
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f000 f912 	bl	8002184 <TIM_ITRx_SetConfig>
      break;
 8001f60:	e01e      	b.n	8001fa0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6818      	ldr	r0, [r3, #0]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	6859      	ldr	r1, [r3, #4]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	001a      	movs	r2, r3
 8001f70:	f000 f8a8 	bl	80020c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2140      	movs	r1, #64	; 0x40
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f000 f902 	bl	8002184 <TIM_ITRx_SetConfig>
      break;
 8001f80:	e00e      	b.n	8001fa0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	0019      	movs	r1, r3
 8001f8c:	0010      	movs	r0, r2
 8001f8e:	f000 f8f9 	bl	8002184 <TIM_ITRx_SetConfig>
      break;
 8001f92:	e005      	b.n	8001fa0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001f94:	230f      	movs	r3, #15
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]
      break;
 8001f9c:	e000      	b.n	8001fa0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001f9e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	223d      	movs	r2, #61	; 0x3d
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	223c      	movs	r2, #60	; 0x3c
 8001fac:	2100      	movs	r1, #0
 8001fae:	5499      	strb	r1, [r3, r2]

  return status;
 8001fb0:	230f      	movs	r3, #15
 8001fb2:	18fb      	adds	r3, r7, r3
 8001fb4:	781b      	ldrb	r3, [r3, #0]
}
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	b004      	add	sp, #16
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	ffff00ff 	.word	0xffff00ff

08001fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a34      	ldr	r2, [pc, #208]	; (80020a8 <TIM_Base_SetConfig+0xe4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d008      	beq.n	8001fee <TIM_Base_SetConfig+0x2a>
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	05db      	lsls	r3, r3, #23
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d003      	beq.n	8001fee <TIM_Base_SetConfig+0x2a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a30      	ldr	r2, [pc, #192]	; (80020ac <TIM_Base_SetConfig+0xe8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d108      	bne.n	8002000 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2270      	movs	r2, #112	; 0x70
 8001ff2:	4393      	bics	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a29      	ldr	r2, [pc, #164]	; (80020a8 <TIM_Base_SetConfig+0xe4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d018      	beq.n	800203a <TIM_Base_SetConfig+0x76>
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	05db      	lsls	r3, r3, #23
 800200e:	429a      	cmp	r2, r3
 8002010:	d013      	beq.n	800203a <TIM_Base_SetConfig+0x76>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a25      	ldr	r2, [pc, #148]	; (80020ac <TIM_Base_SetConfig+0xe8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d00f      	beq.n	800203a <TIM_Base_SetConfig+0x76>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a24      	ldr	r2, [pc, #144]	; (80020b0 <TIM_Base_SetConfig+0xec>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00b      	beq.n	800203a <TIM_Base_SetConfig+0x76>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a23      	ldr	r2, [pc, #140]	; (80020b4 <TIM_Base_SetConfig+0xf0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d007      	beq.n	800203a <TIM_Base_SetConfig+0x76>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a22      	ldr	r2, [pc, #136]	; (80020b8 <TIM_Base_SetConfig+0xf4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d003      	beq.n	800203a <TIM_Base_SetConfig+0x76>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a21      	ldr	r2, [pc, #132]	; (80020bc <TIM_Base_SetConfig+0xf8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d108      	bne.n	800204c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4a20      	ldr	r2, [pc, #128]	; (80020c0 <TIM_Base_SetConfig+0xfc>)
 800203e:	4013      	ands	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	4313      	orrs	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2280      	movs	r2, #128	; 0x80
 8002050:	4393      	bics	r3, r2
 8002052:	001a      	movs	r2, r3
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	4313      	orrs	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <TIM_Base_SetConfig+0xe4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d00b      	beq.n	8002092 <TIM_Base_SetConfig+0xce>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a0d      	ldr	r2, [pc, #52]	; (80020b4 <TIM_Base_SetConfig+0xf0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d007      	beq.n	8002092 <TIM_Base_SetConfig+0xce>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a0c      	ldr	r2, [pc, #48]	; (80020b8 <TIM_Base_SetConfig+0xf4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d003      	beq.n	8002092 <TIM_Base_SetConfig+0xce>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <TIM_Base_SetConfig+0xf8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d103      	bne.n	800209a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	691a      	ldr	r2, [r3, #16]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	615a      	str	r2, [r3, #20]
}
 80020a0:	46c0      	nop			; (mov r8, r8)
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b004      	add	sp, #16
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40012c00 	.word	0x40012c00
 80020ac:	40000400 	.word	0x40000400
 80020b0:	40002000 	.word	0x40002000
 80020b4:	40014000 	.word	0x40014000
 80020b8:	40014400 	.word	0x40014400
 80020bc:	40014800 	.word	0x40014800
 80020c0:	fffffcff 	.word	0xfffffcff

080020c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	2201      	movs	r2, #1
 80020dc:	4393      	bics	r3, r2
 80020de:	001a      	movs	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	22f0      	movs	r2, #240	; 0xf0
 80020ee:	4393      	bics	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	220a      	movs	r2, #10
 8002100:	4393      	bics	r3, r2
 8002102:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	4313      	orrs	r3, r2
 800210a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	621a      	str	r2, [r3, #32]
}
 8002118:	46c0      	nop			; (mov r8, r8)
 800211a:	46bd      	mov	sp, r7
 800211c:	b006      	add	sp, #24
 800211e:	bd80      	pop	{r7, pc}

08002120 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	2210      	movs	r2, #16
 8002132:	4393      	bics	r3, r2
 8002134:	001a      	movs	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	4a0d      	ldr	r2, [pc, #52]	; (8002180 <TIM_TI2_ConfigInputStage+0x60>)
 800214a:	4013      	ands	r3, r2
 800214c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	031b      	lsls	r3, r3, #12
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	4313      	orrs	r3, r2
 8002156:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	22a0      	movs	r2, #160	; 0xa0
 800215c:	4393      	bics	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	621a      	str	r2, [r3, #32]
}
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	46bd      	mov	sp, r7
 800217a:	b006      	add	sp, #24
 800217c:	bd80      	pop	{r7, pc}
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	ffff0fff 	.word	0xffff0fff

08002184 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2270      	movs	r2, #112	; 0x70
 8002198:	4393      	bics	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	2207      	movs	r2, #7
 80021a4:	4313      	orrs	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	609a      	str	r2, [r3, #8]
}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b004      	add	sp, #16
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	4a09      	ldr	r2, [pc, #36]	; (80021f4 <TIM_ETR_SetConfig+0x3c>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	021a      	lsls	r2, r3, #8
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	431a      	orrs	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	4313      	orrs	r3, r2
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	609a      	str	r2, [r3, #8]
}
 80021ec:	46c0      	nop			; (mov r8, r8)
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b006      	add	sp, #24
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	ffff00ff 	.word	0xffff00ff

080021f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	223c      	movs	r2, #60	; 0x3c
 8002206:	5c9b      	ldrb	r3, [r3, r2]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800220c:	2302      	movs	r3, #2
 800220e:	e047      	b.n	80022a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	223c      	movs	r2, #60	; 0x3c
 8002214:	2101      	movs	r1, #1
 8002216:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	223d      	movs	r2, #61	; 0x3d
 800221c:	2102      	movs	r1, #2
 800221e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2270      	movs	r2, #112	; 0x70
 8002234:	4393      	bics	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4313      	orrs	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a16      	ldr	r2, [pc, #88]	; (80022a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d00f      	beq.n	8002274 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	05db      	lsls	r3, r3, #23
 800225c:	429a      	cmp	r2, r3
 800225e:	d009      	beq.n	8002274 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a11      	ldr	r2, [pc, #68]	; (80022ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d004      	beq.n	8002274 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a10      	ldr	r2, [pc, #64]	; (80022b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d10c      	bne.n	800228e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2280      	movs	r2, #128	; 0x80
 8002278:	4393      	bics	r3, r2
 800227a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	4313      	orrs	r3, r2
 8002284:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	223d      	movs	r2, #61	; 0x3d
 8002292:	2101      	movs	r1, #1
 8002294:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	223c      	movs	r2, #60	; 0x3c
 800229a:	2100      	movs	r1, #0
 800229c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	0018      	movs	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b004      	add	sp, #16
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40012c00 	.word	0x40012c00
 80022ac:	40000400 	.word	0x40000400
 80022b0:	40014000 	.word	0x40014000

080022b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e044      	b.n	8002350 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d107      	bne.n	80022de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2278      	movs	r2, #120	; 0x78
 80022d2:	2100      	movs	r1, #0
 80022d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	0018      	movs	r0, r3
 80022da:	f7fe fb15 	bl	8000908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2224      	movs	r2, #36	; 0x24
 80022e2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2101      	movs	r1, #1
 80022f0:	438a      	bics	r2, r1
 80022f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	0018      	movs	r0, r3
 80022f8:	f000 f90e 	bl	8002518 <UART_SetConfig>
 80022fc:	0003      	movs	r3, r0
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e024      	b.n	8002350 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	0018      	movs	r0, r3
 8002312:	f000 fa41 	bl	8002798 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	490d      	ldr	r1, [pc, #52]	; (8002358 <HAL_UART_Init+0xa4>)
 8002322:	400a      	ands	r2, r1
 8002324:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	212a      	movs	r1, #42	; 0x2a
 8002332:	438a      	bics	r2, r1
 8002334:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2101      	movs	r1, #1
 8002342:	430a      	orrs	r2, r1
 8002344:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	0018      	movs	r0, r3
 800234a:	f000 fad9 	bl	8002900 <UART_CheckIdleState>
 800234e:	0003      	movs	r3, r0
}
 8002350:	0018      	movs	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	b002      	add	sp, #8
 8002356:	bd80      	pop	{r7, pc}
 8002358:	ffffb7ff 	.word	0xffffb7ff

0800235c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e030      	b.n	80023d0 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2224      	movs	r2, #36	; 0x24
 8002372:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2101      	movs	r1, #1
 8002380:	438a      	bics	r2, r1
 8002382:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2200      	movs	r2, #0
 8002392:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2200      	movs	r2, #0
 800239a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	0018      	movs	r0, r3
 80023a0:	f7fe fb3a 	bl	8000a18 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2284      	movs	r2, #132	; 0x84
 80023a8:	2100      	movs	r1, #0
 80023aa:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2280      	movs	r2, #128	; 0x80
 80023b6:	2100      	movs	r1, #0
 80023b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2278      	movs	r2, #120	; 0x78
 80023ca:	2100      	movs	r1, #0
 80023cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	0018      	movs	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b002      	add	sp, #8
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08a      	sub	sp, #40	; 0x28
 80023dc:	af02      	add	r7, sp, #8
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	603b      	str	r3, [r7, #0]
 80023e4:	1dbb      	adds	r3, r7, #6
 80023e6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023ec:	2b20      	cmp	r3, #32
 80023ee:	d000      	beq.n	80023f2 <HAL_UART_Transmit+0x1a>
 80023f0:	e08d      	b.n	800250e <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_UART_Transmit+0x28>
 80023f8:	1dbb      	adds	r3, r7, #6
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e085      	b.n	8002510 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	015b      	lsls	r3, r3, #5
 800240c:	429a      	cmp	r2, r3
 800240e:	d109      	bne.n	8002424 <HAL_UART_Transmit+0x4c>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d105      	bne.n	8002424 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2201      	movs	r2, #1
 800241c:	4013      	ands	r3, r2
 800241e:	d001      	beq.n	8002424 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e075      	b.n	8002510 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2284      	movs	r2, #132	; 0x84
 8002428:	2100      	movs	r1, #0
 800242a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2221      	movs	r2, #33	; 0x21
 8002430:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002432:	f7fe fc01 	bl	8000c38 <HAL_GetTick>
 8002436:	0003      	movs	r3, r0
 8002438:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1dba      	adds	r2, r7, #6
 800243e:	2150      	movs	r1, #80	; 0x50
 8002440:	8812      	ldrh	r2, [r2, #0]
 8002442:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	1dba      	adds	r2, r7, #6
 8002448:	2152      	movs	r1, #82	; 0x52
 800244a:	8812      	ldrh	r2, [r2, #0]
 800244c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	015b      	lsls	r3, r3, #5
 8002456:	429a      	cmp	r2, r3
 8002458:	d108      	bne.n	800246c <HAL_UART_Transmit+0x94>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d104      	bne.n	800246c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	e003      	b.n	8002474 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002470:	2300      	movs	r3, #0
 8002472:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002474:	e030      	b.n	80024d8 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	0013      	movs	r3, r2
 8002480:	2200      	movs	r2, #0
 8002482:	2180      	movs	r1, #128	; 0x80
 8002484:	f000 fae4 	bl	8002a50 <UART_WaitOnFlagUntilTimeout>
 8002488:	1e03      	subs	r3, r0, #0
 800248a:	d004      	beq.n	8002496 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2220      	movs	r2, #32
 8002490:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e03c      	b.n	8002510 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10b      	bne.n	80024b4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	881a      	ldrh	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	05d2      	lsls	r2, r2, #23
 80024a6:	0dd2      	lsrs	r2, r2, #23
 80024a8:	b292      	uxth	r2, r2
 80024aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	3302      	adds	r3, #2
 80024b0:	61bb      	str	r3, [r7, #24]
 80024b2:	e008      	b.n	80024c6 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	781a      	ldrb	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	b292      	uxth	r2, r2
 80024be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	3301      	adds	r3, #1
 80024c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2252      	movs	r2, #82	; 0x52
 80024ca:	5a9b      	ldrh	r3, [r3, r2]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b299      	uxth	r1, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2252      	movs	r2, #82	; 0x52
 80024d6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2252      	movs	r2, #82	; 0x52
 80024dc:	5a9b      	ldrh	r3, [r3, r2]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1c8      	bne.n	8002476 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	0013      	movs	r3, r2
 80024ee:	2200      	movs	r2, #0
 80024f0:	2140      	movs	r1, #64	; 0x40
 80024f2:	f000 faad 	bl	8002a50 <UART_WaitOnFlagUntilTimeout>
 80024f6:	1e03      	subs	r3, r0, #0
 80024f8:	d004      	beq.n	8002504 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2220      	movs	r2, #32
 80024fe:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e005      	b.n	8002510 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2220      	movs	r2, #32
 8002508:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	e000      	b.n	8002510 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800250e:	2302      	movs	r3, #2
  }
}
 8002510:	0018      	movs	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	b008      	add	sp, #32
 8002516:	bd80      	pop	{r7, pc}

08002518 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002520:	231e      	movs	r3, #30
 8002522:	18fb      	adds	r3, r7, r3
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	4313      	orrs	r3, r2
 800253e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a8d      	ldr	r2, [pc, #564]	; (800277c <UART_SetConfig+0x264>)
 8002548:	4013      	ands	r3, r2
 800254a:	0019      	movs	r1, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	430a      	orrs	r2, r1
 8002554:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	4a88      	ldr	r2, [pc, #544]	; (8002780 <UART_SetConfig+0x268>)
 800255e:	4013      	ands	r3, r2
 8002560:	0019      	movs	r1, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	4313      	orrs	r3, r2
 800257c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	4a7f      	ldr	r2, [pc, #508]	; (8002784 <UART_SetConfig+0x26c>)
 8002586:	4013      	ands	r3, r2
 8002588:	0019      	movs	r1, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	430a      	orrs	r2, r1
 8002592:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a7b      	ldr	r2, [pc, #492]	; (8002788 <UART_SetConfig+0x270>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d127      	bne.n	80025ee <UART_SetConfig+0xd6>
 800259e:	4b7b      	ldr	r3, [pc, #492]	; (800278c <UART_SetConfig+0x274>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	2203      	movs	r2, #3
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d00d      	beq.n	80025c6 <UART_SetConfig+0xae>
 80025aa:	d81b      	bhi.n	80025e4 <UART_SetConfig+0xcc>
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d014      	beq.n	80025da <UART_SetConfig+0xc2>
 80025b0:	d818      	bhi.n	80025e4 <UART_SetConfig+0xcc>
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <UART_SetConfig+0xa4>
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d00a      	beq.n	80025d0 <UART_SetConfig+0xb8>
 80025ba:	e013      	b.n	80025e4 <UART_SetConfig+0xcc>
 80025bc:	231f      	movs	r3, #31
 80025be:	18fb      	adds	r3, r7, r3
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
 80025c4:	e021      	b.n	800260a <UART_SetConfig+0xf2>
 80025c6:	231f      	movs	r3, #31
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	2202      	movs	r2, #2
 80025cc:	701a      	strb	r2, [r3, #0]
 80025ce:	e01c      	b.n	800260a <UART_SetConfig+0xf2>
 80025d0:	231f      	movs	r3, #31
 80025d2:	18fb      	adds	r3, r7, r3
 80025d4:	2204      	movs	r2, #4
 80025d6:	701a      	strb	r2, [r3, #0]
 80025d8:	e017      	b.n	800260a <UART_SetConfig+0xf2>
 80025da:	231f      	movs	r3, #31
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	2208      	movs	r2, #8
 80025e0:	701a      	strb	r2, [r3, #0]
 80025e2:	e012      	b.n	800260a <UART_SetConfig+0xf2>
 80025e4:	231f      	movs	r3, #31
 80025e6:	18fb      	adds	r3, r7, r3
 80025e8:	2210      	movs	r2, #16
 80025ea:	701a      	strb	r2, [r3, #0]
 80025ec:	e00d      	b.n	800260a <UART_SetConfig+0xf2>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a67      	ldr	r2, [pc, #412]	; (8002790 <UART_SetConfig+0x278>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d104      	bne.n	8002602 <UART_SetConfig+0xea>
 80025f8:	231f      	movs	r3, #31
 80025fa:	18fb      	adds	r3, r7, r3
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]
 8002600:	e003      	b.n	800260a <UART_SetConfig+0xf2>
 8002602:	231f      	movs	r3, #31
 8002604:	18fb      	adds	r3, r7, r3
 8002606:	2210      	movs	r2, #16
 8002608:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69da      	ldr	r2, [r3, #28]
 800260e:	2380      	movs	r3, #128	; 0x80
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	429a      	cmp	r2, r3
 8002614:	d15c      	bne.n	80026d0 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002616:	231f      	movs	r3, #31
 8002618:	18fb      	adds	r3, r7, r3
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b08      	cmp	r3, #8
 800261e:	d015      	beq.n	800264c <UART_SetConfig+0x134>
 8002620:	dc18      	bgt.n	8002654 <UART_SetConfig+0x13c>
 8002622:	2b04      	cmp	r3, #4
 8002624:	d00d      	beq.n	8002642 <UART_SetConfig+0x12a>
 8002626:	dc15      	bgt.n	8002654 <UART_SetConfig+0x13c>
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <UART_SetConfig+0x11a>
 800262c:	2b02      	cmp	r3, #2
 800262e:	d005      	beq.n	800263c <UART_SetConfig+0x124>
 8002630:	e010      	b.n	8002654 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002632:	f7ff fa65 	bl	8001b00 <HAL_RCC_GetPCLK1Freq>
 8002636:	0003      	movs	r3, r0
 8002638:	61bb      	str	r3, [r7, #24]
        break;
 800263a:	e012      	b.n	8002662 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800263c:	4b55      	ldr	r3, [pc, #340]	; (8002794 <UART_SetConfig+0x27c>)
 800263e:	61bb      	str	r3, [r7, #24]
        break;
 8002640:	e00f      	b.n	8002662 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002642:	f7ff f9fd 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 8002646:	0003      	movs	r3, r0
 8002648:	61bb      	str	r3, [r7, #24]
        break;
 800264a:	e00a      	b.n	8002662 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	021b      	lsls	r3, r3, #8
 8002650:	61bb      	str	r3, [r7, #24]
        break;
 8002652:	e006      	b.n	8002662 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002658:	231e      	movs	r3, #30
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
        break;
 8002660:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d100      	bne.n	800266a <UART_SetConfig+0x152>
 8002668:	e07a      	b.n	8002760 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	005a      	lsls	r2, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	085b      	lsrs	r3, r3, #1
 8002674:	18d2      	adds	r2, r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	0019      	movs	r1, r3
 800267c:	0010      	movs	r0, r2
 800267e:	f7fd fd4d 	bl	800011c <__udivsi3>
 8002682:	0003      	movs	r3, r0
 8002684:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	2b0f      	cmp	r3, #15
 800268a:	d91c      	bls.n	80026c6 <UART_SetConfig+0x1ae>
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	2380      	movs	r3, #128	; 0x80
 8002690:	025b      	lsls	r3, r3, #9
 8002692:	429a      	cmp	r2, r3
 8002694:	d217      	bcs.n	80026c6 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	b29a      	uxth	r2, r3
 800269a:	200e      	movs	r0, #14
 800269c:	183b      	adds	r3, r7, r0
 800269e:	210f      	movs	r1, #15
 80026a0:	438a      	bics	r2, r1
 80026a2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	085b      	lsrs	r3, r3, #1
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2207      	movs	r2, #7
 80026ac:	4013      	ands	r3, r2
 80026ae:	b299      	uxth	r1, r3
 80026b0:	183b      	adds	r3, r7, r0
 80026b2:	183a      	adds	r2, r7, r0
 80026b4:	8812      	ldrh	r2, [r2, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	183a      	adds	r2, r7, r0
 80026c0:	8812      	ldrh	r2, [r2, #0]
 80026c2:	60da      	str	r2, [r3, #12]
 80026c4:	e04c      	b.n	8002760 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80026c6:	231e      	movs	r3, #30
 80026c8:	18fb      	adds	r3, r7, r3
 80026ca:	2201      	movs	r2, #1
 80026cc:	701a      	strb	r2, [r3, #0]
 80026ce:	e047      	b.n	8002760 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80026d0:	231f      	movs	r3, #31
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d015      	beq.n	8002706 <UART_SetConfig+0x1ee>
 80026da:	dc18      	bgt.n	800270e <UART_SetConfig+0x1f6>
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d00d      	beq.n	80026fc <UART_SetConfig+0x1e4>
 80026e0:	dc15      	bgt.n	800270e <UART_SetConfig+0x1f6>
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <UART_SetConfig+0x1d4>
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d005      	beq.n	80026f6 <UART_SetConfig+0x1de>
 80026ea:	e010      	b.n	800270e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026ec:	f7ff fa08 	bl	8001b00 <HAL_RCC_GetPCLK1Freq>
 80026f0:	0003      	movs	r3, r0
 80026f2:	61bb      	str	r3, [r7, #24]
        break;
 80026f4:	e012      	b.n	800271c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026f6:	4b27      	ldr	r3, [pc, #156]	; (8002794 <UART_SetConfig+0x27c>)
 80026f8:	61bb      	str	r3, [r7, #24]
        break;
 80026fa:	e00f      	b.n	800271c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026fc:	f7ff f9a0 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 8002700:	0003      	movs	r3, r0
 8002702:	61bb      	str	r3, [r7, #24]
        break;
 8002704:	e00a      	b.n	800271c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002706:	2380      	movs	r3, #128	; 0x80
 8002708:	021b      	lsls	r3, r3, #8
 800270a:	61bb      	str	r3, [r7, #24]
        break;
 800270c:	e006      	b.n	800271c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002712:	231e      	movs	r3, #30
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	2201      	movs	r2, #1
 8002718:	701a      	strb	r2, [r3, #0]
        break;
 800271a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d01e      	beq.n	8002760 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	085a      	lsrs	r2, r3, #1
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	18d2      	adds	r2, r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	0019      	movs	r1, r3
 8002732:	0010      	movs	r0, r2
 8002734:	f7fd fcf2 	bl	800011c <__udivsi3>
 8002738:	0003      	movs	r3, r0
 800273a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	2b0f      	cmp	r3, #15
 8002740:	d90a      	bls.n	8002758 <UART_SetConfig+0x240>
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	025b      	lsls	r3, r3, #9
 8002748:	429a      	cmp	r2, r3
 800274a:	d205      	bcs.n	8002758 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	b29a      	uxth	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	e003      	b.n	8002760 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002758:	231e      	movs	r3, #30
 800275a:	18fb      	adds	r3, r7, r3
 800275c:	2201      	movs	r2, #1
 800275e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800276c:	231e      	movs	r3, #30
 800276e:	18fb      	adds	r3, r7, r3
 8002770:	781b      	ldrb	r3, [r3, #0]
}
 8002772:	0018      	movs	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	b008      	add	sp, #32
 8002778:	bd80      	pop	{r7, pc}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	ffff69f3 	.word	0xffff69f3
 8002780:	ffffcfff 	.word	0xffffcfff
 8002784:	fffff4ff 	.word	0xfffff4ff
 8002788:	40013800 	.word	0x40013800
 800278c:	40021000 	.word	0x40021000
 8002790:	40004400 	.word	0x40004400
 8002794:	007a1200 	.word	0x007a1200

08002798 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	2201      	movs	r2, #1
 80027a6:	4013      	ands	r3, r2
 80027a8:	d00b      	beq.n	80027c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	4a4a      	ldr	r2, [pc, #296]	; (80028dc <UART_AdvFeatureConfig+0x144>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	0019      	movs	r1, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	2202      	movs	r2, #2
 80027c8:	4013      	ands	r3, r2
 80027ca:	d00b      	beq.n	80027e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	4a43      	ldr	r2, [pc, #268]	; (80028e0 <UART_AdvFeatureConfig+0x148>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	0019      	movs	r1, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	2204      	movs	r2, #4
 80027ea:	4013      	ands	r3, r2
 80027ec:	d00b      	beq.n	8002806 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	4a3b      	ldr	r2, [pc, #236]	; (80028e4 <UART_AdvFeatureConfig+0x14c>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	0019      	movs	r1, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	2208      	movs	r2, #8
 800280c:	4013      	ands	r3, r2
 800280e:	d00b      	beq.n	8002828 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4a34      	ldr	r2, [pc, #208]	; (80028e8 <UART_AdvFeatureConfig+0x150>)
 8002818:	4013      	ands	r3, r2
 800281a:	0019      	movs	r1, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	2210      	movs	r2, #16
 800282e:	4013      	ands	r3, r2
 8002830:	d00b      	beq.n	800284a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	4a2c      	ldr	r2, [pc, #176]	; (80028ec <UART_AdvFeatureConfig+0x154>)
 800283a:	4013      	ands	r3, r2
 800283c:	0019      	movs	r1, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	2220      	movs	r2, #32
 8002850:	4013      	ands	r3, r2
 8002852:	d00b      	beq.n	800286c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	4a25      	ldr	r2, [pc, #148]	; (80028f0 <UART_AdvFeatureConfig+0x158>)
 800285c:	4013      	ands	r3, r2
 800285e:	0019      	movs	r1, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	2240      	movs	r2, #64	; 0x40
 8002872:	4013      	ands	r3, r2
 8002874:	d01d      	beq.n	80028b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4a1d      	ldr	r2, [pc, #116]	; (80028f4 <UART_AdvFeatureConfig+0x15c>)
 800287e:	4013      	ands	r3, r2
 8002880:	0019      	movs	r1, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002892:	2380      	movs	r3, #128	; 0x80
 8002894:	035b      	lsls	r3, r3, #13
 8002896:	429a      	cmp	r2, r3
 8002898:	d10b      	bne.n	80028b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	4a15      	ldr	r2, [pc, #84]	; (80028f8 <UART_AdvFeatureConfig+0x160>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	0019      	movs	r1, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	2280      	movs	r2, #128	; 0x80
 80028b8:	4013      	ands	r3, r2
 80028ba:	d00b      	beq.n	80028d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4a0e      	ldr	r2, [pc, #56]	; (80028fc <UART_AdvFeatureConfig+0x164>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	0019      	movs	r1, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	605a      	str	r2, [r3, #4]
  }
}
 80028d4:	46c0      	nop			; (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b002      	add	sp, #8
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	fffdffff 	.word	0xfffdffff
 80028e0:	fffeffff 	.word	0xfffeffff
 80028e4:	fffbffff 	.word	0xfffbffff
 80028e8:	ffff7fff 	.word	0xffff7fff
 80028ec:	ffffefff 	.word	0xffffefff
 80028f0:	ffffdfff 	.word	0xffffdfff
 80028f4:	ffefffff 	.word	0xffefffff
 80028f8:	ff9fffff 	.word	0xff9fffff
 80028fc:	fff7ffff 	.word	0xfff7ffff

08002900 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b092      	sub	sp, #72	; 0x48
 8002904:	af02      	add	r7, sp, #8
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2284      	movs	r2, #132	; 0x84
 800290c:	2100      	movs	r1, #0
 800290e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002910:	f7fe f992 	bl	8000c38 <HAL_GetTick>
 8002914:	0003      	movs	r3, r0
 8002916:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2208      	movs	r2, #8
 8002920:	4013      	ands	r3, r2
 8002922:	2b08      	cmp	r3, #8
 8002924:	d12c      	bne.n	8002980 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002928:	2280      	movs	r2, #128	; 0x80
 800292a:	0391      	lsls	r1, r2, #14
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	4a46      	ldr	r2, [pc, #280]	; (8002a48 <UART_CheckIdleState+0x148>)
 8002930:	9200      	str	r2, [sp, #0]
 8002932:	2200      	movs	r2, #0
 8002934:	f000 f88c 	bl	8002a50 <UART_WaitOnFlagUntilTimeout>
 8002938:	1e03      	subs	r3, r0, #0
 800293a:	d021      	beq.n	8002980 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800293c:	f3ef 8310 	mrs	r3, PRIMASK
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002944:	63bb      	str	r3, [r7, #56]	; 0x38
 8002946:	2301      	movs	r3, #1
 8002948:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294c:	f383 8810 	msr	PRIMASK, r3
}
 8002950:	46c0      	nop			; (mov r8, r8)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2180      	movs	r1, #128	; 0x80
 800295e:	438a      	bics	r2, r1
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002968:	f383 8810 	msr	PRIMASK, r3
}
 800296c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2220      	movs	r2, #32
 8002972:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2278      	movs	r2, #120	; 0x78
 8002978:	2100      	movs	r1, #0
 800297a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e05f      	b.n	8002a40 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2204      	movs	r2, #4
 8002988:	4013      	ands	r3, r2
 800298a:	2b04      	cmp	r3, #4
 800298c:	d146      	bne.n	8002a1c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800298e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002990:	2280      	movs	r2, #128	; 0x80
 8002992:	03d1      	lsls	r1, r2, #15
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	4a2c      	ldr	r2, [pc, #176]	; (8002a48 <UART_CheckIdleState+0x148>)
 8002998:	9200      	str	r2, [sp, #0]
 800299a:	2200      	movs	r2, #0
 800299c:	f000 f858 	bl	8002a50 <UART_WaitOnFlagUntilTimeout>
 80029a0:	1e03      	subs	r3, r0, #0
 80029a2:	d03b      	beq.n	8002a1c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029a4:	f3ef 8310 	mrs	r3, PRIMASK
 80029a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80029aa:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029ac:	637b      	str	r3, [r7, #52]	; 0x34
 80029ae:	2301      	movs	r3, #1
 80029b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	f383 8810 	msr	PRIMASK, r3
}
 80029b8:	46c0      	nop			; (mov r8, r8)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4921      	ldr	r1, [pc, #132]	; (8002a4c <UART_CheckIdleState+0x14c>)
 80029c6:	400a      	ands	r2, r1
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f383 8810 	msr	PRIMASK, r3
}
 80029d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029d6:	f3ef 8310 	mrs	r3, PRIMASK
 80029da:	61bb      	str	r3, [r7, #24]
  return(result);
 80029dc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029de:	633b      	str	r3, [r7, #48]	; 0x30
 80029e0:	2301      	movs	r3, #1
 80029e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f383 8810 	msr	PRIMASK, r3
}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2101      	movs	r1, #1
 80029f8:	438a      	bics	r2, r1
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	f383 8810 	msr	PRIMASK, r3
}
 8002a06:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2280      	movs	r2, #128	; 0x80
 8002a0c:	2120      	movs	r1, #32
 8002a0e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2278      	movs	r2, #120	; 0x78
 8002a14:	2100      	movs	r1, #0
 8002a16:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e011      	b.n	8002a40 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2280      	movs	r2, #128	; 0x80
 8002a26:	2120      	movs	r1, #32
 8002a28:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2278      	movs	r2, #120	; 0x78
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	0018      	movs	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b010      	add	sp, #64	; 0x40
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	01ffffff 	.word	0x01ffffff
 8002a4c:	fffffedf 	.word	0xfffffedf

08002a50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	1dfb      	adds	r3, r7, #7
 8002a5e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a60:	e04b      	b.n	8002afa <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	3301      	adds	r3, #1
 8002a66:	d048      	beq.n	8002afa <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a68:	f7fe f8e6 	bl	8000c38 <HAL_GetTick>
 8002a6c:	0002      	movs	r2, r0
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d302      	bcc.n	8002a7e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e04b      	b.n	8002b1a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2204      	movs	r2, #4
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d035      	beq.n	8002afa <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	2208      	movs	r2, #8
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d111      	bne.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2208      	movs	r2, #8
 8002aa2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f000 f83c 	bl	8002b24 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2284      	movs	r2, #132	; 0x84
 8002ab0:	2108      	movs	r1, #8
 8002ab2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2278      	movs	r2, #120	; 0x78
 8002ab8:	2100      	movs	r1, #0
 8002aba:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e02c      	b.n	8002b1a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	69da      	ldr	r2, [r3, #28]
 8002ac6:	2380      	movs	r3, #128	; 0x80
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	401a      	ands	r2, r3
 8002acc:	2380      	movs	r3, #128	; 0x80
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d112      	bne.n	8002afa <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2280      	movs	r2, #128	; 0x80
 8002ada:	0112      	lsls	r2, r2, #4
 8002adc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	f000 f81f 	bl	8002b24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2284      	movs	r2, #132	; 0x84
 8002aea:	2120      	movs	r1, #32
 8002aec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2278      	movs	r2, #120	; 0x78
 8002af2:	2100      	movs	r1, #0
 8002af4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e00f      	b.n	8002b1a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	4013      	ands	r3, r2
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	425a      	negs	r2, r3
 8002b0a:	4153      	adcs	r3, r2
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	001a      	movs	r2, r3
 8002b10:	1dfb      	adds	r3, r7, #7
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d0a4      	beq.n	8002a62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b004      	add	sp, #16
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08e      	sub	sp, #56	; 0x38
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b30:	617b      	str	r3, [r7, #20]
  return(result);
 8002b32:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b34:	637b      	str	r3, [r7, #52]	; 0x34
 8002b36:	2301      	movs	r3, #1
 8002b38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	f383 8810 	msr	PRIMASK, r3
}
 8002b40:	46c0      	nop			; (mov r8, r8)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4926      	ldr	r1, [pc, #152]	; (8002be8 <UART_EndRxTransfer+0xc4>)
 8002b4e:	400a      	ands	r2, r1
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f383 8810 	msr	PRIMASK, r3
}
 8002b5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b5e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b62:	623b      	str	r3, [r7, #32]
  return(result);
 8002b64:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b66:	633b      	str	r3, [r7, #48]	; 0x30
 8002b68:	2301      	movs	r3, #1
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	f383 8810 	msr	PRIMASK, r3
}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2101      	movs	r1, #1
 8002b80:	438a      	bics	r2, r1
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	f383 8810 	msr	PRIMASK, r3
}
 8002b8e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d118      	bne.n	8002bca <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b98:	f3ef 8310 	mrs	r3, PRIMASK
 8002b9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b9e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f383 8810 	msr	PRIMASK, r3
}
 8002bac:	46c0      	nop			; (mov r8, r8)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2110      	movs	r1, #16
 8002bba:	438a      	bics	r2, r1
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	f383 8810 	msr	PRIMASK, r3
}
 8002bc8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2280      	movs	r2, #128	; 0x80
 8002bce:	2120      	movs	r1, #32
 8002bd0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b00e      	add	sp, #56	; 0x38
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	fffffedf 	.word	0xfffffedf

08002bec <__errno>:
 8002bec:	4b01      	ldr	r3, [pc, #4]	; (8002bf4 <__errno+0x8>)
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	4770      	bx	lr
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	2000000c 	.word	0x2000000c

08002bf8 <__libc_init_array>:
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	2600      	movs	r6, #0
 8002bfc:	4d0c      	ldr	r5, [pc, #48]	; (8002c30 <__libc_init_array+0x38>)
 8002bfe:	4c0d      	ldr	r4, [pc, #52]	; (8002c34 <__libc_init_array+0x3c>)
 8002c00:	1b64      	subs	r4, r4, r5
 8002c02:	10a4      	asrs	r4, r4, #2
 8002c04:	42a6      	cmp	r6, r4
 8002c06:	d109      	bne.n	8002c1c <__libc_init_array+0x24>
 8002c08:	2600      	movs	r6, #0
 8002c0a:	f000 fc8b 	bl	8003524 <_init>
 8002c0e:	4d0a      	ldr	r5, [pc, #40]	; (8002c38 <__libc_init_array+0x40>)
 8002c10:	4c0a      	ldr	r4, [pc, #40]	; (8002c3c <__libc_init_array+0x44>)
 8002c12:	1b64      	subs	r4, r4, r5
 8002c14:	10a4      	asrs	r4, r4, #2
 8002c16:	42a6      	cmp	r6, r4
 8002c18:	d105      	bne.n	8002c26 <__libc_init_array+0x2e>
 8002c1a:	bd70      	pop	{r4, r5, r6, pc}
 8002c1c:	00b3      	lsls	r3, r6, #2
 8002c1e:	58eb      	ldr	r3, [r5, r3]
 8002c20:	4798      	blx	r3
 8002c22:	3601      	adds	r6, #1
 8002c24:	e7ee      	b.n	8002c04 <__libc_init_array+0xc>
 8002c26:	00b3      	lsls	r3, r6, #2
 8002c28:	58eb      	ldr	r3, [r5, r3]
 8002c2a:	4798      	blx	r3
 8002c2c:	3601      	adds	r6, #1
 8002c2e:	e7f2      	b.n	8002c16 <__libc_init_array+0x1e>
 8002c30:	0800367c 	.word	0x0800367c
 8002c34:	0800367c 	.word	0x0800367c
 8002c38:	0800367c 	.word	0x0800367c
 8002c3c:	08003680 	.word	0x08003680

08002c40 <memcpy>:
 8002c40:	2300      	movs	r3, #0
 8002c42:	b510      	push	{r4, lr}
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d100      	bne.n	8002c4a <memcpy+0xa>
 8002c48:	bd10      	pop	{r4, pc}
 8002c4a:	5ccc      	ldrb	r4, [r1, r3]
 8002c4c:	54c4      	strb	r4, [r0, r3]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	e7f8      	b.n	8002c44 <memcpy+0x4>

08002c52 <memset>:
 8002c52:	0003      	movs	r3, r0
 8002c54:	1882      	adds	r2, r0, r2
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d100      	bne.n	8002c5c <memset+0xa>
 8002c5a:	4770      	bx	lr
 8002c5c:	7019      	strb	r1, [r3, #0]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	e7f9      	b.n	8002c56 <memset+0x4>
	...

08002c64 <_free_r>:
 8002c64:	b570      	push	{r4, r5, r6, lr}
 8002c66:	0005      	movs	r5, r0
 8002c68:	2900      	cmp	r1, #0
 8002c6a:	d010      	beq.n	8002c8e <_free_r+0x2a>
 8002c6c:	1f0c      	subs	r4, r1, #4
 8002c6e:	6823      	ldr	r3, [r4, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	da00      	bge.n	8002c76 <_free_r+0x12>
 8002c74:	18e4      	adds	r4, r4, r3
 8002c76:	0028      	movs	r0, r5
 8002c78:	f000 f90a 	bl	8002e90 <__malloc_lock>
 8002c7c:	4a1d      	ldr	r2, [pc, #116]	; (8002cf4 <_free_r+0x90>)
 8002c7e:	6813      	ldr	r3, [r2, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d105      	bne.n	8002c90 <_free_r+0x2c>
 8002c84:	6063      	str	r3, [r4, #4]
 8002c86:	6014      	str	r4, [r2, #0]
 8002c88:	0028      	movs	r0, r5
 8002c8a:	f000 f909 	bl	8002ea0 <__malloc_unlock>
 8002c8e:	bd70      	pop	{r4, r5, r6, pc}
 8002c90:	42a3      	cmp	r3, r4
 8002c92:	d908      	bls.n	8002ca6 <_free_r+0x42>
 8002c94:	6821      	ldr	r1, [r4, #0]
 8002c96:	1860      	adds	r0, r4, r1
 8002c98:	4283      	cmp	r3, r0
 8002c9a:	d1f3      	bne.n	8002c84 <_free_r+0x20>
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	1841      	adds	r1, r0, r1
 8002ca2:	6021      	str	r1, [r4, #0]
 8002ca4:	e7ee      	b.n	8002c84 <_free_r+0x20>
 8002ca6:	001a      	movs	r2, r3
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <_free_r+0x4e>
 8002cae:	42a3      	cmp	r3, r4
 8002cb0:	d9f9      	bls.n	8002ca6 <_free_r+0x42>
 8002cb2:	6811      	ldr	r1, [r2, #0]
 8002cb4:	1850      	adds	r0, r2, r1
 8002cb6:	42a0      	cmp	r0, r4
 8002cb8:	d10b      	bne.n	8002cd2 <_free_r+0x6e>
 8002cba:	6820      	ldr	r0, [r4, #0]
 8002cbc:	1809      	adds	r1, r1, r0
 8002cbe:	1850      	adds	r0, r2, r1
 8002cc0:	6011      	str	r1, [r2, #0]
 8002cc2:	4283      	cmp	r3, r0
 8002cc4:	d1e0      	bne.n	8002c88 <_free_r+0x24>
 8002cc6:	6818      	ldr	r0, [r3, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	1841      	adds	r1, r0, r1
 8002ccc:	6011      	str	r1, [r2, #0]
 8002cce:	6053      	str	r3, [r2, #4]
 8002cd0:	e7da      	b.n	8002c88 <_free_r+0x24>
 8002cd2:	42a0      	cmp	r0, r4
 8002cd4:	d902      	bls.n	8002cdc <_free_r+0x78>
 8002cd6:	230c      	movs	r3, #12
 8002cd8:	602b      	str	r3, [r5, #0]
 8002cda:	e7d5      	b.n	8002c88 <_free_r+0x24>
 8002cdc:	6821      	ldr	r1, [r4, #0]
 8002cde:	1860      	adds	r0, r4, r1
 8002ce0:	4283      	cmp	r3, r0
 8002ce2:	d103      	bne.n	8002cec <_free_r+0x88>
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	1841      	adds	r1, r0, r1
 8002cea:	6021      	str	r1, [r4, #0]
 8002cec:	6063      	str	r3, [r4, #4]
 8002cee:	6054      	str	r4, [r2, #4]
 8002cf0:	e7ca      	b.n	8002c88 <_free_r+0x24>
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	200001ec 	.word	0x200001ec

08002cf8 <sbrk_aligned>:
 8002cf8:	b570      	push	{r4, r5, r6, lr}
 8002cfa:	4e0f      	ldr	r6, [pc, #60]	; (8002d38 <sbrk_aligned+0x40>)
 8002cfc:	000d      	movs	r5, r1
 8002cfe:	6831      	ldr	r1, [r6, #0]
 8002d00:	0004      	movs	r4, r0
 8002d02:	2900      	cmp	r1, #0
 8002d04:	d102      	bne.n	8002d0c <sbrk_aligned+0x14>
 8002d06:	f000 f88f 	bl	8002e28 <_sbrk_r>
 8002d0a:	6030      	str	r0, [r6, #0]
 8002d0c:	0029      	movs	r1, r5
 8002d0e:	0020      	movs	r0, r4
 8002d10:	f000 f88a 	bl	8002e28 <_sbrk_r>
 8002d14:	1c43      	adds	r3, r0, #1
 8002d16:	d00a      	beq.n	8002d2e <sbrk_aligned+0x36>
 8002d18:	2303      	movs	r3, #3
 8002d1a:	1cc5      	adds	r5, r0, #3
 8002d1c:	439d      	bics	r5, r3
 8002d1e:	42a8      	cmp	r0, r5
 8002d20:	d007      	beq.n	8002d32 <sbrk_aligned+0x3a>
 8002d22:	1a29      	subs	r1, r5, r0
 8002d24:	0020      	movs	r0, r4
 8002d26:	f000 f87f 	bl	8002e28 <_sbrk_r>
 8002d2a:	1c43      	adds	r3, r0, #1
 8002d2c:	d101      	bne.n	8002d32 <sbrk_aligned+0x3a>
 8002d2e:	2501      	movs	r5, #1
 8002d30:	426d      	negs	r5, r5
 8002d32:	0028      	movs	r0, r5
 8002d34:	bd70      	pop	{r4, r5, r6, pc}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	200001f0 	.word	0x200001f0

08002d3c <_malloc_r>:
 8002d3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d3e:	2203      	movs	r2, #3
 8002d40:	1ccb      	adds	r3, r1, #3
 8002d42:	4393      	bics	r3, r2
 8002d44:	3308      	adds	r3, #8
 8002d46:	0006      	movs	r6, r0
 8002d48:	001f      	movs	r7, r3
 8002d4a:	2b0c      	cmp	r3, #12
 8002d4c:	d232      	bcs.n	8002db4 <_malloc_r+0x78>
 8002d4e:	270c      	movs	r7, #12
 8002d50:	42b9      	cmp	r1, r7
 8002d52:	d831      	bhi.n	8002db8 <_malloc_r+0x7c>
 8002d54:	0030      	movs	r0, r6
 8002d56:	f000 f89b 	bl	8002e90 <__malloc_lock>
 8002d5a:	4d32      	ldr	r5, [pc, #200]	; (8002e24 <_malloc_r+0xe8>)
 8002d5c:	682b      	ldr	r3, [r5, #0]
 8002d5e:	001c      	movs	r4, r3
 8002d60:	2c00      	cmp	r4, #0
 8002d62:	d12e      	bne.n	8002dc2 <_malloc_r+0x86>
 8002d64:	0039      	movs	r1, r7
 8002d66:	0030      	movs	r0, r6
 8002d68:	f7ff ffc6 	bl	8002cf8 <sbrk_aligned>
 8002d6c:	0004      	movs	r4, r0
 8002d6e:	1c43      	adds	r3, r0, #1
 8002d70:	d11e      	bne.n	8002db0 <_malloc_r+0x74>
 8002d72:	682c      	ldr	r4, [r5, #0]
 8002d74:	0025      	movs	r5, r4
 8002d76:	2d00      	cmp	r5, #0
 8002d78:	d14a      	bne.n	8002e10 <_malloc_r+0xd4>
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	0029      	movs	r1, r5
 8002d7e:	18e3      	adds	r3, r4, r3
 8002d80:	0030      	movs	r0, r6
 8002d82:	9301      	str	r3, [sp, #4]
 8002d84:	f000 f850 	bl	8002e28 <_sbrk_r>
 8002d88:	9b01      	ldr	r3, [sp, #4]
 8002d8a:	4283      	cmp	r3, r0
 8002d8c:	d143      	bne.n	8002e16 <_malloc_r+0xda>
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	3703      	adds	r7, #3
 8002d92:	1aff      	subs	r7, r7, r3
 8002d94:	2303      	movs	r3, #3
 8002d96:	439f      	bics	r7, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	2f0c      	cmp	r7, #12
 8002d9c:	d200      	bcs.n	8002da0 <_malloc_r+0x64>
 8002d9e:	270c      	movs	r7, #12
 8002da0:	0039      	movs	r1, r7
 8002da2:	0030      	movs	r0, r6
 8002da4:	f7ff ffa8 	bl	8002cf8 <sbrk_aligned>
 8002da8:	1c43      	adds	r3, r0, #1
 8002daa:	d034      	beq.n	8002e16 <_malloc_r+0xda>
 8002dac:	6823      	ldr	r3, [r4, #0]
 8002dae:	19df      	adds	r7, r3, r7
 8002db0:	6027      	str	r7, [r4, #0]
 8002db2:	e013      	b.n	8002ddc <_malloc_r+0xa0>
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	dacb      	bge.n	8002d50 <_malloc_r+0x14>
 8002db8:	230c      	movs	r3, #12
 8002dba:	2500      	movs	r5, #0
 8002dbc:	6033      	str	r3, [r6, #0]
 8002dbe:	0028      	movs	r0, r5
 8002dc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002dc2:	6822      	ldr	r2, [r4, #0]
 8002dc4:	1bd1      	subs	r1, r2, r7
 8002dc6:	d420      	bmi.n	8002e0a <_malloc_r+0xce>
 8002dc8:	290b      	cmp	r1, #11
 8002dca:	d917      	bls.n	8002dfc <_malloc_r+0xc0>
 8002dcc:	19e2      	adds	r2, r4, r7
 8002dce:	6027      	str	r7, [r4, #0]
 8002dd0:	42a3      	cmp	r3, r4
 8002dd2:	d111      	bne.n	8002df8 <_malloc_r+0xbc>
 8002dd4:	602a      	str	r2, [r5, #0]
 8002dd6:	6863      	ldr	r3, [r4, #4]
 8002dd8:	6011      	str	r1, [r2, #0]
 8002dda:	6053      	str	r3, [r2, #4]
 8002ddc:	0030      	movs	r0, r6
 8002dde:	0025      	movs	r5, r4
 8002de0:	f000 f85e 	bl	8002ea0 <__malloc_unlock>
 8002de4:	2207      	movs	r2, #7
 8002de6:	350b      	adds	r5, #11
 8002de8:	1d23      	adds	r3, r4, #4
 8002dea:	4395      	bics	r5, r2
 8002dec:	1aea      	subs	r2, r5, r3
 8002dee:	429d      	cmp	r5, r3
 8002df0:	d0e5      	beq.n	8002dbe <_malloc_r+0x82>
 8002df2:	1b5b      	subs	r3, r3, r5
 8002df4:	50a3      	str	r3, [r4, r2]
 8002df6:	e7e2      	b.n	8002dbe <_malloc_r+0x82>
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	e7ec      	b.n	8002dd6 <_malloc_r+0x9a>
 8002dfc:	6862      	ldr	r2, [r4, #4]
 8002dfe:	42a3      	cmp	r3, r4
 8002e00:	d101      	bne.n	8002e06 <_malloc_r+0xca>
 8002e02:	602a      	str	r2, [r5, #0]
 8002e04:	e7ea      	b.n	8002ddc <_malloc_r+0xa0>
 8002e06:	605a      	str	r2, [r3, #4]
 8002e08:	e7e8      	b.n	8002ddc <_malloc_r+0xa0>
 8002e0a:	0023      	movs	r3, r4
 8002e0c:	6864      	ldr	r4, [r4, #4]
 8002e0e:	e7a7      	b.n	8002d60 <_malloc_r+0x24>
 8002e10:	002c      	movs	r4, r5
 8002e12:	686d      	ldr	r5, [r5, #4]
 8002e14:	e7af      	b.n	8002d76 <_malloc_r+0x3a>
 8002e16:	230c      	movs	r3, #12
 8002e18:	0030      	movs	r0, r6
 8002e1a:	6033      	str	r3, [r6, #0]
 8002e1c:	f000 f840 	bl	8002ea0 <__malloc_unlock>
 8002e20:	e7cd      	b.n	8002dbe <_malloc_r+0x82>
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	200001ec 	.word	0x200001ec

08002e28 <_sbrk_r>:
 8002e28:	2300      	movs	r3, #0
 8002e2a:	b570      	push	{r4, r5, r6, lr}
 8002e2c:	4d06      	ldr	r5, [pc, #24]	; (8002e48 <_sbrk_r+0x20>)
 8002e2e:	0004      	movs	r4, r0
 8002e30:	0008      	movs	r0, r1
 8002e32:	602b      	str	r3, [r5, #0]
 8002e34:	f7fd fe40 	bl	8000ab8 <_sbrk>
 8002e38:	1c43      	adds	r3, r0, #1
 8002e3a:	d103      	bne.n	8002e44 <_sbrk_r+0x1c>
 8002e3c:	682b      	ldr	r3, [r5, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d000      	beq.n	8002e44 <_sbrk_r+0x1c>
 8002e42:	6023      	str	r3, [r4, #0]
 8002e44:	bd70      	pop	{r4, r5, r6, pc}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	200001f8 	.word	0x200001f8

08002e4c <siprintf>:
 8002e4c:	b40e      	push	{r1, r2, r3}
 8002e4e:	b500      	push	{lr}
 8002e50:	490b      	ldr	r1, [pc, #44]	; (8002e80 <siprintf+0x34>)
 8002e52:	b09c      	sub	sp, #112	; 0x70
 8002e54:	ab1d      	add	r3, sp, #116	; 0x74
 8002e56:	9002      	str	r0, [sp, #8]
 8002e58:	9006      	str	r0, [sp, #24]
 8002e5a:	9107      	str	r1, [sp, #28]
 8002e5c:	9104      	str	r1, [sp, #16]
 8002e5e:	4809      	ldr	r0, [pc, #36]	; (8002e84 <siprintf+0x38>)
 8002e60:	4909      	ldr	r1, [pc, #36]	; (8002e88 <siprintf+0x3c>)
 8002e62:	cb04      	ldmia	r3!, {r2}
 8002e64:	9105      	str	r1, [sp, #20]
 8002e66:	6800      	ldr	r0, [r0, #0]
 8002e68:	a902      	add	r1, sp, #8
 8002e6a:	9301      	str	r3, [sp, #4]
 8002e6c:	f000 f882 	bl	8002f74 <_svfiprintf_r>
 8002e70:	2300      	movs	r3, #0
 8002e72:	9a02      	ldr	r2, [sp, #8]
 8002e74:	7013      	strb	r3, [r2, #0]
 8002e76:	b01c      	add	sp, #112	; 0x70
 8002e78:	bc08      	pop	{r3}
 8002e7a:	b003      	add	sp, #12
 8002e7c:	4718      	bx	r3
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	7fffffff 	.word	0x7fffffff
 8002e84:	2000000c 	.word	0x2000000c
 8002e88:	ffff0208 	.word	0xffff0208

08002e8c <__retarget_lock_acquire_recursive>:
 8002e8c:	4770      	bx	lr

08002e8e <__retarget_lock_release_recursive>:
 8002e8e:	4770      	bx	lr

08002e90 <__malloc_lock>:
 8002e90:	b510      	push	{r4, lr}
 8002e92:	4802      	ldr	r0, [pc, #8]	; (8002e9c <__malloc_lock+0xc>)
 8002e94:	f7ff fffa 	bl	8002e8c <__retarget_lock_acquire_recursive>
 8002e98:	bd10      	pop	{r4, pc}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	200001f4 	.word	0x200001f4

08002ea0 <__malloc_unlock>:
 8002ea0:	b510      	push	{r4, lr}
 8002ea2:	4802      	ldr	r0, [pc, #8]	; (8002eac <__malloc_unlock+0xc>)
 8002ea4:	f7ff fff3 	bl	8002e8e <__retarget_lock_release_recursive>
 8002ea8:	bd10      	pop	{r4, pc}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	200001f4 	.word	0x200001f4

08002eb0 <__ssputs_r>:
 8002eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eb2:	688e      	ldr	r6, [r1, #8]
 8002eb4:	b085      	sub	sp, #20
 8002eb6:	0007      	movs	r7, r0
 8002eb8:	000c      	movs	r4, r1
 8002eba:	9203      	str	r2, [sp, #12]
 8002ebc:	9301      	str	r3, [sp, #4]
 8002ebe:	429e      	cmp	r6, r3
 8002ec0:	d83c      	bhi.n	8002f3c <__ssputs_r+0x8c>
 8002ec2:	2390      	movs	r3, #144	; 0x90
 8002ec4:	898a      	ldrh	r2, [r1, #12]
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	421a      	tst	r2, r3
 8002eca:	d034      	beq.n	8002f36 <__ssputs_r+0x86>
 8002ecc:	6909      	ldr	r1, [r1, #16]
 8002ece:	6823      	ldr	r3, [r4, #0]
 8002ed0:	6960      	ldr	r0, [r4, #20]
 8002ed2:	1a5b      	subs	r3, r3, r1
 8002ed4:	9302      	str	r3, [sp, #8]
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	4343      	muls	r3, r0
 8002eda:	0fdd      	lsrs	r5, r3, #31
 8002edc:	18ed      	adds	r5, r5, r3
 8002ede:	9b01      	ldr	r3, [sp, #4]
 8002ee0:	9802      	ldr	r0, [sp, #8]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	181b      	adds	r3, r3, r0
 8002ee6:	106d      	asrs	r5, r5, #1
 8002ee8:	42ab      	cmp	r3, r5
 8002eea:	d900      	bls.n	8002eee <__ssputs_r+0x3e>
 8002eec:	001d      	movs	r5, r3
 8002eee:	0553      	lsls	r3, r2, #21
 8002ef0:	d532      	bpl.n	8002f58 <__ssputs_r+0xa8>
 8002ef2:	0029      	movs	r1, r5
 8002ef4:	0038      	movs	r0, r7
 8002ef6:	f7ff ff21 	bl	8002d3c <_malloc_r>
 8002efa:	1e06      	subs	r6, r0, #0
 8002efc:	d109      	bne.n	8002f12 <__ssputs_r+0x62>
 8002efe:	230c      	movs	r3, #12
 8002f00:	603b      	str	r3, [r7, #0]
 8002f02:	2340      	movs	r3, #64	; 0x40
 8002f04:	2001      	movs	r0, #1
 8002f06:	89a2      	ldrh	r2, [r4, #12]
 8002f08:	4240      	negs	r0, r0
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	81a3      	strh	r3, [r4, #12]
 8002f0e:	b005      	add	sp, #20
 8002f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f12:	9a02      	ldr	r2, [sp, #8]
 8002f14:	6921      	ldr	r1, [r4, #16]
 8002f16:	f7ff fe93 	bl	8002c40 <memcpy>
 8002f1a:	89a3      	ldrh	r3, [r4, #12]
 8002f1c:	4a14      	ldr	r2, [pc, #80]	; (8002f70 <__ssputs_r+0xc0>)
 8002f1e:	401a      	ands	r2, r3
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	4313      	orrs	r3, r2
 8002f24:	81a3      	strh	r3, [r4, #12]
 8002f26:	9b02      	ldr	r3, [sp, #8]
 8002f28:	6126      	str	r6, [r4, #16]
 8002f2a:	18f6      	adds	r6, r6, r3
 8002f2c:	6026      	str	r6, [r4, #0]
 8002f2e:	6165      	str	r5, [r4, #20]
 8002f30:	9e01      	ldr	r6, [sp, #4]
 8002f32:	1aed      	subs	r5, r5, r3
 8002f34:	60a5      	str	r5, [r4, #8]
 8002f36:	9b01      	ldr	r3, [sp, #4]
 8002f38:	429e      	cmp	r6, r3
 8002f3a:	d900      	bls.n	8002f3e <__ssputs_r+0x8e>
 8002f3c:	9e01      	ldr	r6, [sp, #4]
 8002f3e:	0032      	movs	r2, r6
 8002f40:	9903      	ldr	r1, [sp, #12]
 8002f42:	6820      	ldr	r0, [r4, #0]
 8002f44:	f000 faa3 	bl	800348e <memmove>
 8002f48:	68a3      	ldr	r3, [r4, #8]
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	1b9b      	subs	r3, r3, r6
 8002f4e:	60a3      	str	r3, [r4, #8]
 8002f50:	6823      	ldr	r3, [r4, #0]
 8002f52:	199e      	adds	r6, r3, r6
 8002f54:	6026      	str	r6, [r4, #0]
 8002f56:	e7da      	b.n	8002f0e <__ssputs_r+0x5e>
 8002f58:	002a      	movs	r2, r5
 8002f5a:	0038      	movs	r0, r7
 8002f5c:	f000 faaa 	bl	80034b4 <_realloc_r>
 8002f60:	1e06      	subs	r6, r0, #0
 8002f62:	d1e0      	bne.n	8002f26 <__ssputs_r+0x76>
 8002f64:	0038      	movs	r0, r7
 8002f66:	6921      	ldr	r1, [r4, #16]
 8002f68:	f7ff fe7c 	bl	8002c64 <_free_r>
 8002f6c:	e7c7      	b.n	8002efe <__ssputs_r+0x4e>
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	fffffb7f 	.word	0xfffffb7f

08002f74 <_svfiprintf_r>:
 8002f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f76:	b0a1      	sub	sp, #132	; 0x84
 8002f78:	9003      	str	r0, [sp, #12]
 8002f7a:	001d      	movs	r5, r3
 8002f7c:	898b      	ldrh	r3, [r1, #12]
 8002f7e:	000f      	movs	r7, r1
 8002f80:	0016      	movs	r6, r2
 8002f82:	061b      	lsls	r3, r3, #24
 8002f84:	d511      	bpl.n	8002faa <_svfiprintf_r+0x36>
 8002f86:	690b      	ldr	r3, [r1, #16]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10e      	bne.n	8002faa <_svfiprintf_r+0x36>
 8002f8c:	2140      	movs	r1, #64	; 0x40
 8002f8e:	f7ff fed5 	bl	8002d3c <_malloc_r>
 8002f92:	6038      	str	r0, [r7, #0]
 8002f94:	6138      	str	r0, [r7, #16]
 8002f96:	2800      	cmp	r0, #0
 8002f98:	d105      	bne.n	8002fa6 <_svfiprintf_r+0x32>
 8002f9a:	230c      	movs	r3, #12
 8002f9c:	9a03      	ldr	r2, [sp, #12]
 8002f9e:	3801      	subs	r0, #1
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	b021      	add	sp, #132	; 0x84
 8002fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fa6:	2340      	movs	r3, #64	; 0x40
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	2300      	movs	r3, #0
 8002fac:	ac08      	add	r4, sp, #32
 8002fae:	6163      	str	r3, [r4, #20]
 8002fb0:	3320      	adds	r3, #32
 8002fb2:	7663      	strb	r3, [r4, #25]
 8002fb4:	3310      	adds	r3, #16
 8002fb6:	76a3      	strb	r3, [r4, #26]
 8002fb8:	9507      	str	r5, [sp, #28]
 8002fba:	0035      	movs	r5, r6
 8002fbc:	782b      	ldrb	r3, [r5, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <_svfiprintf_r+0x52>
 8002fc2:	2b25      	cmp	r3, #37	; 0x25
 8002fc4:	d147      	bne.n	8003056 <_svfiprintf_r+0xe2>
 8002fc6:	1bab      	subs	r3, r5, r6
 8002fc8:	9305      	str	r3, [sp, #20]
 8002fca:	42b5      	cmp	r5, r6
 8002fcc:	d00c      	beq.n	8002fe8 <_svfiprintf_r+0x74>
 8002fce:	0032      	movs	r2, r6
 8002fd0:	0039      	movs	r1, r7
 8002fd2:	9803      	ldr	r0, [sp, #12]
 8002fd4:	f7ff ff6c 	bl	8002eb0 <__ssputs_r>
 8002fd8:	1c43      	adds	r3, r0, #1
 8002fda:	d100      	bne.n	8002fde <_svfiprintf_r+0x6a>
 8002fdc:	e0ae      	b.n	800313c <_svfiprintf_r+0x1c8>
 8002fde:	6962      	ldr	r2, [r4, #20]
 8002fe0:	9b05      	ldr	r3, [sp, #20]
 8002fe2:	4694      	mov	ip, r2
 8002fe4:	4463      	add	r3, ip
 8002fe6:	6163      	str	r3, [r4, #20]
 8002fe8:	782b      	ldrb	r3, [r5, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d100      	bne.n	8002ff0 <_svfiprintf_r+0x7c>
 8002fee:	e0a5      	b.n	800313c <_svfiprintf_r+0x1c8>
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	4252      	negs	r2, r2
 8002ff6:	6062      	str	r2, [r4, #4]
 8002ff8:	a904      	add	r1, sp, #16
 8002ffa:	3254      	adds	r2, #84	; 0x54
 8002ffc:	1852      	adds	r2, r2, r1
 8002ffe:	1c6e      	adds	r6, r5, #1
 8003000:	6023      	str	r3, [r4, #0]
 8003002:	60e3      	str	r3, [r4, #12]
 8003004:	60a3      	str	r3, [r4, #8]
 8003006:	7013      	strb	r3, [r2, #0]
 8003008:	65a3      	str	r3, [r4, #88]	; 0x58
 800300a:	2205      	movs	r2, #5
 800300c:	7831      	ldrb	r1, [r6, #0]
 800300e:	4854      	ldr	r0, [pc, #336]	; (8003160 <_svfiprintf_r+0x1ec>)
 8003010:	f000 fa32 	bl	8003478 <memchr>
 8003014:	1c75      	adds	r5, r6, #1
 8003016:	2800      	cmp	r0, #0
 8003018:	d11f      	bne.n	800305a <_svfiprintf_r+0xe6>
 800301a:	6822      	ldr	r2, [r4, #0]
 800301c:	06d3      	lsls	r3, r2, #27
 800301e:	d504      	bpl.n	800302a <_svfiprintf_r+0xb6>
 8003020:	2353      	movs	r3, #83	; 0x53
 8003022:	a904      	add	r1, sp, #16
 8003024:	185b      	adds	r3, r3, r1
 8003026:	2120      	movs	r1, #32
 8003028:	7019      	strb	r1, [r3, #0]
 800302a:	0713      	lsls	r3, r2, #28
 800302c:	d504      	bpl.n	8003038 <_svfiprintf_r+0xc4>
 800302e:	2353      	movs	r3, #83	; 0x53
 8003030:	a904      	add	r1, sp, #16
 8003032:	185b      	adds	r3, r3, r1
 8003034:	212b      	movs	r1, #43	; 0x2b
 8003036:	7019      	strb	r1, [r3, #0]
 8003038:	7833      	ldrb	r3, [r6, #0]
 800303a:	2b2a      	cmp	r3, #42	; 0x2a
 800303c:	d016      	beq.n	800306c <_svfiprintf_r+0xf8>
 800303e:	0035      	movs	r5, r6
 8003040:	2100      	movs	r1, #0
 8003042:	200a      	movs	r0, #10
 8003044:	68e3      	ldr	r3, [r4, #12]
 8003046:	782a      	ldrb	r2, [r5, #0]
 8003048:	1c6e      	adds	r6, r5, #1
 800304a:	3a30      	subs	r2, #48	; 0x30
 800304c:	2a09      	cmp	r2, #9
 800304e:	d94e      	bls.n	80030ee <_svfiprintf_r+0x17a>
 8003050:	2900      	cmp	r1, #0
 8003052:	d111      	bne.n	8003078 <_svfiprintf_r+0x104>
 8003054:	e017      	b.n	8003086 <_svfiprintf_r+0x112>
 8003056:	3501      	adds	r5, #1
 8003058:	e7b0      	b.n	8002fbc <_svfiprintf_r+0x48>
 800305a:	4b41      	ldr	r3, [pc, #260]	; (8003160 <_svfiprintf_r+0x1ec>)
 800305c:	6822      	ldr	r2, [r4, #0]
 800305e:	1ac0      	subs	r0, r0, r3
 8003060:	2301      	movs	r3, #1
 8003062:	4083      	lsls	r3, r0
 8003064:	4313      	orrs	r3, r2
 8003066:	002e      	movs	r6, r5
 8003068:	6023      	str	r3, [r4, #0]
 800306a:	e7ce      	b.n	800300a <_svfiprintf_r+0x96>
 800306c:	9b07      	ldr	r3, [sp, #28]
 800306e:	1d19      	adds	r1, r3, #4
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	9107      	str	r1, [sp, #28]
 8003074:	2b00      	cmp	r3, #0
 8003076:	db01      	blt.n	800307c <_svfiprintf_r+0x108>
 8003078:	930b      	str	r3, [sp, #44]	; 0x2c
 800307a:	e004      	b.n	8003086 <_svfiprintf_r+0x112>
 800307c:	425b      	negs	r3, r3
 800307e:	60e3      	str	r3, [r4, #12]
 8003080:	2302      	movs	r3, #2
 8003082:	4313      	orrs	r3, r2
 8003084:	6023      	str	r3, [r4, #0]
 8003086:	782b      	ldrb	r3, [r5, #0]
 8003088:	2b2e      	cmp	r3, #46	; 0x2e
 800308a:	d10a      	bne.n	80030a2 <_svfiprintf_r+0x12e>
 800308c:	786b      	ldrb	r3, [r5, #1]
 800308e:	2b2a      	cmp	r3, #42	; 0x2a
 8003090:	d135      	bne.n	80030fe <_svfiprintf_r+0x18a>
 8003092:	9b07      	ldr	r3, [sp, #28]
 8003094:	3502      	adds	r5, #2
 8003096:	1d1a      	adds	r2, r3, #4
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	9207      	str	r2, [sp, #28]
 800309c:	2b00      	cmp	r3, #0
 800309e:	db2b      	blt.n	80030f8 <_svfiprintf_r+0x184>
 80030a0:	9309      	str	r3, [sp, #36]	; 0x24
 80030a2:	4e30      	ldr	r6, [pc, #192]	; (8003164 <_svfiprintf_r+0x1f0>)
 80030a4:	2203      	movs	r2, #3
 80030a6:	0030      	movs	r0, r6
 80030a8:	7829      	ldrb	r1, [r5, #0]
 80030aa:	f000 f9e5 	bl	8003478 <memchr>
 80030ae:	2800      	cmp	r0, #0
 80030b0:	d006      	beq.n	80030c0 <_svfiprintf_r+0x14c>
 80030b2:	2340      	movs	r3, #64	; 0x40
 80030b4:	1b80      	subs	r0, r0, r6
 80030b6:	4083      	lsls	r3, r0
 80030b8:	6822      	ldr	r2, [r4, #0]
 80030ba:	3501      	adds	r5, #1
 80030bc:	4313      	orrs	r3, r2
 80030be:	6023      	str	r3, [r4, #0]
 80030c0:	7829      	ldrb	r1, [r5, #0]
 80030c2:	2206      	movs	r2, #6
 80030c4:	4828      	ldr	r0, [pc, #160]	; (8003168 <_svfiprintf_r+0x1f4>)
 80030c6:	1c6e      	adds	r6, r5, #1
 80030c8:	7621      	strb	r1, [r4, #24]
 80030ca:	f000 f9d5 	bl	8003478 <memchr>
 80030ce:	2800      	cmp	r0, #0
 80030d0:	d03c      	beq.n	800314c <_svfiprintf_r+0x1d8>
 80030d2:	4b26      	ldr	r3, [pc, #152]	; (800316c <_svfiprintf_r+0x1f8>)
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d125      	bne.n	8003124 <_svfiprintf_r+0x1b0>
 80030d8:	2207      	movs	r2, #7
 80030da:	9b07      	ldr	r3, [sp, #28]
 80030dc:	3307      	adds	r3, #7
 80030de:	4393      	bics	r3, r2
 80030e0:	3308      	adds	r3, #8
 80030e2:	9307      	str	r3, [sp, #28]
 80030e4:	6963      	ldr	r3, [r4, #20]
 80030e6:	9a04      	ldr	r2, [sp, #16]
 80030e8:	189b      	adds	r3, r3, r2
 80030ea:	6163      	str	r3, [r4, #20]
 80030ec:	e765      	b.n	8002fba <_svfiprintf_r+0x46>
 80030ee:	4343      	muls	r3, r0
 80030f0:	0035      	movs	r5, r6
 80030f2:	2101      	movs	r1, #1
 80030f4:	189b      	adds	r3, r3, r2
 80030f6:	e7a6      	b.n	8003046 <_svfiprintf_r+0xd2>
 80030f8:	2301      	movs	r3, #1
 80030fa:	425b      	negs	r3, r3
 80030fc:	e7d0      	b.n	80030a0 <_svfiprintf_r+0x12c>
 80030fe:	2300      	movs	r3, #0
 8003100:	200a      	movs	r0, #10
 8003102:	001a      	movs	r2, r3
 8003104:	3501      	adds	r5, #1
 8003106:	6063      	str	r3, [r4, #4]
 8003108:	7829      	ldrb	r1, [r5, #0]
 800310a:	1c6e      	adds	r6, r5, #1
 800310c:	3930      	subs	r1, #48	; 0x30
 800310e:	2909      	cmp	r1, #9
 8003110:	d903      	bls.n	800311a <_svfiprintf_r+0x1a6>
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0c5      	beq.n	80030a2 <_svfiprintf_r+0x12e>
 8003116:	9209      	str	r2, [sp, #36]	; 0x24
 8003118:	e7c3      	b.n	80030a2 <_svfiprintf_r+0x12e>
 800311a:	4342      	muls	r2, r0
 800311c:	0035      	movs	r5, r6
 800311e:	2301      	movs	r3, #1
 8003120:	1852      	adds	r2, r2, r1
 8003122:	e7f1      	b.n	8003108 <_svfiprintf_r+0x194>
 8003124:	ab07      	add	r3, sp, #28
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	003a      	movs	r2, r7
 800312a:	0021      	movs	r1, r4
 800312c:	4b10      	ldr	r3, [pc, #64]	; (8003170 <_svfiprintf_r+0x1fc>)
 800312e:	9803      	ldr	r0, [sp, #12]
 8003130:	e000      	b.n	8003134 <_svfiprintf_r+0x1c0>
 8003132:	bf00      	nop
 8003134:	9004      	str	r0, [sp, #16]
 8003136:	9b04      	ldr	r3, [sp, #16]
 8003138:	3301      	adds	r3, #1
 800313a:	d1d3      	bne.n	80030e4 <_svfiprintf_r+0x170>
 800313c:	89bb      	ldrh	r3, [r7, #12]
 800313e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003140:	065b      	lsls	r3, r3, #25
 8003142:	d400      	bmi.n	8003146 <_svfiprintf_r+0x1d2>
 8003144:	e72d      	b.n	8002fa2 <_svfiprintf_r+0x2e>
 8003146:	2001      	movs	r0, #1
 8003148:	4240      	negs	r0, r0
 800314a:	e72a      	b.n	8002fa2 <_svfiprintf_r+0x2e>
 800314c:	ab07      	add	r3, sp, #28
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	003a      	movs	r2, r7
 8003152:	0021      	movs	r1, r4
 8003154:	4b06      	ldr	r3, [pc, #24]	; (8003170 <_svfiprintf_r+0x1fc>)
 8003156:	9803      	ldr	r0, [sp, #12]
 8003158:	f000 f87c 	bl	8003254 <_printf_i>
 800315c:	e7ea      	b.n	8003134 <_svfiprintf_r+0x1c0>
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	08003648 	.word	0x08003648
 8003164:	0800364e 	.word	0x0800364e
 8003168:	08003652 	.word	0x08003652
 800316c:	00000000 	.word	0x00000000
 8003170:	08002eb1 	.word	0x08002eb1

08003174 <_printf_common>:
 8003174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003176:	0015      	movs	r5, r2
 8003178:	9301      	str	r3, [sp, #4]
 800317a:	688a      	ldr	r2, [r1, #8]
 800317c:	690b      	ldr	r3, [r1, #16]
 800317e:	000c      	movs	r4, r1
 8003180:	9000      	str	r0, [sp, #0]
 8003182:	4293      	cmp	r3, r2
 8003184:	da00      	bge.n	8003188 <_printf_common+0x14>
 8003186:	0013      	movs	r3, r2
 8003188:	0022      	movs	r2, r4
 800318a:	602b      	str	r3, [r5, #0]
 800318c:	3243      	adds	r2, #67	; 0x43
 800318e:	7812      	ldrb	r2, [r2, #0]
 8003190:	2a00      	cmp	r2, #0
 8003192:	d001      	beq.n	8003198 <_printf_common+0x24>
 8003194:	3301      	adds	r3, #1
 8003196:	602b      	str	r3, [r5, #0]
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	069b      	lsls	r3, r3, #26
 800319c:	d502      	bpl.n	80031a4 <_printf_common+0x30>
 800319e:	682b      	ldr	r3, [r5, #0]
 80031a0:	3302      	adds	r3, #2
 80031a2:	602b      	str	r3, [r5, #0]
 80031a4:	6822      	ldr	r2, [r4, #0]
 80031a6:	2306      	movs	r3, #6
 80031a8:	0017      	movs	r7, r2
 80031aa:	401f      	ands	r7, r3
 80031ac:	421a      	tst	r2, r3
 80031ae:	d027      	beq.n	8003200 <_printf_common+0x8c>
 80031b0:	0023      	movs	r3, r4
 80031b2:	3343      	adds	r3, #67	; 0x43
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	1e5a      	subs	r2, r3, #1
 80031b8:	4193      	sbcs	r3, r2
 80031ba:	6822      	ldr	r2, [r4, #0]
 80031bc:	0692      	lsls	r2, r2, #26
 80031be:	d430      	bmi.n	8003222 <_printf_common+0xae>
 80031c0:	0022      	movs	r2, r4
 80031c2:	9901      	ldr	r1, [sp, #4]
 80031c4:	9800      	ldr	r0, [sp, #0]
 80031c6:	9e08      	ldr	r6, [sp, #32]
 80031c8:	3243      	adds	r2, #67	; 0x43
 80031ca:	47b0      	blx	r6
 80031cc:	1c43      	adds	r3, r0, #1
 80031ce:	d025      	beq.n	800321c <_printf_common+0xa8>
 80031d0:	2306      	movs	r3, #6
 80031d2:	6820      	ldr	r0, [r4, #0]
 80031d4:	682a      	ldr	r2, [r5, #0]
 80031d6:	68e1      	ldr	r1, [r4, #12]
 80031d8:	2500      	movs	r5, #0
 80031da:	4003      	ands	r3, r0
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d103      	bne.n	80031e8 <_printf_common+0x74>
 80031e0:	1a8d      	subs	r5, r1, r2
 80031e2:	43eb      	mvns	r3, r5
 80031e4:	17db      	asrs	r3, r3, #31
 80031e6:	401d      	ands	r5, r3
 80031e8:	68a3      	ldr	r3, [r4, #8]
 80031ea:	6922      	ldr	r2, [r4, #16]
 80031ec:	4293      	cmp	r3, r2
 80031ee:	dd01      	ble.n	80031f4 <_printf_common+0x80>
 80031f0:	1a9b      	subs	r3, r3, r2
 80031f2:	18ed      	adds	r5, r5, r3
 80031f4:	2700      	movs	r7, #0
 80031f6:	42bd      	cmp	r5, r7
 80031f8:	d120      	bne.n	800323c <_printf_common+0xc8>
 80031fa:	2000      	movs	r0, #0
 80031fc:	e010      	b.n	8003220 <_printf_common+0xac>
 80031fe:	3701      	adds	r7, #1
 8003200:	68e3      	ldr	r3, [r4, #12]
 8003202:	682a      	ldr	r2, [r5, #0]
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	42bb      	cmp	r3, r7
 8003208:	ddd2      	ble.n	80031b0 <_printf_common+0x3c>
 800320a:	0022      	movs	r2, r4
 800320c:	2301      	movs	r3, #1
 800320e:	9901      	ldr	r1, [sp, #4]
 8003210:	9800      	ldr	r0, [sp, #0]
 8003212:	9e08      	ldr	r6, [sp, #32]
 8003214:	3219      	adds	r2, #25
 8003216:	47b0      	blx	r6
 8003218:	1c43      	adds	r3, r0, #1
 800321a:	d1f0      	bne.n	80031fe <_printf_common+0x8a>
 800321c:	2001      	movs	r0, #1
 800321e:	4240      	negs	r0, r0
 8003220:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003222:	2030      	movs	r0, #48	; 0x30
 8003224:	18e1      	adds	r1, r4, r3
 8003226:	3143      	adds	r1, #67	; 0x43
 8003228:	7008      	strb	r0, [r1, #0]
 800322a:	0021      	movs	r1, r4
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	3145      	adds	r1, #69	; 0x45
 8003230:	7809      	ldrb	r1, [r1, #0]
 8003232:	18a2      	adds	r2, r4, r2
 8003234:	3243      	adds	r2, #67	; 0x43
 8003236:	3302      	adds	r3, #2
 8003238:	7011      	strb	r1, [r2, #0]
 800323a:	e7c1      	b.n	80031c0 <_printf_common+0x4c>
 800323c:	0022      	movs	r2, r4
 800323e:	2301      	movs	r3, #1
 8003240:	9901      	ldr	r1, [sp, #4]
 8003242:	9800      	ldr	r0, [sp, #0]
 8003244:	9e08      	ldr	r6, [sp, #32]
 8003246:	321a      	adds	r2, #26
 8003248:	47b0      	blx	r6
 800324a:	1c43      	adds	r3, r0, #1
 800324c:	d0e6      	beq.n	800321c <_printf_common+0xa8>
 800324e:	3701      	adds	r7, #1
 8003250:	e7d1      	b.n	80031f6 <_printf_common+0x82>
	...

08003254 <_printf_i>:
 8003254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003256:	b08b      	sub	sp, #44	; 0x2c
 8003258:	9206      	str	r2, [sp, #24]
 800325a:	000a      	movs	r2, r1
 800325c:	3243      	adds	r2, #67	; 0x43
 800325e:	9307      	str	r3, [sp, #28]
 8003260:	9005      	str	r0, [sp, #20]
 8003262:	9204      	str	r2, [sp, #16]
 8003264:	7e0a      	ldrb	r2, [r1, #24]
 8003266:	000c      	movs	r4, r1
 8003268:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800326a:	2a78      	cmp	r2, #120	; 0x78
 800326c:	d807      	bhi.n	800327e <_printf_i+0x2a>
 800326e:	2a62      	cmp	r2, #98	; 0x62
 8003270:	d809      	bhi.n	8003286 <_printf_i+0x32>
 8003272:	2a00      	cmp	r2, #0
 8003274:	d100      	bne.n	8003278 <_printf_i+0x24>
 8003276:	e0c1      	b.n	80033fc <_printf_i+0x1a8>
 8003278:	2a58      	cmp	r2, #88	; 0x58
 800327a:	d100      	bne.n	800327e <_printf_i+0x2a>
 800327c:	e08c      	b.n	8003398 <_printf_i+0x144>
 800327e:	0026      	movs	r6, r4
 8003280:	3642      	adds	r6, #66	; 0x42
 8003282:	7032      	strb	r2, [r6, #0]
 8003284:	e022      	b.n	80032cc <_printf_i+0x78>
 8003286:	0010      	movs	r0, r2
 8003288:	3863      	subs	r0, #99	; 0x63
 800328a:	2815      	cmp	r0, #21
 800328c:	d8f7      	bhi.n	800327e <_printf_i+0x2a>
 800328e:	f7fc ff3b 	bl	8000108 <__gnu_thumb1_case_shi>
 8003292:	0016      	.short	0x0016
 8003294:	fff6001f 	.word	0xfff6001f
 8003298:	fff6fff6 	.word	0xfff6fff6
 800329c:	001ffff6 	.word	0x001ffff6
 80032a0:	fff6fff6 	.word	0xfff6fff6
 80032a4:	fff6fff6 	.word	0xfff6fff6
 80032a8:	003600a8 	.word	0x003600a8
 80032ac:	fff6009a 	.word	0xfff6009a
 80032b0:	00b9fff6 	.word	0x00b9fff6
 80032b4:	0036fff6 	.word	0x0036fff6
 80032b8:	fff6fff6 	.word	0xfff6fff6
 80032bc:	009e      	.short	0x009e
 80032be:	0026      	movs	r6, r4
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	3642      	adds	r6, #66	; 0x42
 80032c4:	1d11      	adds	r1, r2, #4
 80032c6:	6019      	str	r1, [r3, #0]
 80032c8:	6813      	ldr	r3, [r2, #0]
 80032ca:	7033      	strb	r3, [r6, #0]
 80032cc:	2301      	movs	r3, #1
 80032ce:	e0a7      	b.n	8003420 <_printf_i+0x1cc>
 80032d0:	6808      	ldr	r0, [r1, #0]
 80032d2:	6819      	ldr	r1, [r3, #0]
 80032d4:	1d0a      	adds	r2, r1, #4
 80032d6:	0605      	lsls	r5, r0, #24
 80032d8:	d50b      	bpl.n	80032f2 <_printf_i+0x9e>
 80032da:	680d      	ldr	r5, [r1, #0]
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	2d00      	cmp	r5, #0
 80032e0:	da03      	bge.n	80032ea <_printf_i+0x96>
 80032e2:	232d      	movs	r3, #45	; 0x2d
 80032e4:	9a04      	ldr	r2, [sp, #16]
 80032e6:	426d      	negs	r5, r5
 80032e8:	7013      	strb	r3, [r2, #0]
 80032ea:	4b61      	ldr	r3, [pc, #388]	; (8003470 <_printf_i+0x21c>)
 80032ec:	270a      	movs	r7, #10
 80032ee:	9303      	str	r3, [sp, #12]
 80032f0:	e01b      	b.n	800332a <_printf_i+0xd6>
 80032f2:	680d      	ldr	r5, [r1, #0]
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	0641      	lsls	r1, r0, #25
 80032f8:	d5f1      	bpl.n	80032de <_printf_i+0x8a>
 80032fa:	b22d      	sxth	r5, r5
 80032fc:	e7ef      	b.n	80032de <_printf_i+0x8a>
 80032fe:	680d      	ldr	r5, [r1, #0]
 8003300:	6819      	ldr	r1, [r3, #0]
 8003302:	1d08      	adds	r0, r1, #4
 8003304:	6018      	str	r0, [r3, #0]
 8003306:	062e      	lsls	r6, r5, #24
 8003308:	d501      	bpl.n	800330e <_printf_i+0xba>
 800330a:	680d      	ldr	r5, [r1, #0]
 800330c:	e003      	b.n	8003316 <_printf_i+0xc2>
 800330e:	066d      	lsls	r5, r5, #25
 8003310:	d5fb      	bpl.n	800330a <_printf_i+0xb6>
 8003312:	680d      	ldr	r5, [r1, #0]
 8003314:	b2ad      	uxth	r5, r5
 8003316:	4b56      	ldr	r3, [pc, #344]	; (8003470 <_printf_i+0x21c>)
 8003318:	2708      	movs	r7, #8
 800331a:	9303      	str	r3, [sp, #12]
 800331c:	2a6f      	cmp	r2, #111	; 0x6f
 800331e:	d000      	beq.n	8003322 <_printf_i+0xce>
 8003320:	3702      	adds	r7, #2
 8003322:	0023      	movs	r3, r4
 8003324:	2200      	movs	r2, #0
 8003326:	3343      	adds	r3, #67	; 0x43
 8003328:	701a      	strb	r2, [r3, #0]
 800332a:	6863      	ldr	r3, [r4, #4]
 800332c:	60a3      	str	r3, [r4, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	db03      	blt.n	800333a <_printf_i+0xe6>
 8003332:	2204      	movs	r2, #4
 8003334:	6821      	ldr	r1, [r4, #0]
 8003336:	4391      	bics	r1, r2
 8003338:	6021      	str	r1, [r4, #0]
 800333a:	2d00      	cmp	r5, #0
 800333c:	d102      	bne.n	8003344 <_printf_i+0xf0>
 800333e:	9e04      	ldr	r6, [sp, #16]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00c      	beq.n	800335e <_printf_i+0x10a>
 8003344:	9e04      	ldr	r6, [sp, #16]
 8003346:	0028      	movs	r0, r5
 8003348:	0039      	movs	r1, r7
 800334a:	f7fc ff6d 	bl	8000228 <__aeabi_uidivmod>
 800334e:	9b03      	ldr	r3, [sp, #12]
 8003350:	3e01      	subs	r6, #1
 8003352:	5c5b      	ldrb	r3, [r3, r1]
 8003354:	7033      	strb	r3, [r6, #0]
 8003356:	002b      	movs	r3, r5
 8003358:	0005      	movs	r5, r0
 800335a:	429f      	cmp	r7, r3
 800335c:	d9f3      	bls.n	8003346 <_printf_i+0xf2>
 800335e:	2f08      	cmp	r7, #8
 8003360:	d109      	bne.n	8003376 <_printf_i+0x122>
 8003362:	6823      	ldr	r3, [r4, #0]
 8003364:	07db      	lsls	r3, r3, #31
 8003366:	d506      	bpl.n	8003376 <_printf_i+0x122>
 8003368:	6863      	ldr	r3, [r4, #4]
 800336a:	6922      	ldr	r2, [r4, #16]
 800336c:	4293      	cmp	r3, r2
 800336e:	dc02      	bgt.n	8003376 <_printf_i+0x122>
 8003370:	2330      	movs	r3, #48	; 0x30
 8003372:	3e01      	subs	r6, #1
 8003374:	7033      	strb	r3, [r6, #0]
 8003376:	9b04      	ldr	r3, [sp, #16]
 8003378:	1b9b      	subs	r3, r3, r6
 800337a:	6123      	str	r3, [r4, #16]
 800337c:	9b07      	ldr	r3, [sp, #28]
 800337e:	0021      	movs	r1, r4
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	9805      	ldr	r0, [sp, #20]
 8003384:	9b06      	ldr	r3, [sp, #24]
 8003386:	aa09      	add	r2, sp, #36	; 0x24
 8003388:	f7ff fef4 	bl	8003174 <_printf_common>
 800338c:	1c43      	adds	r3, r0, #1
 800338e:	d14c      	bne.n	800342a <_printf_i+0x1d6>
 8003390:	2001      	movs	r0, #1
 8003392:	4240      	negs	r0, r0
 8003394:	b00b      	add	sp, #44	; 0x2c
 8003396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003398:	3145      	adds	r1, #69	; 0x45
 800339a:	700a      	strb	r2, [r1, #0]
 800339c:	4a34      	ldr	r2, [pc, #208]	; (8003470 <_printf_i+0x21c>)
 800339e:	9203      	str	r2, [sp, #12]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	6821      	ldr	r1, [r4, #0]
 80033a4:	ca20      	ldmia	r2!, {r5}
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	0608      	lsls	r0, r1, #24
 80033aa:	d516      	bpl.n	80033da <_printf_i+0x186>
 80033ac:	07cb      	lsls	r3, r1, #31
 80033ae:	d502      	bpl.n	80033b6 <_printf_i+0x162>
 80033b0:	2320      	movs	r3, #32
 80033b2:	4319      	orrs	r1, r3
 80033b4:	6021      	str	r1, [r4, #0]
 80033b6:	2710      	movs	r7, #16
 80033b8:	2d00      	cmp	r5, #0
 80033ba:	d1b2      	bne.n	8003322 <_printf_i+0xce>
 80033bc:	2320      	movs	r3, #32
 80033be:	6822      	ldr	r2, [r4, #0]
 80033c0:	439a      	bics	r2, r3
 80033c2:	6022      	str	r2, [r4, #0]
 80033c4:	e7ad      	b.n	8003322 <_printf_i+0xce>
 80033c6:	2220      	movs	r2, #32
 80033c8:	6809      	ldr	r1, [r1, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	6022      	str	r2, [r4, #0]
 80033ce:	0022      	movs	r2, r4
 80033d0:	2178      	movs	r1, #120	; 0x78
 80033d2:	3245      	adds	r2, #69	; 0x45
 80033d4:	7011      	strb	r1, [r2, #0]
 80033d6:	4a27      	ldr	r2, [pc, #156]	; (8003474 <_printf_i+0x220>)
 80033d8:	e7e1      	b.n	800339e <_printf_i+0x14a>
 80033da:	0648      	lsls	r0, r1, #25
 80033dc:	d5e6      	bpl.n	80033ac <_printf_i+0x158>
 80033de:	b2ad      	uxth	r5, r5
 80033e0:	e7e4      	b.n	80033ac <_printf_i+0x158>
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	680d      	ldr	r5, [r1, #0]
 80033e6:	1d10      	adds	r0, r2, #4
 80033e8:	6949      	ldr	r1, [r1, #20]
 80033ea:	6018      	str	r0, [r3, #0]
 80033ec:	6813      	ldr	r3, [r2, #0]
 80033ee:	062e      	lsls	r6, r5, #24
 80033f0:	d501      	bpl.n	80033f6 <_printf_i+0x1a2>
 80033f2:	6019      	str	r1, [r3, #0]
 80033f4:	e002      	b.n	80033fc <_printf_i+0x1a8>
 80033f6:	066d      	lsls	r5, r5, #25
 80033f8:	d5fb      	bpl.n	80033f2 <_printf_i+0x19e>
 80033fa:	8019      	strh	r1, [r3, #0]
 80033fc:	2300      	movs	r3, #0
 80033fe:	9e04      	ldr	r6, [sp, #16]
 8003400:	6123      	str	r3, [r4, #16]
 8003402:	e7bb      	b.n	800337c <_printf_i+0x128>
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	1d11      	adds	r1, r2, #4
 8003408:	6019      	str	r1, [r3, #0]
 800340a:	6816      	ldr	r6, [r2, #0]
 800340c:	2100      	movs	r1, #0
 800340e:	0030      	movs	r0, r6
 8003410:	6862      	ldr	r2, [r4, #4]
 8003412:	f000 f831 	bl	8003478 <memchr>
 8003416:	2800      	cmp	r0, #0
 8003418:	d001      	beq.n	800341e <_printf_i+0x1ca>
 800341a:	1b80      	subs	r0, r0, r6
 800341c:	6060      	str	r0, [r4, #4]
 800341e:	6863      	ldr	r3, [r4, #4]
 8003420:	6123      	str	r3, [r4, #16]
 8003422:	2300      	movs	r3, #0
 8003424:	9a04      	ldr	r2, [sp, #16]
 8003426:	7013      	strb	r3, [r2, #0]
 8003428:	e7a8      	b.n	800337c <_printf_i+0x128>
 800342a:	6923      	ldr	r3, [r4, #16]
 800342c:	0032      	movs	r2, r6
 800342e:	9906      	ldr	r1, [sp, #24]
 8003430:	9805      	ldr	r0, [sp, #20]
 8003432:	9d07      	ldr	r5, [sp, #28]
 8003434:	47a8      	blx	r5
 8003436:	1c43      	adds	r3, r0, #1
 8003438:	d0aa      	beq.n	8003390 <_printf_i+0x13c>
 800343a:	6823      	ldr	r3, [r4, #0]
 800343c:	079b      	lsls	r3, r3, #30
 800343e:	d415      	bmi.n	800346c <_printf_i+0x218>
 8003440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003442:	68e0      	ldr	r0, [r4, #12]
 8003444:	4298      	cmp	r0, r3
 8003446:	daa5      	bge.n	8003394 <_printf_i+0x140>
 8003448:	0018      	movs	r0, r3
 800344a:	e7a3      	b.n	8003394 <_printf_i+0x140>
 800344c:	0022      	movs	r2, r4
 800344e:	2301      	movs	r3, #1
 8003450:	9906      	ldr	r1, [sp, #24]
 8003452:	9805      	ldr	r0, [sp, #20]
 8003454:	9e07      	ldr	r6, [sp, #28]
 8003456:	3219      	adds	r2, #25
 8003458:	47b0      	blx	r6
 800345a:	1c43      	adds	r3, r0, #1
 800345c:	d098      	beq.n	8003390 <_printf_i+0x13c>
 800345e:	3501      	adds	r5, #1
 8003460:	68e3      	ldr	r3, [r4, #12]
 8003462:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	42ab      	cmp	r3, r5
 8003468:	dcf0      	bgt.n	800344c <_printf_i+0x1f8>
 800346a:	e7e9      	b.n	8003440 <_printf_i+0x1ec>
 800346c:	2500      	movs	r5, #0
 800346e:	e7f7      	b.n	8003460 <_printf_i+0x20c>
 8003470:	08003659 	.word	0x08003659
 8003474:	0800366a 	.word	0x0800366a

08003478 <memchr>:
 8003478:	b2c9      	uxtb	r1, r1
 800347a:	1882      	adds	r2, r0, r2
 800347c:	4290      	cmp	r0, r2
 800347e:	d101      	bne.n	8003484 <memchr+0xc>
 8003480:	2000      	movs	r0, #0
 8003482:	4770      	bx	lr
 8003484:	7803      	ldrb	r3, [r0, #0]
 8003486:	428b      	cmp	r3, r1
 8003488:	d0fb      	beq.n	8003482 <memchr+0xa>
 800348a:	3001      	adds	r0, #1
 800348c:	e7f6      	b.n	800347c <memchr+0x4>

0800348e <memmove>:
 800348e:	b510      	push	{r4, lr}
 8003490:	4288      	cmp	r0, r1
 8003492:	d902      	bls.n	800349a <memmove+0xc>
 8003494:	188b      	adds	r3, r1, r2
 8003496:	4298      	cmp	r0, r3
 8003498:	d303      	bcc.n	80034a2 <memmove+0x14>
 800349a:	2300      	movs	r3, #0
 800349c:	e007      	b.n	80034ae <memmove+0x20>
 800349e:	5c8b      	ldrb	r3, [r1, r2]
 80034a0:	5483      	strb	r3, [r0, r2]
 80034a2:	3a01      	subs	r2, #1
 80034a4:	d2fb      	bcs.n	800349e <memmove+0x10>
 80034a6:	bd10      	pop	{r4, pc}
 80034a8:	5ccc      	ldrb	r4, [r1, r3]
 80034aa:	54c4      	strb	r4, [r0, r3]
 80034ac:	3301      	adds	r3, #1
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d1fa      	bne.n	80034a8 <memmove+0x1a>
 80034b2:	e7f8      	b.n	80034a6 <memmove+0x18>

080034b4 <_realloc_r>:
 80034b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034b6:	0007      	movs	r7, r0
 80034b8:	000e      	movs	r6, r1
 80034ba:	0014      	movs	r4, r2
 80034bc:	2900      	cmp	r1, #0
 80034be:	d105      	bne.n	80034cc <_realloc_r+0x18>
 80034c0:	0011      	movs	r1, r2
 80034c2:	f7ff fc3b 	bl	8002d3c <_malloc_r>
 80034c6:	0005      	movs	r5, r0
 80034c8:	0028      	movs	r0, r5
 80034ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80034cc:	2a00      	cmp	r2, #0
 80034ce:	d103      	bne.n	80034d8 <_realloc_r+0x24>
 80034d0:	f7ff fbc8 	bl	8002c64 <_free_r>
 80034d4:	0025      	movs	r5, r4
 80034d6:	e7f7      	b.n	80034c8 <_realloc_r+0x14>
 80034d8:	f000 f81b 	bl	8003512 <_malloc_usable_size_r>
 80034dc:	9001      	str	r0, [sp, #4]
 80034de:	4284      	cmp	r4, r0
 80034e0:	d803      	bhi.n	80034ea <_realloc_r+0x36>
 80034e2:	0035      	movs	r5, r6
 80034e4:	0843      	lsrs	r3, r0, #1
 80034e6:	42a3      	cmp	r3, r4
 80034e8:	d3ee      	bcc.n	80034c8 <_realloc_r+0x14>
 80034ea:	0021      	movs	r1, r4
 80034ec:	0038      	movs	r0, r7
 80034ee:	f7ff fc25 	bl	8002d3c <_malloc_r>
 80034f2:	1e05      	subs	r5, r0, #0
 80034f4:	d0e8      	beq.n	80034c8 <_realloc_r+0x14>
 80034f6:	9b01      	ldr	r3, [sp, #4]
 80034f8:	0022      	movs	r2, r4
 80034fa:	429c      	cmp	r4, r3
 80034fc:	d900      	bls.n	8003500 <_realloc_r+0x4c>
 80034fe:	001a      	movs	r2, r3
 8003500:	0031      	movs	r1, r6
 8003502:	0028      	movs	r0, r5
 8003504:	f7ff fb9c 	bl	8002c40 <memcpy>
 8003508:	0031      	movs	r1, r6
 800350a:	0038      	movs	r0, r7
 800350c:	f7ff fbaa 	bl	8002c64 <_free_r>
 8003510:	e7da      	b.n	80034c8 <_realloc_r+0x14>

08003512 <_malloc_usable_size_r>:
 8003512:	1f0b      	subs	r3, r1, #4
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	1f18      	subs	r0, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	da01      	bge.n	8003520 <_malloc_usable_size_r+0xe>
 800351c:	580b      	ldr	r3, [r1, r0]
 800351e:	18c0      	adds	r0, r0, r3
 8003520:	4770      	bx	lr
	...

08003524 <_init>:
 8003524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800352a:	bc08      	pop	{r3}
 800352c:	469e      	mov	lr, r3
 800352e:	4770      	bx	lr

08003530 <_fini>:
 8003530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003536:	bc08      	pop	{r3}
 8003538:	469e      	mov	lr, r3
 800353a:	4770      	bx	lr
